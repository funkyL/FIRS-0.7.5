/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */
#define MAX_SUM_PROD_RATIO 8

/* Temporary variables used within this template */
#define var_received_timely_1       0
#define var_received_timely_2       1
#define var_received_timely_3       2

produce (THIS_ID(simple_produce), waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
			LOAD_PERM(var_leftover_cargo_1) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_1) +
			LOAD_PERM(var_leftover_cargo_2) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_2) +
			LOAD_PERM(var_leftover_cargo_3) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_3),

			LOAD_PERM(var_leftover_cargo_1) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_1) +
			LOAD_PERM(var_leftover_cargo_2) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_2) +
			LOAD_PERM(var_leftover_cargo_3) / MAX_SUM_PROD_RATIO / THIS_NUM_OUTPUT_CARGOS * LOAD_PERM(var_ratio_cargo_3),
			[
			/* Remove any remainder */
			STORE_PERM( LOAD_PERM(var_leftover_cargo_1) % (MAX_SUM_PROD_RATIO * THIS_NUM_OUTPUT_CARGOS), var_leftover_cargo_1),
			STORE_PERM( LOAD_PERM(var_leftover_cargo_2) % (MAX_SUM_PROD_RATIO * THIS_NUM_OUTPUT_CARGOS), var_leftover_cargo_2),
			STORE_PERM( LOAD_PERM(var_leftover_cargo_3) % (MAX_SUM_PROD_RATIO * THIS_NUM_OUTPUT_CARGOS), var_leftover_cargo_3),
			0
			]
);

switch (FEAT_INDUSTRIES, SELF, THIS_ID(produce),
			[
			/* Update the 'last delivery date' for the three input cargos */
			STORE_PERM( max(LOAD_PERM(var_date_received_1),(waiting_cargo_1 > 0) * current_date), var_date_received_1),
			STORE_PERM( max(LOAD_PERM(var_date_received_2),(waiting_cargo_2 > 0) * current_date), var_date_received_2),
			STORE_PERM( max(LOAD_PERM(var_date_received_3),(waiting_cargo_3 > 0) * current_date), var_date_received_3),
			/* Reset the closure countdown */
			STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(var_closure_counter), var_closure_counter),

			/* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
			STORE_PERM( LOAD_PERM(var_input_cargo_1) + waiting_cargo_1, var_input_cargo_1),
			STORE_PERM( LOAD_PERM(var_input_cargo_2) + waiting_cargo_2, var_input_cargo_2),
			STORE_PERM( LOAD_PERM(var_input_cargo_3) + waiting_cargo_3, var_input_cargo_3),

			/* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
			STORE_TEMP( (current_date - LOAD_PERM(var_date_received_1)) <= PRODUCTION_SPAN, var_received_timely_1),
			STORE_TEMP( (current_date - LOAD_PERM(var_date_received_2)) <= PRODUCTION_SPAN, var_received_timely_2),
			STORE_TEMP( (current_date - LOAD_PERM(var_date_received_3)) <= PRODUCTION_SPAN, var_received_timely_3),

			/* Calculate current production ratios for the individual cargos */
			STORE_PERM( THIS_PROD_RATIO_CARGO1 +
			            LOAD_TEMP(var_received_timely_2) * THIS_BOOST_21 +
			            LOAD_TEMP(var_received_timely_3) * THIS_BOOST_31,
			    var_ratio_cargo_1
			),
			STORE_PERM( THIS_PROD_RATIO_CARGO2 +
			            LOAD_TEMP(var_received_timely_1) * THIS_BOOST_12 +
			            LOAD_TEMP(var_received_timely_3) * THIS_BOOST_32,
			    var_ratio_cargo_2
			),
			STORE_PERM( THIS_PROD_RATIO_CARGO3 +
			            LOAD_TEMP(var_received_timely_1) * THIS_BOOST_13 +
			            LOAD_TEMP(var_received_timely_2) * THIS_BOOST_23,
			    var_ratio_cargo_3
			),

			/* Add the remainder to the current leftover cargos */
			STORE_PERM( LOAD_PERM(var_leftover_cargo_1) + waiting_cargo_1, var_leftover_cargo_1),
			STORE_PERM( LOAD_PERM(var_leftover_cargo_2) + waiting_cargo_2, var_leftover_cargo_2),
			STORE_PERM( LOAD_PERM(var_leftover_cargo_3) + waiting_cargo_3, var_leftover_cargo_3),

			1
			]) {
	THIS_ID(simple_produce);
}

#undef MAX_SUM_PROD_RATIO
#undef var_received_timely_1
#undef var_received_timely_2
#undef var_received_timely_3
