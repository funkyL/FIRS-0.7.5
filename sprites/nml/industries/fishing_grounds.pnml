/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) fishing_grounds ## __VA_ARGS__

spriteset(THIS_ID(spriteset_1), "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(10, 10) }
spriteset(THIS_ID(spriteset_2), "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(80, 10) }
spriteset(THIS_ID(spriteset_3), "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(150, 10) }
spriteset(THIS_ID(spriteset_4), "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(220, 10) }
spriteset(THIS_ID(spriteset_5), "sprites/graphics/industries/fishinggrounds.png") { tmpl_building_sprite(290, 10, 31, -32) }

SPRITELAYOUT_NORMAL(THIS_ID(spritelayout_1), GROUNDSPRITE_WATER, THIS_ID(spriteset_1), 16)

SPRITELAYOUT_NORMAL(THIS_ID(spritelayout_2), GROUNDSPRITE_WATER, THIS_ID(spriteset_2), 16)

SPRITELAYOUT_NORMAL(THIS_ID(spritelayout_3), GROUNDSPRITE_WATER, THIS_ID(spriteset_3), 16)

spritelayout THIS_ID(spritelayout_4) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	childsprite {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(3, 2): THIS_ID(spritelayout_1);
	relative_coord(3, 3): THIS_ID(spritelayout_4);
	relative_coord(3, 4): THIS_ID(spritelayout_2);
	THIS_ID(spritelayout_3);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(3, 2): THIS_ID(spritelayout_1);
	relative_coord(3, 3): THIS_ID(spritelayout_2);
	relative_coord(3, 4): THIS_ID(spritelayout_4);
	THIS_ID(spritelayout_3);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_3), relative_pos) {
	relative_coord(2, 3): THIS_ID(spritelayout_3);
	relative_coord(5, 3): THIS_ID(spritelayout_4);
	THIS_ID(spritelayout_2);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_4), relative_pos) {
	relative_coord(3, 5): THIS_ID(spritelayout_1);
	relative_coord(3, 3): THIS_ID(spritelayout_4);
	relative_coord(3, 2): THIS_ID(spritelayout_2);
	THIS_ID(spritelayout_3);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(layout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_2);
	3: THIS_ID(layout_3);
	4: THIS_ID(layout_4);
	THIS_ID(spritelayout_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_FISHINGGROUNDS_1) {
	property {
		substitute:       0;
		accepted_cargos:  [];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}

	graphics {
		THIS_ID(layout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_fishing_grounds_1 {
	0, 0: 255;
	0, 1: 255;
	0, 2: 255;
	0, 3: 255;
	0, 4: 255;
	0, 5: 255;
	0, 6: 255;
	1, 0: 255;
	1, 1: 255;
	1, 2: 255;
	1, 3: 255;
	1, 4: 255;
	1, 5: 255;
	1, 6: 255;
	2, 0: 255;
	2, 1: 255;
	2, 2: 24;
	2, 3: 24;
	2, 4: 255;
	2, 5: 255;
	2, 6: 255;
	3, 0: 255;
	3, 1: 255;
	3, 2: THIS_ID(tile);
	3, 3: THIS_ID(tile);
	3, 4: THIS_ID(tile);
	3, 5: 255;
	3, 6: 255;
	4, 0: 255;
	4, 1: 255;
	4, 2: 255;
	4, 3: THIS_ID(tile);
	4, 4: 255;
	4, 5: 255;
	4, 6: 255;
	5, 0: 255;
	5, 1: 255;
	5, 2: 255;
	5, 3: 255;
	5, 4: 255;
	5, 5: 255;
	5, 6: 255;
	6, 0: 255;
	6, 1: 255;
	6, 2: 255;
	6, 3: 255;
	6, 4: 255;
	6, 5: 255;
	6, 6: 255;
}

tilelayout tilelayout_fishing_grounds_2 {
	0, 0: 255;
	0, 1: 255;
	0, 2: 255;
	0, 3: 255;
	0, 4: 255;
	0, 5: 255;
	0, 6: 255;
	1, 0: 255;
	1, 1: 255;
	1, 2: 255;
	1, 3: 255;
	1, 4: 255;
	1, 5: 255;
	1, 6: 255;
	2, 0: 255;
	2, 1: 255;
	2, 2: 255;
	2, 3: 24;
	2, 4: 24;
	2, 5: 255;
	2, 6: 255;
	3, 0: 255;
	3, 1: 255;
	3, 2: THIS_ID(tile);
	3, 3: THIS_ID(tile);
	3, 4: THIS_ID(tile);
	3, 5: 255;
	3, 6: 255;
	4, 0: 255;
	4, 1: 255;
	4, 2: 255;
	4, 3: 255;
	4, 4: THIS_ID(tile);
	4, 5: 255;
	4, 6: 255;
	5, 0: 255;
	5, 1: 255;
	5, 2: 255;
	5, 3: 255;
	5, 4: THIS_ID(tile);
	5, 5: 255;
	5, 6: 255;
	6, 0: 255;
	6, 1: 255;
	6, 2: 255;
	6, 3: 255;
	6, 4: 255;
	6, 5: 255;
	6, 6: 255;
	7, 0: 255;
	7, 1: 255;
	7, 2: 255;
	7, 3: 255;
	7, 4: 255;
	7, 5: 255;
	7, 6: 255;
}

tilelayout tilelayout_fishing_grounds_3 {
	0, 0: 255;
	0, 1: 255;
	0, 2: 255;
	0, 3: 255;
	0, 4: 255;
	0, 5: 255;
	0, 6: 255;
	1, 0: 255;
	1, 1: 255;
	1, 2: 255;
	1, 3: 255;
	1, 4: 255;
	1, 5: 255;
	1, 6: 255;
	2, 0: 255;
	2, 1: 255;
	2, 2: 255;
	2, 3: THIS_ID(tile);
	2, 4: 255;
	2, 5: 255;
	2, 6: 255;
	3, 0: 255;
	3, 1: 255;
	3, 2: 255;
	3, 3: 255;
	3, 4: 255;
	3, 5: 255;
	3, 6: 255;
	4, 0: 255;
	4, 1: 255;
	4, 2: 24;
	4, 3: 24;
	4, 4: 255;
	4, 5: 255;
	4, 6: 255;
	5, 0: 255;
	5, 1: 255;
	5, 2: THIS_ID(tile);
	5, 3: THIS_ID(tile);
	5, 4: THIS_ID(tile);
	5, 5: 255;
	5, 6: 255;
	6, 0: 255;
	6, 1: 255;
	6, 2: 255;
	6, 3: 255;
	6, 4: 255;
	6, 5: 255;
	6, 6: 255;
	7, 0: 255;
	7, 1: 255;
	7, 2: 255;
	7, 3: 255;
	7, 4: 255;
	7, 5: 255;
	7, 6: 255;
}

tilelayout tilelayout_fishing_grounds_4 {
	0, 0: 255;
	0, 1: 255;
	0, 2: 255;
	0, 3: 255;
	0, 4: 255;
	0, 5: 255;
	0, 6: 255;
	0, 7: 255;
	1, 0: 255;
	1, 1: 255;
	1, 2: 255;
	1, 3: 255;
	1, 4: 255;
	1, 5: 255;
	1, 6: 255;
	1, 7: 255;
	2, 0: 255;
	2, 1: 255;
	2, 2: 24;
	2, 3: 24;
	2, 4: 255;
	2, 5: THIS_ID(tile);
	2, 6: 255;
	2, 7: 255;
	3, 0: 255;
	3, 1: 255;
	3, 2: THIS_ID(tile);
	3, 3: THIS_ID(tile);
	3, 4: THIS_ID(tile);
	3, 5: THIS_ID(tile);
	3, 6: 255;
	3, 7: 255;
	4, 0: 255;
	4, 1: 255;
	4, 2: 255;
	4, 3: 255;
	4, 4: 255;
	4, 5: 255;
	4, 6: 255;
	4, 7: 255;
	5, 0: 255;
	5, 1: 255;
	5, 2: 255;
	5, 3: 255;
	5, 4: 255;
	5, 5: 255;
	5, 6: 255;
	5, 7: 255;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

#define THIS_STR_EXTRA_SUPPLIES        STR_EXTRA_FARM_SUPPLIES

CHECK_NEARBY_CLUSTER(fishing_grounds,  16, 60, 3, 4, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (fishing_harbour,  16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(fishing_grounds))
CHECK_COAST_DISTANCE(coastal_distance, 0, param_max_coastal_distance, CB_RESULT_LOCATION_DISALLOW, THIS_ID(fishing_harbour))
CHECK_FOUNDER       (THIS_ID(coastal_distance))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_primary.pnml"

#include "../templates/check_availability.pnml"

/* industry specific switch to randomise initial production; as Fishing Grounds never changes production, go for a wide range of productions*/
random_switch(FEAT_INDUSTRIES, SELF, THIS_ID(randomise_primary_production_on_build)) {
	1: return 8;
	1: return 12;
	3: return 16;
	2: return 20;
	2: return 24;
	1: return 28;
	1: return 32;
	1: return 36;
	1: return 40;
}


item(FEAT_INDUSTRIES, fishing_grounds, IND_FISHINGGROUNDS_ID) {
	property {
		substitute: 5;
		layouts: [
				tilelayout_fishing_grounds_1,
				tilelayout_fishing_grounds_2,
				tilelayout_fishing_grounds_3,
				tilelayout_fishing_grounds_4
			];
		life_type:              IND_LIFE_TYPE_EXTRACTIVE;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_FISHING_GROUND);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_FISHING_GROUND));
		prod_cargo_types: [FISH];
		accept_cargo_types: [];
		prod_multiplier: [5, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 2;
		conflicting_ind_types: [];
		prob_random: 20;
		prob_in_game: 20;
		prospect_chance: 0.75;
		fund_cost_multiplier: 88;
		map_colour: 158;
		remove_cost_multiplier: 0;
		spec_flags:             bitmask(
		                               IND_FLAG_BUILT_ON_WATER,
								       IND_FLAG_NO_PRODUCTION_INCREASE,
								       IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES
								   );
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
		monthly_prod_change:     return CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
		build_prod_change:       THIS_ID(randomise_primary_production_on_build); // initial production customised to Fishing Grounds
//		extra_text_industry:     // no extra text. No production increase by means of FMSP
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
