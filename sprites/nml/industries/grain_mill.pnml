/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayouts_groundaware.pnml"

#define THIS_ID(...) grain_mill ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground), "sprites/graphics/industries/groundtiles.png") {
	tmpl_ground_tile(150, 10)
	tmpl_ground_tile(150, 10)
}

spriteset(THIS_ID(spriteset_ground_overlay_snow_1)) {
	tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}

spriteset(THIS_ID(spriteset_ground_overlay_snow_2)) {
	tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}
spriteset(THIS_ID(spriteset_ground_overlay_snow_3)) {
	tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}
spriteset(THIS_ID(spriteset_ground_overlay_snow_4)) {
	tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}

spriteset(THIS_ID(spriteset_ground_overlay_normal_1)) {
	tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}

spriteset(THIS_ID(spriteset_ground_overlay_normal_2)) {
	tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}
spriteset(THIS_ID(spriteset_ground_overlay_normal_3)) {
	tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}
spriteset(THIS_ID(spriteset_ground_overlay_normal_4)) {
	tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}


spriteset(THIS_ID(spriteset_snow_1)) {
	[10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
	[10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(THIS_ID(spriteset_snow_2)) {
	[80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
	[80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(THIS_ID(spriteset_snow_3)) {
	[150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
	[150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(THIS_ID(spriteset_snow_4)) {
	[220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
	[220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(THIS_ID(spriteset_normal_1)) {
	[10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
	[10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
}

spriteset(THIS_ID(spriteset_normal_2)) {
	[80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
	[80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
}

spriteset(THIS_ID(spriteset_normal_3)) {
	[150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
	[150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
}

spriteset(THIS_ID(spriteset_normal_4)) {
	[220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
	[220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
}

spriteset(THIS_ID(spriteset_5_anim)) {
	tmpl_building_sprite_filename( 10, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename( 10, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename( 80, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename( 80, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(150, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(150, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(220, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(220, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(290, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(290, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
	tmpl_building_sprite_filename(360, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
	tmpl_building_sprite_filename(360, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
}

GROUND_AWARE_SPRITELAYOUT(THIS_ID(brickbakery_tile_1))
	// normal
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal_1), terrain_type != TILETYPE_SNOW)
	// snow
	CONDITIONAL_GROUND_SPRITE_OVERLAY(GROUNDSPRITE_SNOW, terrain_type == TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow_1), terrain_type == TILETYPE_SNOW)
SPRITELAYOUT_END

GROUND_AWARE_SPRITELAYOUT(THIS_ID(brickbakery_tile_2))
	// normal
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal_2), terrain_type != TILETYPE_SNOW)
	// snow
	CONDITIONAL_GROUND_SPRITE_OVERLAY(GROUNDSPRITE_SNOW, terrain_type == TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow_2), terrain_type == TILETYPE_SNOW)
SPRITELAYOUT_END

GROUND_AWARE_SPRITELAYOUT(THIS_ID(brickbakery_tile_3))
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal_3), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(GROUNDSPRITE_SNOW, terrain_type == TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow_3), terrain_type == TILETYPE_SNOW)
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_normal_3), 48, terrain_type != TILETYPE_SNOW)
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_snow_3), 48, terrain_type == TILETYPE_SNOW)
SPRITELAYOUT_END

GROUND_AWARE_SPRITELAYOUT(THIS_ID(brickbakery_tile_4))
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal_4), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(GROUNDSPRITE_SNOW, terrain_type == TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow_4), terrain_type == TILETYPE_SNOW)
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_normal_4), 48, terrain_type != TILETYPE_SNOW)
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_snow_4), 48, terrain_type == TILETYPE_SNOW)
SPRITELAYOUT_END

spritelayout THIS_ID(windmill_tile_anim) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_5_anim(2 * animation_frame + (terrain_type == TILETYPE_SNOW)));
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 24;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 1): THIS_ID(brickbakery_tile_4);
	relative_coord(1, 0): THIS_ID(brickbakery_tile_1);
	relative_coord(1, 1): THIS_ID(brickbakery_tile_2);
	THIS_ID(brickbakery_tile_3);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(0, 0): THIS_ID(brickbakery_tile_3);
	relative_coord(0, 1): THIS_ID(brickbakery_tile_4);
	relative_coord(1, 0): THIS_ID(brickbakery_tile_3);
	relative_coord(1, 1): THIS_ID(brickbakery_tile_4);
	relative_coord(2, 0): THIS_ID(brickbakery_tile_1);
	relative_coord(2, 1): THIS_ID(brickbakery_tile_2);
	THIS_ID(brickbakery_tile_3);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_3), relative_pos) {
	relative_coord(0, 0): THIS_ID(brickbakery_tile_3);
	relative_coord(0, 1): THIS_ID(brickbakery_tile_4);
	relative_coord(0, 2): THIS_ID(brickbakery_tile_3);
	relative_coord(0, 3): THIS_ID(brickbakery_tile_4);
	relative_coord(1, 0): THIS_ID(brickbakery_tile_1);
	relative_coord(1, 1): THIS_ID(brickbakery_tile_2);
	relative_coord(1, 2): THIS_ID(brickbakery_tile_1);
	relative_coord(1, 3): THIS_ID(brickbakery_tile_2);
	THIS_ID(brickbakery_tile_3);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_4), relative_pos) {
	relative_coord(0, 0): THIS_ID(windmill_tile_anim);
	THIS_ID(windmill_tile_anim);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(layout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_1);
	3: THIS_ID(layout_2);
	4: THIS_ID(layout_2);
	5: THIS_ID(layout_3);
	6: THIS_ID(layout_4);
	THIS_ID(brickbakery_tile_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile1_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile1_player_check, THIS_ID(tile1_nearby_industry))
TILE_DISALLOW_SLOPES      (tile1_location_check, CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_player_check))
GROUNDSPRITE_SWITCH(THIS_ID(ground_switch), THIS_ID(layout))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_GRAINMILL_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[GRAI, 8], [MNSP, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		animation_info:   [ANIMATION_LOOPING, 6];
		animation_speed:  3;
	}

	graphics {
		tile_check:   THIS_ID(tile1_location_check);
		THIS_ID(ground_switch);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_grain_mill_1 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
}

tilelayout tilelayout_grain_mill_2 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
}

tilelayout tilelayout_grain_mill_3 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
}

tilelayout tilelayout_grain_mill_4 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
}

tilelayout tilelayout_grain_mill_5 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	0, 2: THIS_ID(tile);
	0, 3: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	1, 3: THIS_ID(tile);
}

tilelayout tilelayout_grain_mill_6 {
	0, 0: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    1
#define THIS_PROD_RATIO_CARGO1    3
#define THIS_PROD_RATIO_CARGO2    5
#define THIS_PROD_RATIO_CARGO3    1
#define THIS_BOOST_12             3
#define THIS_BOOST_13             0
#define THIS_BOOST_21             5
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_GRAIN_MILL

CHECK_INCOMPATIBLE  (grain_mill,    56, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (brewery,       16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(grain_mill))
CHECK_INCOMPATIBLE  (arable_farm,   16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(brewery))
CHECK_TOWN_DISTANCE (town_distance,  0,144, THIS_ID(arable_farm))
CHECK_FOUNDER       (THIS_ID(town_distance))

/** After 1900, windmills only appear during map generation. */
switch (FEAT_INDUSTRIES, SELF, THIS_ID(brick_layouts_only_check_layout), var[0x86]) {
	5: return CB_RESULT_LOCATION_DISALLOW;
	THIS_ID(check_location);
}

switch (FEAT_INDUSTRIES, SELF, THIS_ID(brick_layouts_only), extra_callback_info2) {
	IND_CREATION_GENERATION: THIS_ID(check_location);
	THIS_ID(brick_layouts_only_check_layout);
}

/** Before 1870, only windmills appear. */
switch (FEAT_INDUSTRIES, SELF, THIS_ID(windmill_layout_only), var[0x86]) {
	5: THIS_ID(check_location);
	return CB_RESULT_LOCATION_DISALLOW;
}

/** Both types of layouts can appear between 1870 and 1900. */
switch (FEAT_INDUSTRIES, SELF, THIS_ID(check_date), current_year) {
	0..1870:    THIS_ID(windmill_layout_only);
	1870..1900: THIS_ID(check_location);
	THIS_ID(brick_layouts_only);
}

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_secondary.pnml"
#include "../templates/check_secondary_production_level.pnml"
#include "../templates/check_secondary_closure.pnml"

#include "../templates/extra_text_secondary.pnml"

#include "../templates/check_availability.pnml"

item(FEAT_INDUSTRIES, grain_mill, IND_GRAINMILL_ID) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_grain_mill_1,
				tilelayout_grain_mill_2,
				tilelayout_grain_mill_3,
				tilelayout_grain_mill_4,
				tilelayout_grain_mill_5,
				tilelayout_grain_mill_6
			];
		life_type:              IND_LIFE_TYPE_PROCESSING;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_GRAIN_MILL);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_GRAIN_MILL));
		prod_cargo_types: [FOOD];
		accept_cargo_types: [MNSP, GRAI];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 10;
		prob_in_game: 10;
		prospect_chance: 0.75;
		fund_cost_multiplier: 44;
		map_colour: 48;
		remove_cost_multiplier: 0;
		spec_flags:             0;
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_date);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
