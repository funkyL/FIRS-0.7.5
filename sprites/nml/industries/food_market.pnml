/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayout_templates.pnml"

#define THIS_ID(...) food_market ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground_normal)) { tmpl_ground_tile_filename(10, 10, "sprites/graphics/industries/foodmarket.png") }
spriteset(THIS_ID(spriteset_ground_snow))   { tmpl_ground_tile_filename(10, 10, "sprites/graphics/industries/foodmarket_snow.png") }

spriteset(THIS_ID(spriteset_building_normal)) {	tmpl_building_sprite_filename(10, 60, 36, -4, "sprites/graphics/industries/foodmarket.png") }
spriteset(THIS_ID(spriteset_building_snow)) { tmpl_building_sprite_filename(10, 60, 36, -4, "sprites/graphics/industries/foodmarket_snow.png") }

GROUND_AWARE_SPRITELAYOUT(THIS_ID(spritelayout_1))
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_normal),   terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(GROUNDSPRITE_SNOW, terrain_type == TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_snow), terrain_type == TILETYPE_SNOW)
	// Add two trees; care for snow on snowy terrain. Climate-selection done
	// in defines.pnml (to allow also to select a different sprite in the presence
	// of other tree NewGRFs
	building {
		sprite: nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW ? market_tree : MARKET_TREE_SNOW;
		xoffset: 11;
		yoffset: 1;
		xextent: 6;
		yextent: 6;
	}
	building {
		sprite: nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW ? market_tree : MARKET_TREE_SNOW;
		xoffset: 11;
		yoffset: 6;
		xextent: 6;
		yextent: 6;
	}
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_building_normal), 16, nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW)
	CONDITIONAL_BUILDING_SPRITE(THIS_ID(spriteset_building_snow), 16, nearby_tile_terrain_type(0, 0) == TILETYPE_SNOW)
SPRITELAYOUT_END



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

CHECK_ROAD_ADJACENT     (tile_road_adjacent_4, -1, 0, return CB_RESULT_LOCATION_DISALLOW)
CHECK_ROAD_ADJACENT     (tile_road_adjacent_3, 0, -1, THIS_ID(tile_road_adjacent_4))
CHECK_ROAD_ADJACENT     (tile_road_adjacent_2, 1, 0,  THIS_ID(tile_road_adjacent_3))
CHECK_ROAD_ADJACENT     (tile_road_adjacent_1, 0, 1, THIS_ID(tile_road_adjacent_2))
TILE_ALLOW_PLAYER       (terrain_check, THIS_ID(tile_road_adjacent_1))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_FOODMARKET_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[FOOD, 8], [FRVG, 8], [BEER, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		tile_check:  THIS_ID(terrain_check);
		THIS_ID(spritelayout_1);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_food_market_1 {
	0, 0: THIS_ID(tile);
}
/* *************************************************
 * Definition of the industry
 * *************************************************/

#include "../templates/check_availability.pnml"

CHECK_INCOMPATIBLE  (petrol_pump, 16, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (hotel, 16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(petrol_pump))
CHECK_INCOMPATIBLE  (food_market, 20, CB_RESULT_LOCATION_DISALLOW, THIS_ID(hotel))
CHECK_FOUNDER       (THIS_ID(food_market))

item(FEAT_INDUSTRIES, food_market, IND_FOODMARKET_ID) {
	property {
		substitute:             0;
		layouts: [
				tilelayout_food_market_1
			];
		name:                   string(STR_IND_FOOD_MARKET);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_FOOD_MARKET));
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;

		prod_cargo_types:       [];
		accept_cargo_types:     [FOOD, FRVG, BEER];

		prod_multiplier:        [0, 0];
		input_multiplier_1:     [0, 0];
		input_multiplier_2:     [0, 0];
		input_multiplier_3:     [0, 0];
		min_cargo_distr:        2;

		life_type:              IND_LIFE_TYPE_BLACK_HOLE;
		conflicting_ind_types:  [food_market];
		spec_flags:             bitmask(IND_FLAG_ONLY_IN_TOWNS);
		prob_random:            24;
		prob_in_game:           12;
		prospect_chance:        0.75;
		fund_cost_multiplier:   6;
		remove_cost_multiplier: 0;
		map_colour:             191;
	}
	graphics {
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
	}
}

#include "../templates/undefs.pnml"
