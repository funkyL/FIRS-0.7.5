/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayouts_groundaware.pnml"

#define THIS_ID(...) builders_yard ## __VA_ARGS__

spriteset(THIS_ID(spriteset_empty)) {
	[210,10,1,1,0,0, "sprites/graphics/industries/buildersyard.png"]
	[210,10,1,1,0,0, "sprites/graphics/industries/buildersyard.png"]
}

spriteset(THIS_ID(spriteset_ground_overlay_snow)) {
	tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
	tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

spriteset(THIS_ID(spriteset_ground_overlay_normal)) {
	tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
	tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
}

spriteset(THIS_ID(spriteset_1)) {
	tmpl_building_sprite_filename(10, 10, 51, -13, "sprites/graphics/industries/buildersyard.png")
	tmpl_building_sprite_filename(10, 10, 51, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

spriteset(THIS_ID(spriteset_2)) {
	tmpl_building_sprite_filename(80, 10, 51, -13, "sprites/graphics/industries/buildersyard.png")
	tmpl_building_sprite_filename(80, 10, 51, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

GROUND_AWARE_SPRITELAYOUT(THIS_ID(spritelayout_1))
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow),   terrain_type == TILETYPE_SNOW)
	NORMAL_SNOW_BUILDING(THIS_ID(spriteset_1), 16)
SPRITELAYOUT_END

GROUND_AWARE_SPRITELAYOUT(THIS_ID(spritelayout_2))
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_normal), terrain_type != TILETYPE_SNOW)
	CONDITIONAL_GROUND_SPRITE_OVERLAY(THIS_ID(spriteset_ground_overlay_snow),   terrain_type == TILETYPE_SNOW)
	NORMAL_SNOW_BUILDING(THIS_ID(spriteset_2), 16)
SPRITELAYOUT_END

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_1);
	relative_coord(0, 1): THIS_ID(spritelayout_2);
	THIS_ID(spritelayout_1);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_1);
	relative_coord(1, 0): THIS_ID(spritelayout_2);
	THIS_ID(spritelayout_1);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(layout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_2);
	THIS_ID(layout_1);
}

GROUNDSPRITE_SWITCH(THIS_ID(ground_switch), THIS_ID(layout))

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

CHECK_HOUSES_NEARBY     (tile_houses_15, -4, -4, return CB_RESULT_LOCATION_DISALLOW)
CHECK_HOUSES_NEARBY     (tile_houses_14, -4, 4, THIS_ID(tile_houses_15))
CHECK_HOUSES_NEARBY     (tile_houses_13, 4, -4, THIS_ID(tile_houses_14))
CHECK_HOUSES_NEARBY     (tile_houses_12, 4, 4, THIS_ID(tile_houses_13))
CHECK_HOUSES_NEARBY     (tile_houses_11, -3, -3, THIS_ID(tile_houses_12))
CHECK_HOUSES_NEARBY     (tile_houses_10, -3, 3, THIS_ID(tile_houses_11))
CHECK_HOUSES_NEARBY     (tile_houses_9, 3, -3, THIS_ID(tile_houses_10))
CHECK_HOUSES_NEARBY     (tile_houses_8, 3, 3, THIS_ID(tile_houses_9))
CHECK_HOUSES_NEARBY     (tile_houses_7, -2, 2, THIS_ID(tile_houses_8))
CHECK_HOUSES_NEARBY     (tile_houses_6, 2, -2, THIS_ID(tile_houses_7))
CHECK_HOUSES_NEARBY     (tile_houses_5, 2, 2,  THIS_ID(tile_houses_6))
CHECK_HOUSES_NEARBY     (tile_houses_4, -3, 0, THIS_ID(tile_houses_5))
CHECK_HOUSES_NEARBY     (tile_houses_3, 0, -3, THIS_ID(tile_houses_4))
CHECK_HOUSES_NEARBY     (tile_houses_2, 3, 0,  THIS_ID(tile_houses_3))
CHECK_HOUSES_NEARBY     (tile_houses_1, 0, 3, THIS_ID(tile_houses_2))
TILE_DISALLOW_NEARBY_CLASS(nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile_houses_1))
TILE_ALLOW_PLAYER         (terrain_check,                                                           THIS_ID(nearby_industry))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_BUILDERSYARD_1) {
	property {
		substitute: 0;
		accepted_cargos: [[BDMT, 8]];
		land_shape_flags: 0;
	}

	graphics {
		tile_check:  THIS_ID(terrain_check);
		THIS_ID(ground_switch);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_builders_yard_1 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
}

tilelayout tilelayout_builders_yard_2 {
	0, 0: THIS_ID(tile);
	1, 0: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

#include "../templates/check_availability.pnml"

CHECK_INCOMPATIBLE  (hardware_store, 16, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (builders_yard, 20, CB_RESULT_LOCATION_DISALLOW, THIS_ID(hardware_store))
CHECK_FOUNDER       (THIS_ID(builders_yard))

item(FEAT_INDUSTRIES, builders_yard, IND_BUILDERSYARD_ID) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_builders_yard_1,
				tilelayout_builders_yard_2
			];
		life_type:              IND_LIFE_TYPE_BLACK_HOLE;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_BUILDERS_YARD);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_BUILDERS_YARD));
		prod_cargo_types: [];
		accept_cargo_types: [BDMT];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 0;
		conflicting_ind_types:  [builders_yard];
		prob_random: 18;
		prob_in_game: 12;
		prospect_chance: 0.75;
		fund_cost_multiplier: 8;
		map_colour: 15;
		remove_cost_multiplier: 0;
	}
	graphics {
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
	}
}

#include "../templates/undefs.pnml"
