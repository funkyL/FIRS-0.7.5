/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayout_templates.pnml"

#define THIS_ID(...) junk_yard ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground), "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(10, 10) }

spriteset(THIS_ID(spriteset_1), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(10, 10, 55, -24) }
spriteset(THIS_ID(spriteset_2), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(80, 10, 55, -24) }
spriteset(THIS_ID(spriteset_3), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(150, 10, 55, -24) }
spriteset(THIS_ID(spriteset_4), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(220, 10, 55, -24) }
spriteset(THIS_ID(spriteset_5), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(290, 10, 55, -24) }
spriteset(THIS_ID(spriteset_6), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(360, 10, 55, -24) }
spriteset(THIS_ID(spriteset_7), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(430, 10, 55, -24) }
spriteset(THIS_ID(spriteset_8), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(500, 10, 55, -24) }
spriteset(THIS_ID(spriteset_9), "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(570, 10, 55, -24) }

spritelayout THIS_ID(spritelayout_1) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_2) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_3) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_4) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_5) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_6) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_6);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_7) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_7);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_8) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

spritelayout THIS_ID(spritelayout_9) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: THIS_ID(spriteset_9);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zextent: 32;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 2): THIS_ID(spritelayout_2);
	relative_coord(1, 1): THIS_ID(spritelayout_2);
	relative_coord(2, 1): THIS_ID(spritelayout_1);
	relative_coord(2, 2): THIS_ID(spritelayout_8);
	relative_coord(3, 1): THIS_ID(spritelayout_4);
	relative_coord(3, 2): THIS_ID(spritelayout_7);
	relative_coord(4, 0): THIS_ID(spritelayout_5);
	relative_coord(4, 1): THIS_ID(spritelayout_3);
	relative_coord(4, 2): THIS_ID(spritelayout_6);
	THIS_ID(spritelayout_9);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(0, 1): THIS_ID(spritelayout_7);
	relative_coord(1, 1): THIS_ID(spritelayout_1);
	relative_coord(1, 2): THIS_ID(spritelayout_8);
	relative_coord(2, 0): THIS_ID(spritelayout_5);
	relative_coord(2, 1): THIS_ID(spritelayout_3);
	relative_coord(2, 2): THIS_ID(spritelayout_6);
	THIS_ID(spritelayout_9);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_3), relative_pos) {
	relative_coord(0, 3): THIS_ID(spritelayout_2);
	relative_coord(1, 1): THIS_ID(spritelayout_2);
	relative_coord(1, 3): THIS_ID(spritelayout_9);
	relative_coord(2, 1): THIS_ID(spritelayout_1);
	relative_coord(2, 3): THIS_ID(spritelayout_8);
	relative_coord(3, 1): THIS_ID(spritelayout_4);
	relative_coord(3, 3): THIS_ID(spritelayout_7);
	relative_coord(4, 0): THIS_ID(spritelayout_5);
	relative_coord(4, 1): THIS_ID(spritelayout_3);
	relative_coord(4, 3): THIS_ID(spritelayout_6);
	THIS_ID(spritelayout_9);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(tile_spritelayout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_2);
	3: THIS_ID(layout_3);
	THIS_ID(spritelayout_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_DISALLOW_STEEP_SLOPE (tile_slope_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile_nearby_industry))
TILE_ALLOW_PLAYER         (tile_location_check,                                                            THIS_ID(tile_slope_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_JUNKYARD_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[ENSP, 8]];
		land_shape_flags: 0;
	}
	graphics {
		tile_check:   THIS_ID(tile_location_check);
		THIS_ID(tile_spritelayout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_junkyard_1 {
	0, 2: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	2, 1: THIS_ID(tile);
	2, 2: THIS_ID(tile);
	3, 1: THIS_ID(tile);
	3, 2: THIS_ID(tile);
	4, 0: THIS_ID(tile);
	4, 1: THIS_ID(tile);
	4, 2: THIS_ID(tile);
}

tilelayout tilelayout_junkyard_2 {
	0, 1: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
	2, 2: THIS_ID(tile);
}

tilelayout tilelayout_junkyard_3 {
	0, 3: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 3: THIS_ID(tile);
	2, 1: THIS_ID(tile);
	2, 3: THIS_ID(tile);
	3, 1: THIS_ID(tile);
	3, 3: THIS_ID(tile);
	4, 0: THIS_ID(tile);
	4, 1: THIS_ID(tile);
	4, 3: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

#define THIS_STR_EXTRA_SUPPLIES STR_EXTRA_ENGINEERING_SUPPLIES
/* availability years - also update available from strings if changing these */


SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_primary.pnml"
#include "../templates/check_primary_production_level.pnml"

#include "../templates/extra_text_primary.pnml"

#include "../templates/check_availability.pnml"

item(FEAT_INDUSTRIES, junkyard, IND_JUNKYARD_ID) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_junkyard_1,
				tilelayout_junkyard_2,
				tilelayout_junkyard_3
			];
		life_type:              IND_LIFE_TYPE_EXTRACTIVE;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_JUNKYARD);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_JUNKYARD));
		prod_cargo_types: [SCMT];
		accept_cargo_types: [ENSP];
		prod_multiplier: [4, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 7;
		prob_in_game: 3;
		prospect_chance: 0.75;
		fund_cost_multiplier: 101;
		map_colour: 36;
		remove_cost_multiplier: 0;
		spec_flags:             0;
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		build_prod_change:       4;
		extra_text_industry:     THIS_ID(extra_text);
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_JUNKYARD));
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
