/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) fishing_harbour ## __VA_ARGS__

spriteset(THIS_ID(spriteset_1), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(10, 10, 39, -8) }

spriteset(THIS_ID(spriteset_2), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(10, 60, 39, -7) }

spriteset(THIS_ID(spriteset_3), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 60, 39, -7) }

spriteset(THIS_ID(spriteset_4), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(150, 60, 39, -7) }

spriteset(THIS_ID(spriteset_5), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(220, 60, 39, -7) }

spriteset(THIS_ID(spriteset_6), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(290, 60, 39, -7) }

spriteset(THIS_ID(spriteset_7), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(360, 60, 39, -7) }

spriteset(THIS_ID(spriteset_8), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 10, 39, 0) }

spriteset(THIS_ID(spriteset_9), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(150, 10, 39, 0) }

spriteset(THIS_ID(spriteset_10), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(220, 10, 39, 0) }

spriteset(THIS_ID(spriteset_11)) { 	[10, 110, 64, 39, -35, -15, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(THIS_ID(spriteset_12), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 110, 39, -14) }

spriteset(THIS_ID(spriteset_13)) { 	[150, 110, 64, 39, -37, -8, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(THIS_ID(spriteset_14)) { 	[220, 110, 64, 39, -27, -12, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(THIS_ID(spriteset_15)) { 	[290, 110, 64, 39, -15, -11, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(THIS_ID(spriteset_16)) { 	[360, 110, 64, 39, -45, -15, "sprites/graphics/industries/fishingharbour.png"] }
// ramp part 1
spriteset(THIS_ID(spriteset_17), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(440, 110, 74, -26) }
// ramp part 2
spriteset(THIS_ID(spriteset_18)) { 	[510, 110, 64, 74, -31, -42, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(THIS_ID(spriteset_19), "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(360, 10, 39, 0) }


spritelayout THIS_ID(spritelayout_1) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_2) {
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_3) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_4) {
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_5) {
	building {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_6) {
	building {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_7) {
	building {
		sprite: THIS_ID(spriteset_6);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_8) {
	building {
		sprite: THIS_ID(spriteset_6);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_7);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_9) {
	building {
		sprite: THIS_ID(spriteset_7);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_19);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_10) {
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
}

spritelayout THIS_ID(spritelayout_11) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_12) {
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_13) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_14) {
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_15) {
	building {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_4);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_16) {
	building {
		sprite: THIS_ID(spriteset_5);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_17) {
	building {
		sprite: THIS_ID(spriteset_6);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_18) {
	building {
		sprite: THIS_ID(spriteset_6);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_7);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_19) {
	building {
		sprite: THIS_ID(spriteset_7);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_20) {
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_8);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		zoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_21) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_11);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_22) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_12);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_23) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_13);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_24) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_14);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_25) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_14);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
	childsprite {
		sprite: THIS_ID(spriteset_14);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xoffset: 12;
		yoffset: 18;
	}
}

spritelayout THIS_ID(spritelayout_26) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_15);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_27) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_16);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout THIS_ID(spritelayout_28) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_9);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		yoffset: 4;
		zoffset: 27;
		yextent: 12;
	}
}

spritelayout THIS_ID(spritelayout_29) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_10);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xoffset: 4;
		zoffset: 27;
		xextent: 12;
	}
}

spritelayout THIS_ID(spritelayout_30) {
	building {
		sprite: THIS_ID(spriteset_2);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
		zextent: 7;
	}
	building {
		sprite: THIS_ID(spriteset_1);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
	building {
		sprite: THIS_ID(spriteset_9);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xoffset: 5;
		zoffset: 40;
		xextent: 11;
	}
}

spritelayout THIS_ID(spritelayout_31) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_17);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
}

spritelayout THIS_ID(spritelayout_32) {
	ground {
		sprite: GROUNDSPRITE_WATER;
	}
	building {
		sprite: THIS_ID(spriteset_18);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		always_draw: 1;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4163, var[0x60, 0, 31, 0]) {
	0: THIS_ID(spritelayout_10);
	1: THIS_ID(spritelayout_4);
	2: THIS_ID(spritelayout_8);
	3: THIS_ID(spritelayout_9);
	4: THIS_ID(spritelayout_6);
	5: THIS_ID(spritelayout_5);
	6: THIS_ID(spritelayout_7);
	7: THIS_ID(spritelayout_10);
	8: THIS_ID(spritelayout_3);
	9: THIS_ID(spritelayout_4);
	10: THIS_ID(spritelayout_8);
	11: THIS_ID(spritelayout_9);
	12: THIS_ID(spritelayout_6);
	13: THIS_ID(spritelayout_5);
	14: THIS_ID(spritelayout_7);
	THIS_ID(spritelayout_10);
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4164, var[0x60, 0, 31, 0]) {
	0: THIS_ID(spritelayout_20);
	1: THIS_ID(spritelayout_14);
	2: THIS_ID(spritelayout_18);
	3: THIS_ID(spritelayout_19);
	4: THIS_ID(spritelayout_16);
	5: THIS_ID(spritelayout_15);
	6: THIS_ID(spritelayout_17);
	7: THIS_ID(spritelayout_20);
	8: THIS_ID(spritelayout_13);
	9: THIS_ID(spritelayout_14);
	10: THIS_ID(spritelayout_18);
	11: THIS_ID(spritelayout_19);
	12: THIS_ID(spritelayout_16);
	13: THIS_ID(spritelayout_15);
	14: THIS_ID(spritelayout_17);
	THIS_ID(spritelayout_20);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 3): THIS_ID(spritelayout_27);
	relative_coord(0, 4): action2_4163;
	relative_coord(1, 1): THIS_ID(spritelayout_11);
	relative_coord(1, 2): THIS_ID(spritelayout_29);
	relative_coord(1, 3): THIS_ID(spritelayout_11);
	relative_coord(1, 4): action2_4164;
	relative_coord(2, 1): THIS_ID(spritelayout_24);
	relative_coord(2, 2): THIS_ID(spritelayout_24);
	THIS_ID(spritelayout_2);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(1, 0): THIS_ID(spritelayout_23);
	relative_coord(1, 1): THIS_ID(spritelayout_23);
	relative_coord(2, 0): THIS_ID(spritelayout_30);
	relative_coord(2, 1): THIS_ID(spritelayout_12);
	relative_coord(2, 2): THIS_ID(spritelayout_21);
	relative_coord(3, 1): action2_4164;
	relative_coord(3, 2): action2_4163;
	THIS_ID(spritelayout_2);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_3), relative_pos) {
	relative_coord(0, 0): action2_4164;
	relative_coord(0, 1): action2_4164;
	relative_coord(0, 2): action2_4164;
	relative_coord(1, 0): THIS_ID(spritelayout_24);
	relative_coord(1, 2): THIS_ID(spritelayout_2);
	relative_coord(2, 1): THIS_ID(spritelayout_26);
	relative_coord(2, 2): THIS_ID(spritelayout_28);
	relative_coord(2, 3): THIS_ID(spritelayout_22);
	THIS_ID(spritelayout_1);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_4), relative_pos) {
	relative_coord(0, 0): action2_4164;
	relative_coord(0, 1): THIS_ID(spritelayout_11);
	relative_coord(0, 2): THIS_ID(spritelayout_1);
	relative_coord(0, 3): THIS_ID(spritelayout_1);
	relative_coord(0, 4): THIS_ID(spritelayout_28);
	relative_coord(1, 0): action2_4163;
	relative_coord(1, 1): THIS_ID(spritelayout_31);
	relative_coord(1, 2): THIS_ID(spritelayout_32);
	relative_coord(1, 4): THIS_ID(spritelayout_25);
	THIS_ID(spritelayout_1);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_5), relative_pos) {
	relative_coord(0, 0): action2_4163;
	relative_coord(1, 0): THIS_ID(spritelayout_3);
	relative_coord(2, 0): THIS_ID(spritelayout_3);
	relative_coord(2, 1): THIS_ID(spritelayout_31);
	relative_coord(2, 2): THIS_ID(spritelayout_32);
	relative_coord(3, 0): THIS_ID(spritelayout_30);
	relative_coord(3, 1): THIS_ID(spritelayout_13);
	relative_coord(3, 2): THIS_ID(spritelayout_13);
	relative_coord(4, 0): THIS_ID(spritelayout_24);
	relative_coord(4, 1): THIS_ID(spritelayout_24);
	relative_coord(4, 2): THIS_ID(spritelayout_24);
	THIS_ID(spritelayout_1);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(layout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_2);
	3: THIS_ID(layout_3);
	4: THIS_ID(layout_4);
	5: THIS_ID(layout_5);
	THIS_ID(spritelayout_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, THIS_ID(tile_1), TILE_FISHINGHARBOUR_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[MNSP, 8], [FISH, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}

	graphics {
		THIS_ID(layout);
	}
}

/* It must not be a flat tile */
TILE_CHECK_FLAT      (tile2_flat_check, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)

/* We allow on sea shores and on normal slopes - but not rivers and canals */
TILE_CHECK_WATERCLASS(tile2_land_check,     WATER_CLASS_NONE, THIS_ID(tile2_flat_check), return CB_RESULT_LOCATION_DISALLOW)
TILE_CHECK_WATERCLASS(tile2_location_check, WATER_CLASS_SEA,  THIS_ID(tile2_flat_check), THIS_ID(tile2_land_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile_2), TILE_FISHINGHARBOUR_2) {
	property {
		substitute:       0;
		accepted_cargos:  [[MNSP, 8], [FISH, 8]];
		land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
	}

	graphics {
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check:  THIS_ID(tile2_location_check);
		THIS_ID(layout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_fishing_harbour_1 {
	0, 3: THIS_ID(tile_1);
	0, 4: THIS_ID(tile_2);
	1, 0: 255;
	1, 1: THIS_ID(tile_1);
	1, 2: THIS_ID(tile_1);
	1, 3: THIS_ID(tile_1);
	1, 4: THIS_ID(tile_2);
	2, 1: THIS_ID(tile_1);
	2, 2: THIS_ID(tile_1);
}

tilelayout tilelayout_fishing_harbour_2 {
	1, 255: 255;
	2, 255: 255;
	0, 0: 255;
	0, 1: 255;
	0, 2: 255;
	1, 0: THIS_ID(tile_1);
	1, 1: THIS_ID(tile_1);
	2, 0: THIS_ID(tile_1);
	2, 1: THIS_ID(tile_1);
	2, 2: THIS_ID(tile_1);
	3, 1: THIS_ID(tile_2);
	3, 2: THIS_ID(tile_2);
}

tilelayout tilelayout_fishing_harbour_3 {
	0, 0: THIS_ID(tile_2);
	0, 1: THIS_ID(tile_2);
	0, 2: THIS_ID(tile_2);
	1, 0: THIS_ID(tile_1);
	1, 2: THIS_ID(tile_1);
	2, 1: THIS_ID(tile_1);
	2, 2: THIS_ID(tile_1);
	2, 3: THIS_ID(tile_1);
	2, 4: 255;
	3, 2: 255;
	3, 3: 255;
}

tilelayout tilelayout_fishing_harbour_4 {
	0, 0: THIS_ID(tile_2);
	0, 1: THIS_ID(tile_1);
	0, 2: THIS_ID(tile_1);
	0, 3: THIS_ID(tile_1);
	0, 4: THIS_ID(tile_1);
	0, 5: 255;
	1, 0: THIS_ID(tile_2);
	1, 1: THIS_ID(tile_1);
	1, 2: THIS_ID(tile_1);
	1, 4: THIS_ID(tile_1);
	1, 5: 255;
	2, 3: 255;
	2, 4: 255;
	2, 5: 255;
}

tilelayout tilelayout_fishing_harbour_5 {
	0, 0: THIS_ID(tile_2);
	1, 0: THIS_ID(tile_1);
	1, 2: 255;
	2, 0: THIS_ID(tile_1);
	2, 1: THIS_ID(tile_1);
	2, 2: THIS_ID(tile_1);
	2, 3: 255;
	3, 0: THIS_ID(tile_1);
	3, 1: THIS_ID(tile_1);
	3, 2: THIS_ID(tile_1);
	3, 3: 255;
	4, 255: 255;
	4, 0: THIS_ID(tile_1);
	4, 1: THIS_ID(tile_1);
	4, 2: THIS_ID(tile_1);
	4, 3: 255;
	5, 255: 255;
	5, 0: 255;
	5, 1: 255;
	5, 2: 255;
	5, 3: 255;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    1
#define THIS_PROD_RATIO_CARGO1    3
#define THIS_PROD_RATIO_CARGO2    5
#define THIS_PROD_RATIO_CARGO3    0
#define THIS_BOOST_12             3
#define THIS_BOOST_13             0
#define THIS_BOOST_21             5
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_FISHING_HARBOUR
#define THIS_STR_DEBUG_TEXT       STR_EXTRA_TEXT_DEBUG_SECONDARY


CHECK_NEARBY_CLUSTER(fishing_grounds, 16, 60, 5, 4, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_FOUNDER       (THIS_ID(fishing_grounds))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_secondary.pnml"
#include "../templates/check_secondary_production_level.pnml"
#include "../templates/check_secondary_closure.pnml"

#include "../templates/extra_text_secondary.pnml"

#include "../templates/check_availability.pnml"

item(FEAT_INDUSTRIES, fishing_harbour, IND_FISHINGHARBOUR_ID) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_fishing_harbour_1,
				tilelayout_fishing_harbour_2,
				tilelayout_fishing_harbour_3,
				tilelayout_fishing_harbour_4,
				tilelayout_fishing_harbour_5
			];
		life_type:              IND_LIFE_TYPE_PROCESSING;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_FISHING_HARBOUR);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_FISHING_HARBOUR));
		prod_cargo_types: [FOOD];
		accept_cargo_types: [MNSP, FISH];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 14;
		prob_in_game: 8;
		prospect_chance: 0.75;
		fund_cost_multiplier: 150;
		map_colour: 15;
		remove_cost_multiplier: 0;
		spec_flags:             bitmask(IND_FLAG_BUILT_ON_WATER,
		                                IND_FLAG_BUILT_NEAR_TOWN
									);
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
