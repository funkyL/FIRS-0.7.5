/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) recycling_plant ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground), "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) }

spriteset(THIS_ID(spriteset_1), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(10, 10, 76, -45) }
spriteset(THIS_ID(spriteset_2), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(80, 10, 76, -45) }
spriteset(THIS_ID(spriteset_3), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(150, 10, 63, -32) }
spriteset(THIS_ID(spriteset_4), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(220, 10, 63, -32) }
spriteset(THIS_ID(spriteset_5), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(290, 10, 63, -32) }
spriteset(THIS_ID(spriteset_6), "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(360, 10, 63, -32) }

//large building LH section
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_1), THIS_ID(spriteset_ground), THIS_ID(spriteset_1), 48)
//large building RH section
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_2), THIS_ID(spriteset_ground), THIS_ID(spriteset_2), 48)
//conveyor + crusher
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_3), THIS_ID(spriteset_ground), THIS_ID(spriteset_3), 48)
//fenced area
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_4), THIS_ID(spriteset_ground), THIS_ID(spriteset_4), 48)
//small office
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_5), THIS_ID(spriteset_ground), THIS_ID(spriteset_5), 48)
//material handler
SPRITELAYOUT_FENCES_NORMAL(THIS_ID(spritelayout_6), THIS_ID(spriteset_ground), THIS_ID(spriteset_6), 48)

spritelayout THIS_ID(spritelayout_0) {
	ground {
		sprite: THIS_ID(spriteset_ground);
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_2);
	relative_coord(0, 1): THIS_ID(spritelayout_3);
	relative_coord(1, 0): THIS_ID(spritelayout_1);
	relative_coord(1, 1): THIS_ID(spritelayout_4);
	relative_coord(2, 0): THIS_ID(spritelayout_5);
	relative_coord(2, 1): THIS_ID(spritelayout_6);
	THIS_ID(spritelayout_0);
}

FENCES_EXCLUDE_BY_CLASS     ( THIS_ID(tile_fence_station),  THIS_ID(layout),              TILE_CLASS_STATION)
FENCES_EXCLUDE_SAME_INDUSTRY( THIS_ID(tile_fence_industry), THIS_ID(tile_fence_station))
ADD_FLAT_FENCES             ( THIS_ID(tile_fences),         THIS_ID(tile_fence_industry), 1, 1, 1, 1)

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile_player_check,                                                      THIS_ID(tile_nearby_industry))
TILE_DISALLOW_SLOPES      (tile_location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile_player_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_RECYCLINGPLANT_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[RCYC, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		tile_check: THIS_ID(tile_location_check);
		THIS_ID(tile_fences);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_recycling_plant_1 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    2
#define THIS_PROD_RATIO_CARGO1    6
#define THIS_PROD_RATIO_CARGO2    0
#define THIS_PROD_RATIO_CARGO3    0
#define THIS_BOOST_12             0
#define THIS_BOOST_13             0
#define THIS_BOOST_21             0
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_RECYCLING_PLANT
#define THIS_STR_DEBUG_TEXT       STR_EXTRA_TEXT_DEBUG_SECONDARY


CHECK_INCOMPATIBLE  (recycling_plant, 56, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (recycling_depot, 16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(recycling_plant))
CHECK_FOUNDER       (THIS_ID(recycling_depot))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_secondary.pnml"
#include "../templates/check_secondary_production_level.pnml"
#include "../templates/check_secondary_closure.pnml"

#include "../templates/extra_text_secondary.pnml"

#include "../templates/check_availability.pnml"

/* Decide randomly on cargo output:
 * First cargo is always MNSP, 2nd is randomly a choice of 4,
 * 3rd cargo is not allowed nor defined */
random_switch (FEAT_INDUSTRIES, SELF, THIS_ID(random_output_cargo)) {
	1: return SCMT;   // scrap metal
	1: return RFPR;   // chemicals
	1: return BDMT;   // building materials
	1: return FMSP;   // farm supplies
}
switch(FEAT_INDUSTRIES, SELF, THIS_ID(cargo_output), (extra_callback_info1 & 255)) {
	0: return MNSP;                   // first output cargo
	1: THIS_ID(random_output_cargo);  // 2nd output cargo: randomly
	return 0xFF;                      // terminate callback
}

item(FEAT_INDUSTRIES, recycling_plant, IND_RECYCLINGPLANT_ID) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_recycling_plant_1
			];
		life_type:              IND_LIFE_TYPE_PROCESSING;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_FARM;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_RECYCLING_PLANT);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_RECYCLING_PLANT));
		prod_cargo_types:      [SCMT, MNSP];
		accept_cargo_types:    [RCYC];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 7;
		prob_in_game: 7;
		prospect_chance: 0.75;
		fund_cost_multiplier: 118;
		map_colour: 164;
		remove_cost_multiplier: 0;
		spec_flags:             0;
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		cargo_output:            THIS_ID(cargo_output);
		construction_probability:THIS_ID(check_availability);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_RECYCLING_PLANT));
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
