/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayout_templates.pnml"

#define THIS_ID(...) smithy_forge ## __VA_ARGS__

spriteset(THIS_ID(spriteset_1)) {
	tmpl_building_sprite_filename(10, 10, 80, -49, "sprites/graphics/industries/forge.png")
	tmpl_building_sprite_filename(10, 10, 80, -49, "sprites/graphics/industries/forge_snow.png")
}

spriteset(THIS_ID(spriteset_2)) {
	tmpl_building_sprite_filename(80, 10, 80, -49, "sprites/graphics/industries/forge.png")
	tmpl_building_sprite_filename(80, 10, 80, -49, "sprites/graphics/industries/forge_snow.png")
}

spriteset(THIS_ID(spriteset_3)) {
	tmpl_building_sprite_filename(150, 10, 60, -29, "sprites/graphics/industries/forge.png")
	tmpl_building_sprite_filename(150, 10, 60, -29, "sprites/graphics/industries/forge_snow.png")
}

SPRITELAYOUT_NORMAL_SNOW_BEGIN(THIS_ID(spritelayout_1), 2022, 2022, THIS_ID(spriteset_1), 48)
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: terrain_type != TILETYPE_SNOW;
	}
SPRITELAYOUT_END

SPRITELAYOUT_NORMAL_SNOW_BEGIN(THIS_ID(spritelayout_2), 2022, 2022, THIS_ID(spriteset_2), 48)
	building {
		sprite: THIS_ID(spriteset_3);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: terrain_type != TILETYPE_SNOW;
	}
SPRITELAYOUT_END


switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_2);
	THIS_ID(spritelayout_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile_player_check,                                                            THIS_ID(tile_nearby_industry))
TILE_DISALLOW_SLOPES      (tile_location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile_player_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_FORGE_1) {
	property {
		substitute: 0;
		accepted_cargos: [[STEL, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}

	graphics {
		tile_check:   THIS_ID(tile_location_check);
		THIS_ID(layout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_smithy_forge_1 {
	0, 0: THIS_ID(tile);
	1, 0: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    2
#define THIS_PROD_RATIO_CARGO1    5
#define THIS_PROD_RATIO_CARGO2    0
#define THIS_PROD_RATIO_CARGO3    0
#define THIS_BOOST_12             0
#define THIS_BOOST_13             0
#define THIS_BOOST_21             0
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_SMITHY_FORGE
#define THIS_STR_DEBUG_TEXT       STR_EXTRA_TEXT_DEBUG_SECONDARY
/* availability years - also update available from strings if changing these */



CHECK_INCOMPATIBLE  (smithy_forge,  56, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_FOUNDER       (THIS_ID(smithy_forge))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../templates/produce_secondary.pnml"
#include "../templates/check_secondary_production_level.pnml"
#include "../templates/check_secondary_closure.pnml"

#include "../templates/extra_text_secondary.pnml"

#include "../templates/check_availability.pnml"

item(FEAT_INDUSTRIES, smithy_forge, IND_SMITHYFORGE_ID) {
	property {
		substitute:             0;
		layouts: [
				tilelayout_smithy_forge_1
			];
		life_type:              IND_LIFE_TYPE_PROCESSING;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_SMITHY_FORGE);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_SMITHY_FORGE));
		prod_cargo_types: [ENSP, FMSP];
		accept_cargo_types: [STEL];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 5;
		prob_in_game: 2;
		prospect_chance: 0.75;
		fund_cost_multiplier: 63;
		map_colour: 133;
		remove_cost_multiplier: 0;
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		extra_text_fund:         return string(STR_FUND_AVAILABLE_UNTIL, string(STR_FUND_AVAILABLE_UNTIL_DATE_SMITHY_FORGE));
		colour:                  THIS_ID(colour);
	}
}

#include "../templates/undefs.pnml"
