# 1 "<stdin>"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
/* Copyright (C) 1991-2014 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */




/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */

/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
# 52 "/usr/include/stdc-predef.h" 3 4
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */


/* We do not support C11 <threads.h>.  */
# 1 "<command-line>" 2
# 1 "<stdin>"
# 1 "sprites/nml/header.pnml" 1
grf {
 grfid: "\F9%\00\05";
 name: string(STR_GRF_NAME);
 desc: string(STR_GRF_DESC);
 url: string(STR_GRF_URL);
 version: 2815;
 min_compatible_version: 2734;
 param 0 {
  economy {
   name: string(STR_PARAM_NAME_ECONOMIES);
   desc: string(STR_PARAM_DESC_ECONOMIES);
   min_value: 0;
   max_value: 0;
   names: {
    0: string(STR_PARAM_VALUE_ECONOMIES_TEST_ECONOMY);
   };
  }
 }
 param 1 {
  allow_primary_production_decrease {
   name: string(STR_PARAM_NAME_PRIMARY_PRODUCTION_DECREASE);
   desc: string(STR_PARAM_DESC_PRIMARY_PRODUCTION_DECREASE);
   type: bool;
  }
 }
 param 2 {
  allow_close_primary {
   name: string(STR_PARAM_NAME_NEVER_CLOSE);
   desc: string(STR_PARAM_DESC_NEVER_CLOSE);
   type: bool;
   bit: 0;
  }
  allow_close_secondary {
   name: string(STR_PARAM_NAME_SECONDARY_NEVER_CLOSE);
   desc: string(STR_PARAM_DESC_SECONDARY_NEVER_CLOSE);
   type: bool;
   bit: 1;
  }
  restrict_open_during_gameplay {
   name: string(STR_PARAM_NAME_NO_OPENINGS);
   desc: string(STR_PARAM_DESC_NO_OPENINGS);
   type: bool;
   bit: 2;
  }
 }
 param 4 {
  marine_industry_max_coastal_distance {
   name: string(STR_PARAM_NAME_COAST_DISTANCE_MARINE_INDUSTRY);
   desc: string(STR_PARAM_DESC_COAST_DISTANCE_MARINE_INDUSTRY);
   type: int;
   def_value: 0;
   min_value: 0;
   max_value: 255;
   names: {
    0: string(STR_PARAM_VALUE_SECONDARY_NEVER_CLOSE_0);
   };
  }
 }
 param 3 {
  show_debug_texts {
   name: string(STR_PARAM_NAME_DEBUG);
   desc: string(STR_PARAM_DESC_DEBUG);
   type: bool;
  }
 }
 param 5 {
  station_rating_algorithm {
   name: string(STR_PARAM_NAME_STAT_RATING);
   desc: string(STR_PARAM_DESC_STAT_RATING);
   def_value: 0;
   min_value: 0;
   max_value: 2;
   names: {
    0: string(STR_PARAM_VALUE_STAT_RATING_DEFAULT);
    1: string(STR_PARAM_VALUE_STAT_RATING_REDUCED_TIME);
    2: string(STR_PARAM_VALUE_STAT_RATING_100);
   };
  }
 }
}

basecost {
 PR_BUILD_INDUSTRY: 4; // Industries are more expensive
 PR_BUILD_INDUSTRY_RAW : 4; // Building primary industries is also expensive
 PR_CLEAR_INDUSTRY : 4; // Deleting industries must also be expensive
}
# 2 "<stdin>" 2

# 1 "sprites/nml/parameters.pnml" 1
// parameters also referenced by action 14 stuff - likely to be found in header.pnml, unless it got moved

// map_size is total number of tiles on the map
// compute relative size of the map, compared to 256*256
relative_map_size = map_size / (256 * 256);
// number of industry closures is proportional to map size
industry_clusters = (relative_map_size / 2) + 1;


param_max_coastal_distance = marine_industry_max_coastal_distance;
if (marine_industry_max_coastal_distance == 0) {
 param_max_coastal_distance = 255;
}
# 4 "<stdin>" 2

# 1 "sprites/nml/defines.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */
# 16 "sprites/nml/defines.pnml"
market_tree = 1639;
if (climate == CLIMATE_ARCTIC) { market_tree = 1737; }
if (climate == CLIMATE_TROPICAL) { market_tree = 1891; }





// used for secondary industry production


/* **************************************************************************
 * persistent storage for primary industries (template produce_primary)
 * **************************************************************************/


//                                  1 // unused
//                                  2 // unused
//                                  3 // unused
//                                  4 // unused
//                                  5 // unused
//                                  6 // unused
//                                  7 // unused
//                                  8 // unused
//                                  9 // unused



//                                 11 // unused
//                                 12 // unused
//                                 13 // unused
//                                 14 // unused



/* **************************************************************************
 * persistent storage for secondary industries (template produce_secondary)
 * **************************************************************************/
//                                  0 // unused
# 73 "sprites/nml/defines.pnml"
//                                 14 // unused
//#define var_closure_counter      15 // months without delivery, same as primary industries


/* **************************************************************************
 * persistent storage for blackhole industries (template produce_blackhole)
 * **************************************************************************/
//                                  0 // unused
//                                  1 // unused
//                                  2 // unused
//                                  3 // unused
//                                  4 // unused
//                                  5 // unused
//                                  6 // unused
//                                  7 // unused
//                                  8 // unused
//                                  9 // unused

// #define var_date_received_1     10 // date of last cargo 1 delivered, same as secondary industries
// #define var_date_received_2     11 // date of last cargo 2 delivered, same as secondary industries
// #define var_date_received_3     12 // date of last cargo 3 delivered, same as secondary industries

//                                 13 // unused
//                                 14 // unused

// #define var_closure_counter     15 // months without delivery, same as primary industries


/* **************************************************************************
 * temporary storage for sprite layout templates
 * **************************************************************************/
# 120 "sprites/nml/defines.pnml"
/* **************************************************************************
 * industry IDs
 * **************************************************************************/

// Definition of the IDs of the single industries




//#define IND_VACANT_ID                0x03
# 165 "sprites/nml/defines.pnml"
//#define IND_VACANT_ID                0x27







//#define IND_VACANT_ID                0x2F
//#define IND_VACANT_ID                0x30
//#define IND_VACANT_ID                0x31
//#define IND_VACANT_ID                0x32
//#define IND_VACANT_ID                0x33
//#define IND_VACANT_ID                0x34
//#define IND_VACANT_ID                0x35
//#define IND_VACANT_ID                0x36
//#define IND_VACANT_ID                0x37
//#define IND_VACANT_ID                0x38




//#define IND_VACANT_ID           0x3D
//#define IND_VACANT_ID          0x3E


//3F is last ID to be used (64 industry limit)

//Definition of industry tile IDs
// tiles 0-159 currently vacant







//#define TILE_VACANT                        167
//#define TILE_VACANT                        168
//#define TILE_VACANT                        169
//#define TILE_VACANT                        170
//#define TILE_VACANT                        171
//#define TILE_VACANT                        172
//#define TILE_VACANT                        173
//#define TILE_VACANT                        174
//#define TILE_VACANT                        175
# 247 "sprites/nml/defines.pnml"
//#define TILE_VACANT                        212
//#define TILE_VACANT                        213





//#define TILE_VACANT                        219
//#define TILE_VACANT                        220
//#define TILE_VACANT                        221
//#define TILE_VACANT                        222
//#define TILE_VACANT                        223
# 6 "<stdin>" 2
# 1 "sprites/nml/checks.pnml" 1
//TODO: add check for debug parameter to disable the checks below

/* Version for long date string codes */
if (ttd_platform != PLATFORM_OPENTTD || openttd_version < version_openttd(1, 2, 0, 23667)) {
 error(FATAL, REQUIRES_OPENTTD, string(STR_ERR_OPENTTD_VERSION));
 exit;
}






if (grf_future_status("Meo\81")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos"));}

if (grf_future_status("Meo\82")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));}

if (grf_future_status("Meo\91")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Town Vector"));}

if (grf_future_status("Meo\92")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic Vector"));}

if (grf_future_status("Meo\93")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector"));}

if (grf_future_status("Meo\94")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery Vector"));}

if (grf_future_status("Meo\95")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Wood Vector"));}

if (grf_future_status("Meo\96")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector"));}

if (grf_future_status("Meo\97")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));}

if (grf_future_status("Meo\98")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));}

if (grf_future_status("Meo\99")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));}

if (grf_future_status("Meo\9A")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));}

if (grf_future_status("Meo\9B")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));}

if (grf_future_status("Meo\9C")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));}

if (grf_future_status("SK\05\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\04")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\05")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("EX\01\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("EX\01\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("DD\06\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Industries"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Manual Industries"));}

if (grf_future_status("SLTU")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Tourist Set"));}

if (grf_future_status("SZ\13D")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));}

if (grf_future_status("EH\01\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Experts hard industries"));}

if (grf_future_status("DD\06\03")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "UKRS Brick Chain"));}

if (grf_future_status("DD\06\02")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Pikka Basic Industries"));}

if (grf_future_status("mb\08\00")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));}

if (climate == CLIMATE_ARCTIC) {
 if (grf_future_status("mb\07\00")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Alpine Climate"));}
}

if (grf_future_status("AL\01\01")) { error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Nearby Station Names"));}

if (grf_future_status("MG\08\00", "\FF\FF\FF\00")) {
 error(FATAL, string(STR_ERR_INCOMPATIBLE_SET, "Lumber Mill"));
}

if (grf_future_status("CACa")) {
 if (param["CACa", 1] != 0) {
  error(FATAL, string(STR_ERR_INCOMPATIBLE_PARAM_CITYSET));
 }
}
if (grf_future_status("CASa")) {
 if (param["CASa", 1] != 0) {
  error(FATAL, string(STR_ERR_INCOMPATIBLE_PARAM_CANSET));
 }
}
if (grf_future_status("VC\00\01")) {
 if (param["VC\00\01", 254] <= 17) {
  error(FATAL, string(STR_ERR_INCOMPATIBLE_SET_TTRS_VERSION));
 }
}
# 7 "<stdin>" 2

# 1 "sprites/nml/conditions.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Replace sugar beet by sugar cane */
# 9 "<stdin>" 2

# 1 "sprites/nml/cargo_props.pnml" 1
cargotable {
    PASS, COAL, MAIL, OIL_,
    LVST, GOOD, GRAI, WOOD,
    IORE, STEL, FOOD, BEER,
    MILK, FRVG, FISH, WOOL,
    RCYC, FICR, GRVL, BDMT,
    SAND, CLAY, WDPR, AORE,
    SCMT, SGBT, SGCN, PETR,
    RFPR, MNSP, ENSP, FMSP
}

item(FEAT_CARGOS, cargo_passengers, 0) {
 property {
  number: 0;
  type_name: 15;
  unit_name: 47;
  type_abbreviation: 143;
  sprite: NEW_CARGO_SPRITE;
  weight: 0.0625;
  station_list_colour: 152;
  cargo_payment_list_colour: 152;
  is_freight: 0;
  cargo_classes: bitmask(CC_PASSENGERS);
  cargo_label: "PASS";
  town_growth_effect: TOWNGROWTH_PASSENGERS;
  town_growth_multiplier: 1.0;
  units_of_cargo: 79;
  items_of_cargo: 111;
 }
}

item(FEAT_CARGOS, cargo_coal, 1) {
 property {
  number: 1;
  type_name: 16;
  unit_name: 48;
  type_abbreviation: 144;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 0;
  cargo_payment_list_colour: 0;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "COAL";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: 112;
 }
}

item(FEAT_CARGOS, cargo_mail, 2) {
 property {
  number: 2;
  type_name: 17;
  unit_name: 49;
  type_abbreviation: 145;
  sprite: NEW_CARGO_SPRITE;
  weight: 0.25;
  station_list_colour: 15;
  cargo_payment_list_colour: 15;
  is_freight: 1;
  cargo_classes: bitmask(CC_MAIL);
  cargo_label: "MAIL";
  town_growth_effect: TOWNGROWTH_MAIL;
  town_growth_effect: TOWNGROWTH_MAIL;
  town_growth_multiplier: 1.0;
  units_of_cargo: 81;
  items_of_cargo: 113;
 }
}

item(FEAT_CARGOS, cargo_oil, 3) {
 property {
  number: 3;
  type_name: 18;
  unit_name: 50;
  type_abbreviation: 146;
  sprite: NEW_CARGO_SPRITE;
  weight: 0.875;
  station_list_colour: 172;
  cargo_payment_list_colour: 172;
  is_freight: 1;
  cargo_classes: bitmask(CC_LIQUID);
  cargo_label: "OIL_";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 82;
  items_of_cargo: 114;
 }
}

item(FEAT_CARGOS, cargo_livestock, 4) {
 property {
  number: 4;
  type_name: 19;
  unit_name: 51;
  type_abbreviation: 147;
  sprite: NEW_CARGO_SPRITE;
  weight: 0.1875;
  station_list_colour: 209;
  cargo_payment_list_colour: 209;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS);
  cargo_label: "LVST";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 83;
  items_of_cargo: 115;
 }
}

item(FEAT_CARGOS, cargo_goods, 5) {
 property {
  number: 5;
  type_name: 20;
  unit_name: 52;
  type_abbreviation: 148;
  sprite: NEW_CARGO_SPRITE;
  weight: 0.5;
  station_list_colour: 194;
  cargo_payment_list_colour: 194;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS);
  cargo_label: "GOOD";
  town_growth_effect: TOWNGROWTH_WATER;
  town_growth_multiplier: 1.0;
  units_of_cargo: 84;
  items_of_cargo: 116;
 }
}

item(FEAT_CARGOS, cargo_grain, 6) {
 property {
  number: 6;
  type_name: 21;
  unit_name: 53;
  type_abbreviation: 149;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 191;
  cargo_payment_list_colour: 191;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "GRAI";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 85;
  items_of_cargo: 117;
 }
}

item(FEAT_CARGOS, cargo_wood, 7) {
 property {
  number: 7;
  type_name: 22;
  unit_name: 54;
  type_abbreviation: 150;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 55;
  cargo_payment_list_colour: 55;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS);
  cargo_label: "WOOD";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 86;
  items_of_cargo: 118;
 }
}

item(FEAT_CARGOS, cargo_iron_ore, 8) {
 property {
  number: 8;
  type_name: 23;
  unit_name: 55;
  type_abbreviation: 151;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 181;
  cargo_payment_list_colour: 181;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "IORE";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 87;
  items_of_cargo: 119;
 }
}

item(FEAT_CARGOS, cargo_steel, 9) {
 property {
  number: 9;
  type_name: string(STR_CARGO_NAME_METAL);
  unit_name: string(STR_CARGO_NAME_METAL);
  type_abbreviation: string(STR_CID_METAL);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 10;
  cargo_payment_list_colour: 10;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS);
  cargo_label: "STEL";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_METAL);
 }
}

item(FEAT_CARGOS, cargo_food, 11) {
 property {
  number: 11;
  type_name: 30;
  unit_name: 62;
  type_abbreviation: 158;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 48;
  cargo_payment_list_colour: 48;
  is_freight: 1;
  cargo_classes: bitmask(CC_REFRIGERATED, CC_EXPRESS);
  cargo_label: "FOOD";
  town_growth_effect: TOWNGROWTH_FOOD;
  town_growth_multiplier: 1.0;
  units_of_cargo: 94;
  items_of_cargo: 126;
 }
}

item(FEAT_CARGOS, cargo_alcohol, 29) {
 property {
  number: 29;
  type_name: string(STR_CARGO_NAME_ALCOHOL);
  unit_name: string(STR_CARGO_NAME_ALCOHOL);
  type_abbreviation: string(STR_CID_ALCOHOL);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 180;
  cargo_payment_list_colour: 180;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_LIQUID);
  cargo_label: "BEER";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 82;
  items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL);
 }
}

item(FEAT_CARGOS, cargo_milk, 10) {
 property {
  number: 10;
  type_name: string(STR_CARGO_NAME_MILK);
  unit_name: string(STR_CARGO_NAME_MILK);
  type_abbreviation: string(STR_CID_MILK);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0625;
  station_list_colour: 153;
  cargo_payment_list_colour: 153;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_LIQUID, CC_REFRIGERATED);
  cargo_label: "MILK";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 82;
  items_of_cargo: string(STR_CARGO_UNIT_MILK);
 }
}

item(FEAT_CARGOS, cargo_fruits, 13) {
 property {
  number: 13;
  type_name: string(STR_CARGO_NAME_FRUITS);
  unit_name: string(STR_CARGO_NAME_FRUITS);
  type_abbreviation: 156;
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 82;
  cargo_payment_list_colour: 82;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_REFRIGERATED);
  cargo_label: "FRVG";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_FRUITS);
 }
}

item(FEAT_CARGOS, cargo_fish, 14) {
 property {
  number: 14;
  type_name: string(STR_CARGO_NAME_FISH);
  unit_name: string(STR_CARGO_NAME_FISH);
  type_abbreviation: string(STR_CID_FISH);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 149;
  cargo_payment_list_colour: 149;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_REFRIGERATED);
  cargo_label: "FISH";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_FISH);
 }
}

item(FEAT_CARGOS, cargo_wool, 15) {
 property {
  number: 15;
  type_name: string(STR_CARGO_NAME_WOOL);
  unit_name: string(STR_CARGO_NAME_WOOL);
  type_abbreviation: string(STR_CID_WOOL);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 134;
  cargo_payment_list_colour: 134;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
  cargo_label: "WOOL";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_WOOL);
 }
}

item(FEAT_CARGOS, cargo_recyclables, 31) {
 property {
  number: 31;
  type_name: string(STR_CARGO_NAME_RECYCLABLES);
  unit_name: string(STR_CARGO_NAME_RECYCLABLES);
  type_abbreviation: string(STR_CID_RECYCLABLES);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 181;
  cargo_payment_list_colour: 181;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED);
  cargo_label: "RCYC";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_RECYCLABLES);
 }
}

item(FEAT_CARGOS, cargo_plant_fibres, 22) {
 property {
  number: 22;
  type_name: string(STR_CARGO_NAME_FIBRES);
  unit_name: string(STR_CARGO_NAME_FIBRES);
  type_abbreviation: string(STR_CID_FIBRES);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 13;
  cargo_payment_list_colour: 13;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK, CC_PIECE_GOODS);
  cargo_label: "FICR";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_FIBRES);
 }
}

item(FEAT_CARGOS, cargo_gravel, 26) {
 property {
  number: 26;
  type_name: string(STR_CARGO_NAME_STONE);
  unit_name: string(STR_CARGO_NAME_STONE);
  type_abbreviation: string(STR_CID_STONE);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 16;
  cargo_payment_list_colour: 16;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "GRVL";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_STONE);
 }
}

item(FEAT_CARGOS, cargo_building_materials, 28) {
 property {
  number: 28;
  type_name: string(STR_CARGO_NAME_BUILDING_MATERIALS);
  unit_name: string(STR_CARGO_NAME_BUILDING_MATERIALS);
  type_abbreviation: string(STR_CID_BUILDING_MATERIALS);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 184;
  cargo_payment_list_colour: 184;
  is_freight: 1;
  cargo_classes: bitmask(CC_PIECE_GOODS, CC_BULK);
  cargo_label: "BDMT";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_BUILDING_MATERIALS);
 }
}

item(FEAT_CARGOS, cargo_sand, 17) {
 property {
  number: 17;
  type_name: string(STR_CARGO_NAME_SAND);
  unit_name: string(STR_CARGO_NAME_SAND);
  type_abbreviation: string(STR_CID_SAND);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 190;
  cargo_payment_list_colour: 190;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "SAND";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_SAND);
 }
}

item(FEAT_CARGOS, cargo_clay, 16) {
 property {
  number: 16;
  type_name: string(STR_CARGO_NAME_CLAY);
  unit_name: string(STR_CARGO_NAME_CLAY);
  type_abbreviation: string(STR_CID_CLAY);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 44;
  cargo_payment_list_colour: 44;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "CLAY";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_CLAY);
 }
}

item(FEAT_CARGOS, cargo_lumber, 19) {
 property {
  number: 19;
  type_name: string(STR_CARGO_NAME_LUMBER);
  unit_name: string(STR_CARGO_NAME_LUMBER);
  type_abbreviation: string(STR_CID_LUMBER);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 58;
  cargo_payment_list_colour: 58;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK, CC_PIECE_GOODS);
  cargo_label: "WDPR";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_LUMBER);
 }
}

item(FEAT_CARGOS, cargo_bauxite, 27) {
 property {
  number: 27;
  type_name: string(STR_CARGO_NAME_BAUXITE);
  unit_name: string(STR_CARGO_NAME_BAUXITE);
  type_abbreviation: string(STR_CID_BAUXITE);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 84;
  cargo_payment_list_colour: 84;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK);
  cargo_label: "AORE";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_BAUXITE);
 }
}

item(FEAT_CARGOS, cargo_scrap_metal, 20) {
 property {
  number: 20;
  type_name: string(STR_CARGO_NAME_SCRAP_METAL);
  unit_name: string(STR_CARGO_NAME_SCRAP_METAL);
  type_abbreviation: string(STR_CID_SCRAP_METAL);
  sprite: NEW_CARGO_SPRITE;
  weight: 1.0;
  station_list_colour: 20;
  cargo_payment_list_colour: 20;
  is_freight: 1;
  cargo_classes: bitmask(CC_BULK, CC_NON_POURABLE);
  cargo_label: "SCMT";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 80;
  items_of_cargo: string(STR_CARGO_UNIT_SCRAP_METAL);
 }
}

if ((climate == CLIMATE_TROPICAL)) {
    item(FEAT_CARGOS, cargo_sugarcane, 12) {
        property {
            number: 12;
            type_name: string(STR_CARGO_NAME_SUGARCANE);
            unit_name: string(STR_CARGO_NAME_SUGARCANE);
            type_abbreviation: string(STR_CID_SUGARCANE);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 182;
            cargo_payment_list_colour: 182;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK, CC_NON_POURABLE);
            cargo_label: "SGCN";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_SUGARCANE);
        }
    }
} else {
    item(FEAT_CARGOS, cargo_sugarbeet, 12) {
        property {
            number: 12;
            type_name: string(STR_CARGO_NAME_SUGAR_BEET);
            unit_name: string(STR_CARGO_NAME_SUGAR_BEET);
            type_abbreviation: string(STR_CID_SUGAR_BEET);
            sprite: NEW_CARGO_SPRITE;
            weight: 1.0;
            station_list_colour: 182;
            cargo_payment_list_colour: 182;
            is_freight: 1;
            cargo_classes: bitmask(CC_BULK);
            cargo_label: "SGBT";
            town_growth_effect: TOWNGROWTH_NONE;
            town_growth_multiplier: 1.0;
            units_of_cargo: 80;
            items_of_cargo: string(STR_CARGO_UNIT_SUGAR_BEET);
        }
    }
}


item(FEAT_CARGOS, cargo_fuel_oil, 25) {
 property {
  number: 25;
  type_name: string(STR_CARGO_NAME_PETROL);
  unit_name: string(STR_CARGO_NAME_PETROL);
  type_abbreviation: string(STR_CID_PETROL);
  sprite: NEW_CARGO_SPRITE;
  weight: 0.6875;
  station_list_colour: 175;
  cargo_payment_list_colour: 175;
  is_freight: 1;
  cargo_classes: bitmask(CC_LIQUID);
  cargo_label: "PETR";
  town_growth_effect: TOWNGROWTH_GOODS;
  town_growth_multiplier: 1.0;
  units_of_cargo: 82;
  items_of_cargo: string(STR_CARGO_UNIT_PETROL);
 }
}

item(FEAT_CARGOS, cargo_chemicals, 23) {
 property {
  number: 23;
  type_name: string(STR_CARGO_NAME_CHEMICALS);
  unit_name: string(STR_CARGO_NAME_CHEMICALS);
  type_abbreviation: string(STR_CID_CHEMICALS);
  sprite: NEW_CARGO_SPRITE;
  weight: 0.625;
  station_list_colour: 177;
  cargo_payment_list_colour: 177;
  is_freight: 1;
  cargo_classes: bitmask(CC_LIQUID);
  cargo_label: "RFPR";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 82;
  items_of_cargo: string(STR_CARGO_UNIT_CHEMICALS);
 }
}

item(FEAT_CARGOS, cargo_manufacturing_supplies, 18) {
 property {
  number: 18;
  type_name: string(STR_CARGO_NAME_MANUFACTURING_SUPPLIES);
  unit_name: string(STR_CARGO_NAME_MANUFACTURING_SUPPLIES);
  type_abbreviation: string(STR_CID_MANUFACTURING_SUPPLIES);
  sprite: NEW_CARGO_SPRITE;
  weight: 0.3125;
  station_list_colour: 146;
  cargo_payment_list_colour: 146;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS);
  cargo_label: "MNSP";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 84;
  items_of_cargo: string(STR_CARGO_UNIT_MNSP);
 }
}

item(FEAT_CARGOS, cargo_engineering_supplies, 24) {
 property {
  number: 24;
  type_name: string(STR_CARGO_NAME_ENGINEERING_SUPPLIES);
  unit_name: string(STR_CARGO_NAME_ENGINEERING_SUPPLIES);
  type_abbreviation: string(STR_CID_ENGINEERING_SUPPLIES);
  sprite: NEW_CARGO_SPRITE;
  weight: 0.625;
  station_list_colour: 79;
  cargo_payment_list_colour: 79;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS);
  cargo_label: "ENSP";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 84;
  items_of_cargo: string(STR_CARGO_UNIT_ENGINEERING_SUPPLIES);
 }
}

item(FEAT_CARGOS, cargo_farm_supplies, 21) {
 property {
  number: 21;
  type_name: string(STR_CARGO_NAME_FARM_SUPPLIES);
  unit_name: string(STR_CARGO_NAME_FARM_SUPPLIES);
  type_abbreviation: string(STR_CID_FARM_SUPPLIES);
  sprite: NEW_CARGO_SPRITE;
  weight: 0.5625;
  station_list_colour: 75;
  cargo_payment_list_colour: 75;
  is_freight: 1;
  cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS);
  cargo_label: "FMSP";
  town_growth_effect: TOWNGROWTH_NONE;
  town_growth_multiplier: 1.0;
  units_of_cargo: 84;
  items_of_cargo: string(STR_CARGO_UNIT_FMSP);
 }
}

// Configure cargo payments, which differ per-economy
// Currently, there is only one economy, but this may change
if (economy == 0) {
 item(FEAT_CARGOS, cargo_passengers, 0) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 22;
   price_factor: 101.749420166;
  }
 }

 item(FEAT_CARGOS, cargo_coal, 1) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 74.2692947388;
  }
 }

 item(FEAT_CARGOS, cargo_mail, 2) {
  property {
   penalty_lowerbound: 6;
   single_penalty_length: 24;
   price_factor: 143.869400024;
  }
 }

 item(FEAT_CARGOS, cargo_oil, 3) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 93.3108329773;
  }
 }

 item(FEAT_CARGOS, cargo_livestock, 4) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 22;
   price_factor: 124.073982239;
  }
 }

 item(FEAT_CARGOS, cargo_goods, 5) {
  property {
   penalty_lowerbound: 5;
   single_penalty_length: 24;
   price_factor: 149.4140625;
  }
 }

 item(FEAT_CARGOS, cargo_grain, 6) {
  property {
   penalty_lowerbound: 4;
   single_penalty_length: 40;
   price_factor: 116.194725037;
  }
 }

 item(FEAT_CARGOS, cargo_wood, 7) {
  property {
   penalty_lowerbound: 24;
   single_penalty_length: 255;
   price_factor: 97.3963737488;
  }
 }

 item(FEAT_CARGOS, cargo_iron_ore, 8) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 75.4852294922;
  }
 }

 item(FEAT_CARGOS, cargo_steel, 9) {
  property {
   penalty_lowerbound: 7;
   single_penalty_length: 255;
   price_factor: 126.165390015;
  }
 }

 item(FEAT_CARGOS, cargo_food, 11) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 24;
   price_factor: 149.803161621;
  }
 }

 item(FEAT_CARGOS, cargo_alcohol, 29) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 24;
   price_factor: 145.9608078;
  }
 }

 item(FEAT_CARGOS, cargo_milk, 10) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 20;
   price_factor: 134.579658508;
  }
 }

 item(FEAT_CARGOS, cargo_fruits, 13) {
  property {
   penalty_lowerbound: 0;
   single_penalty_length: 26;
   price_factor: 119.696617126;
  }
 }

 item(FEAT_CARGOS, cargo_fish, 14) {
  property {
   penalty_lowerbound: 12;
   single_penalty_length: 30;
   price_factor: 143.869400024;
  }
 }

 item(FEAT_CARGOS, cargo_wool, 15) {
  property {
   penalty_lowerbound: 8;
   single_penalty_length: 90;
   price_factor: 105.202674866;
  }
 }

 item(FEAT_CARGOS, cargo_gravel, 26) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 74.1233825684;
  }
 }

 item(FEAT_CARGOS, cargo_building_materials, 28) {
  property {
   penalty_lowerbound: 12;
   single_penalty_length: 255;
   price_factor: 136.233329773;
  }
 }

 item(FEAT_CARGOS, cargo_sand, 17) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 73.2479095459;
  }
 }

 item(FEAT_CARGOS, cargo_clay, 16) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 72.9804039001;
  }
 }

 item(FEAT_CARGOS, cargo_lumber, 19) {
  property {
   penalty_lowerbound: 12;
   single_penalty_length: 255;
   price_factor: 125.533103943;
  }
 }

 item(FEAT_CARGOS, cargo_bauxite, 27) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 82.5862884521;
  }
 }

 item(FEAT_CARGOS, cargo_scrap_metal, 20) {
  property {
   penalty_lowerbound: 30;
   single_penalty_length: 255;
   price_factor: 126.846313477;
  }
 }

 item(FEAT_CARGOS, cargo_sugarcane, 12) {
  property {
   penalty_lowerbound: 5;
   single_penalty_length: 30;
   price_factor: 116.194725037;
  }
 }

 item(FEAT_CARGOS, cargo_fuel_oil, 25) {
  property {
   penalty_lowerbound: 18;
   single_penalty_length: 255;
   price_factor: 126.749038696;
  }
 }

 item(FEAT_CARGOS, cargo_chemicals, 23) {
  property {
   penalty_lowerbound: 12;
   single_penalty_length: 255;
   price_factor: 117.945671082;
  }
 }

 item(FEAT_CARGOS, cargo_manufacturing_supplies, 18) {
  property {
   penalty_lowerbound: 8;
   single_penalty_length: 60;
   price_factor: 134.506702423;
  }
 }

 item(FEAT_CARGOS, cargo_engineering_supplies, 24) {
  property {
   penalty_lowerbound: 6;
   single_penalty_length: 36;
   price_factor: 140.58637619;
  }
 }

 item(FEAT_CARGOS, cargo_farm_supplies, 21) {
  property {
   penalty_lowerbound: 6;
   single_penalty_length: 36;
   price_factor: 128.11088562;
  }
 }

 item(FEAT_CARGOS, cargo_plant_fibres, 22) {
  property {
   penalty_lowerbound: 10;
   single_penalty_length: 36;
   price_factor: 107.634544373;
  }
 }

 item(FEAT_CARGOS, cargo_recyclables, 31) {
  property {
   penalty_lowerbound: 10;
   single_penalty_length: 128;
   price_factor: 104.570388794;
  }
 }
}
# 11 "<stdin>" 2
# 1 "sprites/nml/cargo_graphics.pnml" 1
/* template for cargo icons
 * cargoicon_id is the ID of the spriteset.
 * x and y indices are zero-based indices in the cargo icons png file.
 */



spriteset(cargoicon_passenger) { [10 + 20 * 0, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_coal) { [10 + 20 * 1, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_mail) { [10 + 20 * 2, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_oil) { [10 + 20 * 3, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_livestock) { [10 + 20 * 4, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_goods) { [10 + 20 * 5, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_grain) { [10 + 20 * 6, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_alcohol) { [10 + 20 * 7, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_wood) { [10 + 20 * 8, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_iron_ore) { [10 + 20 * 9, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_steel) { [10 + 20 * 10, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
//cargo_icon_template(cargoicon_waste,                  11, 0)
spriteset(cargoicon_food) { [10 + 20 * 12, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_milk) { [10 + 20 * 13, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_fruits) { [10 + 20 * 14, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_fish) { [10 + 20 * 15, 10 + 20 * 0, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }

spriteset(cargoicon_sand) { [10 + 20 * 0, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_building_materials) { [10 + 20 * 1, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_scrap_metal) { [10 + 20 * 2, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_plant_fibres) { [10 + 20 * 3, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_wool) { [10 + 20 * 4, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_gravel) { [10 + 20 * 5, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_lumber) { [10 + 20 * 6, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_manufacturing_supplies) { [10 + 20 * 7, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_farm_supplies) { [10 + 20 * 8, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_clay) { [10 + 20 * 9, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_chemicals) { [10 + 20 * 10, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_engineering_supplies) { [10 + 20 * 11, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_fuel_oil) { [10 + 20 * 12, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_bauxite) { [10 + 20 * 13, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_sugarbeet) { [10 + 20 * 14, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }
spriteset(cargoicon_sugarcane) { [10 + 20 * 15, 10 + 20 * 1, 10, 10, 0, 0, "sprites/graphics/other/cargoicons.png"] }



switch(FEAT_CARGOS, SELF, switch_station_rating_reduced_effect,
 /* Positive bonuses for having pickup in last 30 or 6o days. */
 [STORE_TEMP(
  (extra_callback_info2 & 0xFF) < 12 ? 153 :
  ((extra_callback_info2 & 0xFF) < 24 ? 95 : 0)
  , 0),
 /* Positive bonuses for having small amount of cargo waiting. */
 STORE_TEMP(
  ((extra_callback_info2 >> 8) & 0xFFFF) < 100 ? 40 :
  (((extra_callback_info2 >> 8) & 0xFFFF) < 300 ? 30 :
  (((extra_callback_info2 >> 8) & 0xFFFF) < 600 ? 10 : 0))
  , 1),
 /* Negative bonuses for having large amount of cargo waiting. */
 STORE_TEMP(
  ((extra_callback_info2 >> 8) & 0xFFFF) > 6400 ? -180 :
  (((extra_callback_info2 >> 8) & 0xFFFF) > 3200 ? -150 :
  (((extra_callback_info2 >> 8) & 0xFFFF) > 1600 ? -120 :
  (((extra_callback_info2 >> 8) & 0xFFFF) > 1000 ? -90 : 0)))
  , 2),
 /* The +40 is for the vehicle speed bonus, we fix it at the maximum value. */
 LOAD_TEMP(0) + LOAD_TEMP(1) + LOAD_TEMP(2) + 40
 ]) {
 return;
}

switch(FEAT_CARGOS, SELF, switch_station_rating, station_rating_algorithm) {
 1: switch_station_rating_reduced_effect;
 2: return 500;
 CB_FAILED;
}

item(FEAT_CARGOS, cargo_passengers, 0) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_passenger;
 }
}

item(FEAT_CARGOS, cargo_coal, 1) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_coal;
 }
}

item(FEAT_CARGOS, cargo_mail, 2) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_mail;
 }
}

item(FEAT_CARGOS, cargo_oil, 3) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_oil;
 }
}

item(FEAT_CARGOS, cargo_livestock, 4) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_livestock;
 }
}

item(FEAT_CARGOS, cargo_goods, 5) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_goods;
 }
}

item(FEAT_CARGOS, cargo_grain, 6) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_grain;
 }
}

item(FEAT_CARGOS, cargo_alcohol, 29) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_alcohol;
 }
}

item(FEAT_CARGOS, cargo_wood, 7) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_wood;
 }
}

item(FEAT_CARGOS, cargo_iron_ore, 8) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_iron_ore;
 }
}

item(FEAT_CARGOS, cargo_steel, 9) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_steel;
 }
}

item(FEAT_CARGOS, cargo_food, 11) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_food;
 }
}

item(FEAT_CARGOS, cargo_milk, 10) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_milk;
 }
}

item(FEAT_CARGOS, cargo_fruits, 13) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_fruits;
 }
}

item(FEAT_CARGOS, cargo_fish, 14) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_fish;
 }
}

item(FEAT_CARGOS, cargo_sand, 17) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_sand;
 }
}

item(FEAT_CARGOS, cargo_building_materials, 28) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_building_materials;
 }
}

item(FEAT_CARGOS, cargo_scrap_metal, 20) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_scrap_metal;
 }
}

item(FEAT_CARGOS, cargo_plant_fibres, 22) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_plant_fibres;
 }
}

item(FEAT_CARGOS, cargo_wool, 15) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_wool;
 }
}

item(FEAT_CARGOS, cargo_gravel, 26) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_gravel;
 }
}

item(FEAT_CARGOS, cargo_lumber, 19) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_lumber;
 }
}

item(FEAT_CARGOS, cargo_manufacturing_supplies, 18) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_manufacturing_supplies;
 }
}

item(FEAT_CARGOS, cargo_farm_supplies, 21) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_farm_supplies;
 }
}

item(FEAT_CARGOS, cargo_clay, 16) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_clay;
 }
}

item(FEAT_CARGOS, cargo_chemicals, 23) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_chemicals;
 }
}

item(FEAT_CARGOS, cargo_engineering_supplies, 24) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_engineering_supplies;
 }
}

item(FEAT_CARGOS, cargo_fuel_oil, 25) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_fuel_oil;
 }
}

item(FEAT_CARGOS, cargo_bauxite, 27) {
 graphics {
  station_rating: switch_station_rating;
  cargoicon_bauxite;
 }
}

if ((climate == CLIMATE_TROPICAL)) {
 item(FEAT_CARGOS, cargo_sugarcane, 12) {
  graphics {
   station_rating: switch_station_rating;
   cargoicon_sugarbeet;
  }
 }
} else {
 item(FEAT_CARGOS, cargo_sugarbeet, 12) {
  graphics {
   station_rating: switch_station_rating;
   cargoicon_sugarcane;
  }
 }
}
# 12 "<stdin>" 2

//disable the default industries
disable_item(FEAT_INDUSTRIES, 0, 36);

# 1 "sprites/nml/templates/tile_fences.pnml" 1
/* Exclude fences to adjacent tileID
 * 
 * name:   name of this switch
 * next:   name of next switch of spritelayout
 * class:  class to exclude fences to
 */
# 17 "sprites/nml/templates/tile_fences.pnml"
/* Exclude fences to adjacent tile class
 * 
 * name:   name of this switch
 * next:   name of next switch of spritelayout
 * class:  class to exclude fences to
 */
# 34 "sprites/nml/templates/tile_fences.pnml"
/* Draw no fences around a tile
 * 
 * name:   name of this switch
 * next:   name of next switch of spritelayout
 */
# 60 "sprites/nml/templates/tile_fences.pnml"
/* Add fences to a flat tile 
 * 
 * name:   name of this switch
 * next:   name of next switch of spritelayout
 * ne:     draw fence in NE
 * nw:     draw fence in NW
 * se:     draw fence in SE
 * sw:     draw fence in SW
 */
# 90 "sprites/nml/templates/tile_fences.pnml"
/* Add sloped fences to a tile 
 * 
 * name:   name of this switch
 * next:   name of next switch of spritelayout
 * ne:     draw fence in NE
 * nw:     draw fence in NW
 * se:     draw fence in SE
 * sw:     draw fence in SW
 */
# 17 "<stdin>" 2
# 1 "sprites/nml/templates/tile_location.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* General remarks on the templates in this file
 *
 * There are three types of templates:
 * - TILE_CHECK_XXX
 * - TILE_ALLOW_XXX
 * - TILE_DISALLOW_XXX
 *
 * Parameters and usage:
 * TILE_CHECK_XXX   (name, <params>, if_positive, if_negative)
 * TILE_ALLOW_XXX   (name, <params>, if_not_allowed)
 * TILE_DISALLOW_XXX(name, <params>, error_text,  if_allowed)
 *
 * where
 *    name:       is the name of the switch which WILL be expanded by THIS_ID(name)
 *    <params>:   depend on the template
 *    error_text: is a string or CB_RESULT_LOCATION_DISALLOW
 *    if_positive, if_negative, if_not_allowed, if_allowed:
 *                is the name of the next switch or a return value like
 *                "return CB_RESULT_LOCATION_DISALLOW" or
 *                "return CB_RESULT_LOCATION_ALLOW"
 *
 * List of templates:
 * TILE_CHECK_HEIGHT         (name, minh, maxh,  inrange, outrange)
 * TILE_CHECK_WATERCLASS     (name, class,       yes,     no)
 * TILE_CHECK_WATER          (name,              water,   land)
 * TILE_CHECK_FLAT           (name,              flat,    sloped)
 *
 * TILE_DISALLOW_COAST       (name,              errtext, next)
 * TILE_DISALLOW_TERRAIN     (name, terraintype, errtext, next)
 * TILE_DISALLOW_NEARBY_CLASS(name, class,       errtext, next)
 * TILE_DISALLOW_STEEP_SLOPE (name,              errtext, next)
 * TILE_DISALLOW_SLOPES      (name,              errtext, next)
 *
 * TILE_ALLOW_PLAYER         (name,                       next)
 */


/*
 * Check that the tile for being in a certain height range
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * minh:         Minimum height to check for
 * maxh:         Maximum height to check for
 * inrange:      choice when in range:     name of next switch or return <value>
 * outrange:     choice when out of range: name of next switch or return <value>
 *        where <value> is a string, CB_RESULT_LOCATION_DISALLOW or CB_RESULT_LOCATION_ALLOW
 */

/* uses more efficient code for (nearby_tile_height(0,0) <= maxh) && (nearby_tile_height(0,0) >= minh) */






/*
 * Check that the tile for having a specific water class
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * class:        Water class to check for
 * yes:          choice when present:     name of next switch or return <value>
 * no:           choice when not present: name of next switch or return <value>
 *        where <value> is a string, CB_RESULT_LOCATION_DISALLOW or CB_RESULT_LOCATION_ALLOW
 */







/*
 * Check that the tile for being a water tile
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * water:        water tile: name of next switch or return <value>
 * land:         land tile:  name of next switch or return <value>
 *        where <value> is a string, CB_RESULT_LOCATION_DISALLOW or CB_RESULT_LOCATION_ALLOW
 */







/*
 * Check that the tile itself is not a coast or water tile
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next:         allow construction: name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */







/*
 * Check for all nearby tiles and the tile itself NOT being of a specific terrain type
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * class:        nearby tile type (TILETYPE_DESERT or similar)
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next:         allow construction: name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */
# 153 "sprites/nml/templates/tile_location.pnml"
/*
 * Check for the nearby tiles NOT being of a specific class
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * class:        nearby tile class
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next:         allow construction: name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */
# 180 "sprites/nml/templates/tile_location.pnml"
/*
 * Check whether a certain location is suitable for building the industry
 * Restrictions apply only to industries funded by the game.
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name          name of this switch
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */

/* founder == FOUNDER_GAME means founded by the game, 0 .. 15 are player companies */
# 203 "sprites/nml/templates/tile_location.pnml"
/*
 * Check that the tile itself is a flat tile
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name:         Name of this switch
 * flat:         flat tile:    name of next switch or return <value>
 * sloped:       sloped tile:  name of next switch or return <value>
 *        where <value> is a string, CB_RESULT_LOCATION_DISALLOW or CB_RESULT_LOCATION_ALLOW
 */







/*
 * Check whether a tile is steep slope and only disallow construction in that case
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name          name of this switch
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */







/*
 * Check whether a tile is a flat tile and only allow construction in that case
 *
 * switch name:  THIS_ID(name)
 *               tilename ## name
 *
 * Parameters:
 * name          name of this switch
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */
# 18 "<stdin>" 2
# 1 "sprites/nml/templates/tile_ground_sprite.pnml" 1
# 19 "<stdin>" 2
# 1 "sprites/nml/templates/tile_cargos.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Cargo to set the cargos accepted by an industry tile depending
 * on the (internal) parameter "cargo_param" which should depend
 * on the economy parameter and climate
 */
# 20 "<stdin>" 2

# 1 "sprites/nml/templates/sprite_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Plain ground sprite without any frills */
template tmpl_ground_tile(x, y) {
 [x, y, 64, 31, -31, 0]
}

template tmpl_ground_tile_filename(x, y, filename) {
 [x, y, 64, 31, -31, 0, filename]
}

/*
 * Normal building sprite of 64px width and arbitrary width
 * and normal alignment to the edges of the tile
 */
template tmpl_building_sprite(x, y, h, dy) {
    [x, y, 64, h, -31, dy]
}

template tmpl_building_sprite_filename(x, y, h, dy, filename) {
    [x, y, 64, h, -31, dy, NOCROP, filename]
}
# 22 "<stdin>" 2
# 1 "sprites/nml/templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 23 "<stdin>" 2
# 1 "sprites/nml/templates/industry_location.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* ========= Tile Checks ========== */

/*
 * Check whether an industry *tile* is within a certain distance of houses
 * *
 * Usage:        CHECK_HOUSES_NEARBY(switchname, x, y next)
 *
 * Parameters:
 * name          name of this switch. Suggested: tile_houses_nearby
 * x             x offset from north tile of industry
 * y             y offset from north tile of industry
 * next          name of next switch or "return CB_RESULT_LOCATION_DISALLOW"
 */







/*
 * Check whether an industry *tile* is within a certain distance of road
 * *
 * Usage:        CHECK_ROAD_ADJACENT(switchname, next)
 *
 * Parameters:
 * name          name of this switch. Suggested: tile_road_adjacent
 * x             x offset from north tile of industry
 * y             y offset from north tile of industry
 * next          name of next switch or "return CB_RESULT_LOCATION_DISALLOW"
 */
# 47 "sprites/nml/templates/industry_location.pnml"
/* ========= Industry Checks ========== */

/*
 * Check for minimum distance to the coast
 *
 * switch name:  THIS_ID(name)
 *               industryname ## name
 *
 * Parameters:
 * name:         Name of this switch
 * mindistance:  Minimum distance from coast
 * maxdistance:  Maximum distance from coast
 * errtext:      deny construction: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next:         allow construction: name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */






/*
 * Check for ratio to related industry cluster
 *
 * switch name:  THIS_ID(related)
 *               industyname ## incompatible_industryname
 *
 * Parameters:
 * related:      name of industry to check
 * mindistance:  minimum required separation
 * maxdistance:  maximum allowed separation
 * next:         allow construction: name of next or "return CB_RESULT_LOCATION_ALLOW"
 * errtext:      deny construction: text for error message or "return CB_RESULT_LOCATION_DISALLOW"
 */
# 93 "sprites/nml/templates/industry_location.pnml"
/*
 * Check for a minimum distance to another industry type
 *
 * switch name:  THIS_ID(param1)
 *               industyname ## incompatible_industryname
 *
 * Parameters:
 * incompatible: name of conflicting industry
 * distance:     minimum required separation
 * errtext:      return value: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next:         name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */
# 113 "sprites/nml/templates/industry_location.pnml"
/*
 * Check for count of industry type per town
 * *
 * Usage:        CHECK_INDUSTRY_TOWN_COUNT(switchname, industry_type, mincount, maxcount, errtext, next)
 *
 * Parameters:
 * switchname:   name of this switch. Suggested: town_distance
 * errtext:      return value: text for error message or CB_RESULT_LOCATION_DISALLOW
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 * industry_type name of industry type to check for
 * mincount      minimum number of industry type
 * maxcount      maximum number of industry type
 */
# 134 "sprites/nml/templates/industry_location.pnml"
/*
 * Check whether an industry is within a certain distance from a town centre
 * *
 * Usage:        CHECK_TOWN_DISTANCE(switchname, min_distance, max_distance, next)
 *
 * Parameters:
 * switchname:   name of this switch. Suggested: town_distance
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 * mindistance   minimum distance to town centre
 * maxdistance   maximum distance to town centre
 */
# 153 "sprites/nml/templates/industry_location.pnml"
/*
 * Check whether an industry is within a certain town zone
 * *
 * Usage:        CHECK_TOWN_ZONE(switchname, zone, next)
 *
 * Parameters:
 * switchname    name of this switch. Suggested: town_distance
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 * minzone       minimum zone
 * maxzone       maximum zone
 */







/*
 * Check whether a certain location is suitable for building the industry
 * Restrictions apply only to industries funded by the game.
 *
 * This switch should be called directly from the callback as THIS_ID(check_location)
 *
 * switch name:  THIS_ID(check_location)
 *
 * Parameters:
 * next          name of next switch or "return CB_RESULT_LOCATION_ALLOW"
 */

/* founder == FOUNDER_GAME means founded by the game, 0 .. 15 are player companies */
# 24 "<stdin>" 2
# 1 "sprites/nml/templates/industry_colour.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which maps the random colour of an industry to an actual
 * colour
 */
# 25 "<stdin>" 2
# 1 "sprites/nml/templates/industry_cargos.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Cargo to set the industry input and output cargos depending
 * on the (internal) parameter "cargo_param" which should depend
 * on the economy parameter and climate
 */
# 26 "<stdin>" 2

# 1 "sprites/nml/basetiles.pnml" 1
/* *************************************************
 * tile_plain_concrete
 *
 * used by
 *   - fertiliser_plant.pnml
 *   - plastics_plant.pnml
 *   - stockyard.pnml
 * *************************************************/

spriteset(spriteset_plain_concrete, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) }
spriteset(spriteset_plain_concrete_snow, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(220, 10) }

spritelayout spritelayout_plain_conrete {
 ground {
  sprite: spriteset_plain_concrete;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
 childsprite {
  sprite: spriteset_plain_concrete_snow;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  hide_sprite: terrain_type != TILETYPE_SNOW;
 }
}

item(FEAT_INDUSTRYTILES, tile_plain_concrete, 224) {
 property {
  substitute: 0;
  accepted_cargos: [];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  spritelayout_plain_conrete;
 }
}

/* *******************************************************
 * Spriteset to be used in many industries as ground tiles
 * *******************************************************/

/* Dirty tracks */
spriteset(spriteset_ground_track_normal) {
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
}

/* Icy tracks */
spriteset(spriteset_ground_track_snow) {
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

/* No overlay. To be used when custom ground is snowed */
spriteset(spriteset_empty) {
 [80,10,1,1,0,0, "sprites/graphics/industries/groundtiles.png"]
 [80,10,1,1,0,0, "sprites/graphics/industries/groundtiles.png"]
}
# 28 "<stdin>" 2
# 1 "sprites/nml/randomise_primary_production_on_build.pnml" 1
random_switch(FEAT_INDUSTRIES, SELF, randomise_primary_production_on_build) {
 1: return 7;
 3: return 8;
 2: return 9;
 2: return 11;
 1: return 12;
 1: return 14;
 1: return 16;
}
# 29 "<stdin>" 2

# 1 "sprites/nml/industries/aluminium_plant.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/aluminium_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/smoke_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Creates a small puff of dark smoke that slowly rises until dissapearing. */
# 20 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a small puff of white smoke that slowly rises until dissapearing. */
# 32 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a long column of white smoke. */
# 10 "sprites/nml/industries/aluminium_plant.pnml" 2



spriteset(aluminium_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(aluminium_plantspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 57, -26, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(10, 10, 57, -26, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 66, -26, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(80, 10, 66, -26, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 92, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(150, 10, 92, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 90, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(220, 10, 90, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 100, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(290, 10, 100, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_6) {
 tmpl_building_sprite_filename(360, 10, 100, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(360, 10, 100, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_vehicles) {
 tmpl_building_sprite_filename(430, 10, 56, -26, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(430, 10, 56, -26, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_forklift) {
 tmpl_building_sprite_filename(500, 10, 56, -26, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(500, 10, 56, -26, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_9) {
 tmpl_building_sprite_filename(570, 10, 110, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(570, 10, 110, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_10) {
 tmpl_building_sprite_filename(640, 10, 110, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(640, 10, 110, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_11) {
 tmpl_building_sprite_filename(710, 10, 110, -61, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(710, 10, 110, -61, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spriteset(aluminium_plantspriteset_ground_snow) {
 tmpl_building_sprite_filename(780, 10, 56, -25, "sprites/graphics/industries/aluminiumplant.png")
 tmpl_building_sprite_filename(780, 10, 56, -25, "sprites/graphics/industries/aluminiumplant_snow.png")
}

spritelayout aluminium_plantspritelayout_long_hall { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout aluminium_plantspritelayout_small_office { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 90; } }

spritelayout aluminium_plantspritelayout_big_office { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout aluminium_plantspritelayout_bigtank { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout aluminium_plantspritelayout_storage_tanks { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout aluminium_plantspritelayout_vehicles { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_vehicles(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout aluminium_plantspritelayout_forklift { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_forklift(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout aluminium_plantspritelayout_big_hall_left { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: spriteset_empty; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_9(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 90; } }

spritelayout aluminium_plantspritelayout_big_hall_centre { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: spriteset_empty; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_10(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 90; } }

spritelayout aluminium_plantspritelayout_big_hall_right { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: spriteset_empty; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_11(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 90; } }

/* No template as it uses a TTD sprite w/o snow as building */
spritelayout aluminium_plantspritelayout_transformer {
 ground {
  sprite: aluminium_plantspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
 childsprite {
  sprite: GROUNDSPRITE_SNOW;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  hide_sprite: terrain_type != TILETYPE_SNOW;
  always_draw: 1;
 }
 building {
  sprite: 2054; // Transformer
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 90;
 }
}

spritelayout aluminium_plantspritelayout_concrete { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } }

spritelayout aluminium_plantspritelayout_chimney_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: aluminium_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: aluminium_plantspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: aluminium_plantspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 2040 + (animation_frame / 4); xoffset: 5; yoffset: 0; zoffset: 64 + animation_frame; xextent: 11; zextent: 7; hide_sprite: animation_frame > 19; }
}

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plantlayout_1, relative_pos) {
 relative_coord(0, 2): aluminium_plantspritelayout_concrete;
 relative_coord(0, 3): aluminium_plantspritelayout_big_hall_right;
 relative_coord(1, 2): aluminium_plantspritelayout_big_hall_left;
 relative_coord(1, 3): aluminium_plantspritelayout_big_hall_centre;
 relative_coord(2, 0): aluminium_plantspritelayout_big_office;
 relative_coord(2, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(2, 2): aluminium_plantspritelayout_bigtank;
 relative_coord(2, 3): aluminium_plantspritelayout_storage_tanks;
 relative_coord(3, 0): aluminium_plantspritelayout_chimney_anim;
 relative_coord(3, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(3, 2): aluminium_plantspritelayout_concrete;
 relative_coord(3, 3): aluminium_plantspritelayout_forklift;
 relative_coord(4, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 3): aluminium_plantspritelayout_small_office;
 relative_coord(5, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(5, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(5, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(5, 3): aluminium_plantspritelayout_vehicles;
 relative_coord(7, 1): aluminium_plantspritelayout_transformer;
 aluminium_plantspritelayout_long_hall;
}

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plantlayout_2, relative_pos) {
 relative_coord(0, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(0, 1): aluminium_plantspritelayout_concrete;
 relative_coord(0, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(0, 3): aluminium_plantspritelayout_concrete;
 relative_coord(0, 4): aluminium_plantspritelayout_big_hall_right;
 relative_coord(1, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(1, 1): aluminium_plantspritelayout_chimney_anim;
 relative_coord(1, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(1, 3): aluminium_plantspritelayout_big_hall_left;
 relative_coord(1, 4): aluminium_plantspritelayout_big_hall_centre;
 relative_coord(2, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(2, 1): aluminium_plantspritelayout_big_office;
 relative_coord(2, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(2, 3): aluminium_plantspritelayout_bigtank;
 relative_coord(2, 4): aluminium_plantspritelayout_storage_tanks;
 relative_coord(3, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(3, 1): aluminium_plantspritelayout_concrete;
 relative_coord(3, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(3, 3): aluminium_plantspritelayout_forklift;
 relative_coord(3, 4): aluminium_plantspritelayout_concrete;
 relative_coord(4, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 1): aluminium_plantspritelayout_transformer;
 relative_coord(4, 2): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 3): aluminium_plantspritelayout_small_office;
 relative_coord(4, 4): aluminium_plantspritelayout_vehicles;
 aluminium_plantspritelayout_long_hall;
}

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plantlayout_3, relative_pos) {
 relative_coord(0, 0): aluminium_plantspritelayout_transformer;
 relative_coord(1, 0): aluminium_plantspritelayout_big_office;
 relative_coord(1, 1): aluminium_plantspritelayout_small_office;
 relative_coord(2, 0): aluminium_plantspritelayout_chimney_anim;
 relative_coord(2, 1): aluminium_plantspritelayout_forklift;
 relative_coord(3, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(3, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(4, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(5, 0): aluminium_plantspritelayout_long_hall;
 relative_coord(5, 1): aluminium_plantspritelayout_long_hall;
 relative_coord(6, 0): aluminium_plantspritelayout_vehicles;
 relative_coord(6, 1): aluminium_plantspritelayout_vehicles;
 relative_coord(7, 0): aluminium_plantspritelayout_forklift;
 relative_coord(7, 1): aluminium_plantspritelayout_big_hall_right;
 relative_coord(8, 0): aluminium_plantspritelayout_big_hall_left;
 relative_coord(8, 1): aluminium_plantspritelayout_big_hall_centre;
 relative_coord(9, 0): aluminium_plantspritelayout_bigtank;
 relative_coord(9, 1): aluminium_plantspritelayout_storage_tanks;
 aluminium_plantspritelayout_long_hall;
}

switch(FEAT_INDUSTRYTILES, PARENT, aluminium_plantlayout, layout_num) {
 2: aluminium_plantlayout_2;
 3: aluminium_plantlayout_3;
 aluminium_plantlayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, aluminium_planttile_decide_arctic, [ STORE_TEMP( (nearby_tile_height(0, 0) < (snowline_height - 8)) * GROUNDSPRITE_NORMAL, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4493 * (nearby_tile_height(0, 0) < (snowline_height )), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_height(0, 0) < (snowline_height + 1)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4531 * (nearby_tile_height(0, 0) < (snowline_height + 2)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4550 * (nearby_tile_height(0, 0) >= (snowline_height + 2)), 0) ]) { aluminium_plantlayout; } switch (FEAT_INDUSTRYTILES, SELF, aluminium_planttile_decide_tropic, [ STORE_TEMP( (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT) * GROUNDSPRITE_DESERT, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0,-1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * GROUNDSPRITE_NORMAL, 0) ]) { aluminium_plantlayout; } switch (FEAT_INDUSTRYTILES, SELF, aluminium_planttile_decide_temperate, [ STORE_TEMP( GROUNDSPRITE_NORMAL, 0) ]) { aluminium_plantlayout; } switch (FEAT_INDUSTRYTILES, SELF, aluminium_plantground_switch, [ STORE_TEMP(0, 0), climate ]) { CLIMATE_ARCTIC: aluminium_planttile_decide_arctic; CLIMATE_TROPIC: aluminium_planttile_decide_tropic; aluminium_planttile_decide_temperate; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, aluminium_planttile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, aluminium_planttile_player, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; aluminium_planttile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, aluminium_planttile_location, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: aluminium_planttile_player; return CB_RESULT_LOCATION_DISALLOW; }

switch(FEAT_INDUSTRYTILES, SELF, aluminium_plantanim_control, (extra_callback_info1 & 14)) {
 0: return 0;
 1: return 2;
 2: return 4;
 3: return 6;
 4: return 8;
 5: return 10;
 6: return 12;
 7: return 14;
 8: return 16;
 9: return 18;
 10: return 20;
 11: return 22;
 12: return 24;
 return CB_RESULT_START_ANIMATION;
}

item(FEAT_INDUSTRYTILES, aluminium_planttile, 185) {
 property {
  substitute: 0;
  accepted_cargos: [[AORE, 8], [RFPR, 8], [SCMT, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 47];
  animation_speed: 2;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: aluminium_plantanim_control;
  tile_check: aluminium_planttile_location;
  aluminium_plantground_switch;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_aluminium_plant_1 {
 0, 2: aluminium_planttile;
 0, 3: aluminium_planttile;
 1, 2: aluminium_planttile;
 1, 3: aluminium_planttile;
 2, 0: aluminium_planttile;
 2, 1: aluminium_planttile;
 2, 2: aluminium_planttile;
 2, 3: aluminium_planttile;
 3, 0: aluminium_planttile;
 3, 1: aluminium_planttile;
 3, 2: aluminium_planttile;
 3, 3: aluminium_planttile;
 4, 0: aluminium_planttile;
 4, 1: aluminium_planttile;
 4, 2: aluminium_planttile;
 4, 3: aluminium_planttile;
 5, 0: aluminium_planttile;
 5, 1: aluminium_planttile;
 5, 2: aluminium_planttile;
 5, 3: aluminium_planttile;
 7, 1: aluminium_planttile;
}

tilelayout tilelayout_aluminium_plant_2 {
 0, 0: aluminium_planttile;
 0, 1: aluminium_planttile;
 0, 2: aluminium_planttile;
 0, 3: aluminium_planttile;
 0, 4: aluminium_planttile;
 1, 0: aluminium_planttile;
 1, 1: aluminium_planttile;
 1, 2: aluminium_planttile;
 1, 3: aluminium_planttile;
 1, 4: aluminium_planttile;
 2, 0: aluminium_planttile;
 2, 1: aluminium_planttile;
 2, 2: aluminium_planttile;
 2, 3: aluminium_planttile;
 2, 4: aluminium_planttile;
 3, 0: aluminium_planttile;
 3, 1: aluminium_planttile;
 3, 2: aluminium_planttile;
 3, 3: aluminium_planttile;
 3, 4: aluminium_planttile;
 4, 0: aluminium_planttile;
 4, 1: aluminium_planttile;
 4, 2: aluminium_planttile;
 4, 3: aluminium_planttile;
 4, 4: aluminium_planttile;
}

tilelayout tilelayout_aluminium_plant_3 {
 0, 0: aluminium_planttile;
 1, 0: aluminium_planttile;
 1, 1: aluminium_planttile;
 2, 0: aluminium_planttile;
 2, 1: aluminium_planttile;
 3, 0: aluminium_planttile;
 3, 1: aluminium_planttile;
 4, 0: aluminium_planttile;
 4, 1: aluminium_planttile;
 5, 0: aluminium_planttile;
 5, 1: aluminium_planttile;
 6, 0: aluminium_planttile;
 6, 1: aluminium_planttile;
 7, 0: aluminium_planttile;
 7, 1: aluminium_planttile;
 8, 0: aluminium_planttile;
 8, 1: aluminium_planttile;
 9, 0: aluminium_planttile;
 9, 1: aluminium_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 346 "sprites/nml/industries/aluminium_plant.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, aluminium_plantaluminium_plant, industry_distance(aluminium_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, aluminium_plantbauxite_mine, industry_distance(bauxite_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; aluminium_plantaluminium_plant; }
switch (FEAT_INDUSTRIES, SELF, aluminium_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; aluminium_plantbauxite_mine; }

switch(FEAT_INDUSTRIES, SELF, aluminium_plantcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (aluminium_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, aluminium_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 4,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(2) * 4,
       2
   ),
   STORE_PERM( 4 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 2,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 aluminium_plantsimple_produce;
}
# 359 "sprites/nml/industries/aluminium_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, aluminium_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, aluminium_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, aluminium_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: aluminium_plantincrease_closure_counter;
 aluminium_plantreset_closure_counter;
}
# 360 "sprites/nml/industries/aluminium_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, aluminium_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, aluminium_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 aluminium_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, aluminium_plantcheck_closure, allow_close_secondary) {
 1..255: aluminium_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 361 "sprites/nml/industries/aluminium_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, aluminium_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, aluminium_plantextra_text, [



   show_debug_texts
   ]) {
 1: aluminium_plantextra_text_debug;
 return string(STR_EXTRA_ALUMINUM_PLANT);
}
# 363 "sprites/nml/industries/aluminium_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, aluminium_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, aluminium_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: aluminium_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, aluminium_plantcheck_availability, current_date) {
 date(1923,1,1) .. date(5000000,12,31): aluminium_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 365 "sprites/nml/industries/aluminium_plant.pnml" 2

item(FEAT_INDUSTRIES, aluminium_plant, 0x08) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_aluminium_plant_1,
    tilelayout_aluminium_plant_2,
    tilelayout_aluminium_plant_3
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_ALUMINIUM_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_ALUMINIUM_PLANT));
  prod_cargo_types: [STEL];
  accept_cargo_types: [AORE, RFPR, SCMT];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 200;
  map_colour: 175;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: aluminium_plantproduce;
  construction_probability:aluminium_plantcheck_availability;
  monthly_prod_change: aluminium_plantcheck_production_level;
  random_prod_change: aluminium_plantcheck_closure;
  extra_text_industry: aluminium_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_ALUMINIUM_PLANT));
  colour: aluminium_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 408 "sprites/nml/industries/aluminium_plant.pnml" 2
# 31 "<stdin>" 2
# 1 "sprites/nml/industries/arable_farm.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(arable_farmspriteset_1) { tmpl_building_sprite_filename( 10, 10, 59, -28, "sprites/graphics/industries/arablefarm.png") }
spriteset(arable_farmspriteset_2) { tmpl_building_sprite_filename( 80, 10, 59, -28, "sprites/graphics/industries/arablefarm.png") }
spriteset(arable_farmspriteset_3) { tmpl_building_sprite_filename(150, 10, 59, -28, "sprites/graphics/industries/arablefarm.png") }
spriteset(arable_farmspriteset_4) { tmpl_building_sprite_filename(220, 10, 59, -28, "sprites/graphics/industries/arablefarm.png") }
spriteset(arable_farmspriteset_5) { tmpl_building_sprite_filename(290, 10, 59, -28, "sprites/graphics/industries/arablefarm.png") }

spritelayout arable_farmspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: arable_farmspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }
spritelayout arable_farmspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: arable_farmspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }
spritelayout arable_farmspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: arable_farmspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }
spritelayout arable_farmspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: arable_farmspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }
spritelayout arable_farmspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: arable_farmspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

switch(FEAT_INDUSTRYTILES, SELF, arable_farmlayout_1, relative_pos) {
 relative_coord(1, 0): arable_farmspritelayout_1;
 relative_coord(1, 1): arable_farmspritelayout_2;
 relative_coord(0, 2): arable_farmspritelayout_3;
 relative_coord(2, 1): arable_farmspritelayout_4;
 arable_farmspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, arable_farmlayout_2, relative_pos) {
 relative_coord(0, 0): arable_farmspritelayout_5;
 relative_coord(0, 1): arable_farmspritelayout_4;
 relative_coord(1, 0): arable_farmspritelayout_1;
 relative_coord(1, 1): arable_farmspritelayout_2;
 arable_farmspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, arable_farmlayout_3, relative_pos) {
 relative_coord(0, 0): arable_farmspritelayout_1;
 relative_coord(0, 1): arable_farmspritelayout_2;
 relative_coord(1, 0): arable_farmspritelayout_5;
 relative_coord(2, 0): arable_farmspritelayout_4;
 arable_farmspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, PARENT, arable_farmtile_spritelayout, layout_num) {
 1: arable_farmlayout_1;
 2: arable_farmlayout_2;
 3: arable_farmlayout_3;
 arable_farmspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, arable_farmtile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, arable_farmtile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; arable_farmtile_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, arable_farmtile_desert_check, (nearby_tile_terrain_type( 1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 1) == TILETYPE_DESERT) ) { 1: return CB_RESULT_LOCATION_DISALLOW; arable_farmtile_player_check; }
switch(FEAT_INDUSTRYTILES, SELF, arable_farmtile_location_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: arable_farmtile_desert_check; return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE); }

item(FEAT_INDUSTRYTILES, arable_farmtile, 160) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: arable_farmtile_location_check;
  arable_farmtile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_arable_farm_1 {
 1, 0: arable_farmtile;
 1, 1: arable_farmtile;
 0, 2: arable_farmtile;
 2, 1: arable_farmtile;
 0, 1: arable_farmtile;
}

tilelayout tilelayout_arable_farm_2 {
 0, 0: arable_farmtile;
 0, 1: arable_farmtile;
 1, 0: arable_farmtile;
 1, 1: arable_farmtile;
 2, 0: arable_farmtile;
}

tilelayout tilelayout_arable_farm_3 {
 0, 0: arable_farmtile;
 0, 1: arable_farmtile;
 1, 0: arable_farmtile;
 2, 0: arable_farmtile;
 2, 1: arable_farmtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, arable_farmarable_farm, industry_count(arable_farm) * 1 / 2 / industry_clusters != 0 && ( industry_distance(arable_farm) < 10 || industry_distance(arable_farm) > 36) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, arable_farmgrain_mill, industry_distance(grain_mill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; arable_farmarable_farm; }
switch (FEAT_INDUSTRIES, SELF, arable_farmbrewery, industry_distance(brewery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; arable_farmgrain_mill; }
switch (FEAT_INDUSTRIES, SELF, arable_farmsugar_refinery, industry_distance(sugar_refinery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; arable_farmbrewery; }
switch (FEAT_INDUSTRIES, SELF, arable_farmbiorefinery, industry_distance(biorefinery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; arable_farmsugar_refinery; }
switch (FEAT_INDUSTRIES, SELF, arable_farmcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; arable_farmbiorefinery; }

switch(FEAT_INDUSTRIES, SELF, arable_farmcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(arable_farmproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, arable_farmproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 arable_farmproduction;
}
# 118 "sprites/nml/industries/arable_farm.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, arable_farmcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, arable_farmrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, arable_farmrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, arable_farmdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: arable_farmrandom_slow_decrease;
 arable_farmrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, arable_farmcheck_decrease_production, allow_primary_production_decrease) {
 1..255: arable_farmdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, arable_farmrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, arable_farmcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: arable_farmrandom_increase;
 arable_farmcheck_decrease_production;
}
# 119 "sprites/nml/industries/arable_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, arable_farmextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 121 "sprites/nml/industries/arable_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, arable_farmcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, arable_farmavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: arable_farmcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, arable_farmcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): arable_farmavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 123 "sprites/nml/industries/arable_farm.pnml" 2

item(FEAT_INDUSTRIES, arable_farm, 0x1A) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_arable_farm_1,
    tilelayout_arable_farm_2,
    tilelayout_arable_farm_3
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_FARM;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_FARM;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_ARABLE_FARM);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_ARABLE_FARM));
  prod_cargo_types: [GRAI, SGBT];
  accept_cargo_types: [FMSP];
  prod_multiplier: [7, 7];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 1;
  conflicting_ind_types: [];
  prob_random: 18;
  prob_in_game: 4;
  prospect_chance: 0.75;
  fund_cost_multiplier: 55;
  map_colour: 208;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY,
                                  IND_FLAG_PLANT_FIELDS_WHEN_BUILT
                                 );
 }

 /* Economy specific cargo */
 if ((climate == CLIMATE_TROPICAL) && 1) { property { prod_cargo_types: [GRAI, SGCN]; } }

 graphics {
  produce_cargo_arrival: arable_farmproduce;
  construction_probability:arable_farmcheck_availability;
  monthly_prod_change: arable_farmcheck_production_level;
  random_prod_change: arable_farmcheck_closure;
  build_prod_change: 4;
  extra_text_fund: return string(STR_FUND_ARABLE_FARM);
  extra_text_industry: arable_farmextra_text;
  colour: arable_farmcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 173 "sprites/nml/industries/arable_farm.pnml" 2
# 32 "<stdin>" 2
# 1 "sprites/nml/industries/bauxite_mine.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



spritelayout bauxite_minespritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 2039; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout bauxite_minespritelayout_2 {
 ground {
  sprite: 2022;
 }
 building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

spritelayout bauxite_minespritelayout_3 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: 2030;
  xoffset: 2;
  yoffset: 3;
  xextent: 13;
  yextent: 12;
  zextent: 12;
 }
 building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

spritelayout bauxite_minespritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 2036; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
spritelayout bauxite_minespritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 2033; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

switch(FEAT_INDUSTRYTILES, SELF, bauxite_minelayout_1, relative_pos) {
 relative_coord(0, 0): bauxite_minespritelayout_1;
 relative_coord(2, 0): bauxite_minespritelayout_5;
 relative_coord(3, 0): bauxite_minespritelayout_1;
 relative_coord(0, 1): bauxite_minespritelayout_1;
 relative_coord(2, 1): bauxite_minespritelayout_3;
 relative_coord(3, 1): bauxite_minespritelayout_1;
 relative_coord(4, 1): bauxite_minespritelayout_1;
 relative_coord(0, 2): bauxite_minespritelayout_1;
 relative_coord(2, 2): bauxite_minespritelayout_4;
 relative_coord(3, 2): bauxite_minespritelayout_2;
 bauxite_minespritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, bauxite_minetile_spritelayout, layout_num) {
 1: bauxite_minelayout_1;
 bauxite_minespritelayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, bauxite_minetile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { bauxite_minetile_spritelayout; }
switch (FEAT_INDUSTRYTILES, SELF, bauxite_minetile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { bauxite_minetile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, bauxite_minetile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { bauxite_minetile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, bauxite_minenearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, bauxite_minelocation_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; bauxite_minenearby_industry; }

item(FEAT_INDUSTRYTILES, bauxite_minetile, 197) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  tile_check: bauxite_minelocation_check;
  bauxite_minetile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_bauxite_mine_1 {
 0, 0: bauxite_minetile;
 2, 0: bauxite_minetile;
 3, 0: bauxite_minetile;
 0, 1: bauxite_minetile;
 2, 1: bauxite_minetile;
 3, 1: bauxite_minetile;
 4, 1: bauxite_minetile;
 0, 2: bauxite_minetile;
 2, 2: bauxite_minetile;
 3, 2: bauxite_minetile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, bauxite_minebauxite_mine, industry_count(bauxite_mine) * 2 / 3 / industry_clusters != 0 && ( industry_distance(bauxite_mine) < 20 || industry_distance(bauxite_mine) > 60) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, bauxite_minealuminium_plant, industry_distance(aluminium_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; bauxite_minebauxite_mine; }
switch (FEAT_INDUSTRIES, SELF, bauxite_minecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; bauxite_minealuminium_plant; }

switch(FEAT_INDUSTRIES, SELF, bauxite_minecolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(bauxite_mineproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, bauxite_mineproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 bauxite_mineproduction;
}
# 116 "sprites/nml/industries/bauxite_mine.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, bauxite_minecheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, bauxite_minerandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, bauxite_minerandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, bauxite_minedecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: bauxite_minerandom_slow_decrease;
 bauxite_minerandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, bauxite_minecheck_decrease_production, allow_primary_production_decrease) {
 1..255: bauxite_minedecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, bauxite_minerandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, bauxite_minecheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: bauxite_minerandom_increase;
 bauxite_minecheck_decrease_production;
}
# 117 "sprites/nml/industries/bauxite_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, bauxite_mineextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 119 "sprites/nml/industries/bauxite_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, bauxite_minecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, bauxite_mineavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: bauxite_minecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, bauxite_minecheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): bauxite_mineavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 121 "sprites/nml/industries/bauxite_mine.pnml" 2


item(FEAT_INDUSTRIES, bauxite_mine, 0x05) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_bauxite_mine_1
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_BAUXITE_MINE);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_BAUXITE_MINE));
  prod_cargo_types: [AORE];
  accept_cargo_types: [ENSP];
  prod_multiplier: [19, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 5;
  prospect_chance: 0.75;
  fund_cost_multiplier: 238;
  map_colour: 71;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: bauxite_mineproduce;
  construction_probability:bauxite_minecheck_availability;
  monthly_prod_change: bauxite_minecheck_production_level;
  random_prod_change: bauxite_minecheck_closure;
  build_prod_change: 4;
  extra_text_industry: bauxite_mineextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_BAUXITE_MINE));
  colour: bauxite_minecolour;
 }
}
# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 163 "sprites/nml/industries/bauxite_mine.pnml" 2
# 33 "<stdin>" 2
# 1 "sprites/nml/industries/biorefinery.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/biorefinery.pnml" 2
# 1 "sprites/nml/industries/../templates/smoke_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Creates a small puff of dark smoke that slowly rises until dissapearing. */
# 20 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a small puff of white smoke that slowly rises until dissapearing. */
# 32 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a long column of white smoke. */
# 10 "sprites/nml/industries/biorefinery.pnml" 2



spriteset(biorefineryspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
}

spriteset(biorefineryspriteset_1) { tmpl_building_sprite_filename(500, 10, 66, -35, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_2) { tmpl_building_sprite_filename(570, 10, 66, -35, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_3) { tmpl_building_sprite_filename(710, 10, 66, -35, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_4) { tmpl_building_sprite_filename( 80, 10, 88, -58, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_5) { tmpl_building_sprite_filename(150, 10, 88, -59, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_6) { tmpl_building_sprite_filename(220, 10, 88, -64, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_7) { tmpl_building_sprite_filename(360, 10, 73, -45, "sprites/graphics/industries/biorefinery.png") }
spriteset(biorefineryspriteset_8) { tmpl_building_sprite_filename(430, 10, 66, -38, "sprites/graphics/industries/biorefinery.png") }

spritelayout biorefineryspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_6_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 1; yoffset: 0; zoffset: 62; xextent: 15; yextent: 7; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 1; yoffset: -3; zoffset: 62; xextent: 15; yextent: 7; zextent: 7; }
}

spritelayout biorefineryspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: biorefineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: biorefineryspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout biorefineryspritelayout_9 {
 ground {
  sprite: biorefineryspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, biorefinerylayout_1, relative_pos) {
 relative_coord(0, 0): biorefineryspritelayout_9;
 relative_coord(0, 2): biorefineryspritelayout_2;
 relative_coord(0, 3): biorefineryspritelayout_1;
 relative_coord(0, 4): biorefineryspritelayout_1;
 relative_coord(1, 0): biorefineryspritelayout_8;
 relative_coord(1, 2): biorefineryspritelayout_4;
 relative_coord(1, 3): biorefineryspritelayout_5;
 relative_coord(1, 4): biorefineryspritelayout_6_anim;
 relative_coord(2, 0): biorefineryspritelayout_7;
 relative_coord(2, 2): biorefineryspritelayout_9;
 relative_coord(2, 3): biorefineryspritelayout_3;
 relative_coord(2, 4): biorefineryspritelayout_9;
 biorefineryspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, biorefinerylayout_2, relative_pos) {
 relative_coord(0, 0): biorefineryspritelayout_8;
 relative_coord(0, 1): biorefineryspritelayout_4;
 relative_coord(0, 2): biorefineryspritelayout_5;
 relative_coord(0, 3): biorefineryspritelayout_6_anim;
 relative_coord(0, 4): biorefineryspritelayout_9;
 relative_coord(1, 0): biorefineryspritelayout_7;
 relative_coord(1, 1): biorefineryspritelayout_9;
 relative_coord(1, 2): biorefineryspritelayout_3;
 relative_coord(1, 3): biorefineryspritelayout_9;
 relative_coord(1, 4): biorefineryspritelayout_9;
 relative_coord(2, 0): biorefineryspritelayout_9;
 relative_coord(2, 1): biorefineryspritelayout_9;
 relative_coord(2, 2): biorefineryspritelayout_1;
 relative_coord(2, 3): biorefineryspritelayout_1;
 relative_coord(2, 4): biorefineryspritelayout_2;
 biorefineryspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, biorefinerylayout_3, relative_pos) {
 relative_coord(0, 0): biorefineryspritelayout_2;
 relative_coord(0, 2): biorefineryspritelayout_2;
 relative_coord(0, 3): biorefineryspritelayout_9;
 relative_coord(1, 0): biorefineryspritelayout_9;
 relative_coord(1, 2): biorefineryspritelayout_4;
 relative_coord(1, 3): biorefineryspritelayout_3;
 relative_coord(2, 0): biorefineryspritelayout_8;
 relative_coord(2, 2): biorefineryspritelayout_5;
 relative_coord(2, 3): biorefineryspritelayout_6_anim;
 relative_coord(3, 0): biorefineryspritelayout_7;
 relative_coord(3, 2): biorefineryspritelayout_3;
 relative_coord(3, 3): biorefineryspritelayout_9;
 relative_coord(4, 0): biorefineryspritelayout_9;
 relative_coord(4, 2): biorefineryspritelayout_1;
 relative_coord(4, 3): biorefineryspritelayout_1;
 biorefineryspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, biorefinerylayout_4, relative_pos) {
 relative_coord(0, 0): biorefineryspritelayout_1;
 relative_coord(0, 1): biorefineryspritelayout_9;
 relative_coord(0, 2): biorefineryspritelayout_8;
 relative_coord(1, 0): biorefineryspritelayout_1;
 relative_coord(1, 1): biorefineryspritelayout_9;
 relative_coord(1, 2): biorefineryspritelayout_7;
 relative_coord(2, 0): biorefineryspritelayout_2;
 relative_coord(2, 1): biorefineryspritelayout_9;
 relative_coord(2, 2): biorefineryspritelayout_9;
 relative_coord(3, 0): biorefineryspritelayout_4;
 relative_coord(3, 1): biorefineryspritelayout_5;
 relative_coord(3, 2): biorefineryspritelayout_6_anim;
 relative_coord(4, 0): biorefineryspritelayout_2;
 relative_coord(4, 1): biorefineryspritelayout_3;
 relative_coord(4, 2): biorefineryspritelayout_9;
 biorefineryspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, PARENT, biorefinerylayout, layout_num) {
 1: biorefinerylayout_1;
 2: biorefinerylayout_2;
 3: biorefinerylayout_3;
 4: biorefinerylayout_4;
 biorefineryspritelayout_9;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, biorefinerynearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, biorefineryplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; biorefinerynearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, biorefinerylocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: biorefineryplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, biorefinerytile, 166) {
 property {
  substitute: 0;
  accepted_cargos: [[GRAI, 8], [SGBT, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
  animation_info: [ANIMATION_LOOPING, 7];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 /* Economy specific tile acceptance */
 if ((climate == CLIMATE_TROPICAL) && 1) { property { accepted_cargos: [[GRAI, 8], [SGCN, 8]]; } }

 graphics {
  tile_check: biorefinerylocation_check;
  biorefinerylayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_biorefinery_1 {
 0, 0: biorefinerytile;
 0, 2: biorefinerytile;
 0, 3: biorefinerytile;
 0, 4: biorefinerytile;
 1, 0: biorefinerytile;
 1, 2: biorefinerytile;
 1, 3: biorefinerytile;
 1, 4: biorefinerytile;
 2, 0: biorefinerytile;
 2, 2: biorefinerytile;
 2, 3: biorefinerytile;
 2, 4: biorefinerytile;
}

tilelayout tilelayout_biorefinery_2 {
 0, 0: biorefinerytile;
 0, 1: biorefinerytile;
 0, 2: biorefinerytile;
 0, 3: biorefinerytile;
 0, 4: biorefinerytile;
 1, 0: biorefinerytile;
 1, 1: biorefinerytile;
 1, 2: biorefinerytile;
 1, 3: biorefinerytile;
 1, 4: biorefinerytile;
 2, 0: biorefinerytile;
 2, 1: biorefinerytile;
 2, 2: biorefinerytile;
 2, 3: biorefinerytile;
 2, 4: biorefinerytile;
}

tilelayout tilelayout_biorefinery_3 {
 0, 0: biorefinerytile;
 0, 2: biorefinerytile;
 0, 3: biorefinerytile;
 1, 0: biorefinerytile;
 1, 2: biorefinerytile;
 1, 3: biorefinerytile;
 2, 0: biorefinerytile;
 2, 2: biorefinerytile;
 2, 3: biorefinerytile;
 3, 0: biorefinerytile;
 3, 2: biorefinerytile;
 3, 3: biorefinerytile;
 4, 0: biorefinerytile;
 4, 2: biorefinerytile;
 4, 3: biorefinerytile;
}

tilelayout tilelayout_biorefinery_4 {
 0, 0: biorefinerytile;
 0, 1: biorefinerytile;
 0, 2: biorefinerytile;
 1, 0: biorefinerytile;
 1, 1: biorefinerytile;
 1, 2: biorefinerytile;
 2, 0: biorefinerytile;
 2, 1: biorefinerytile;
 2, 2: biorefinerytile;
 3, 0: biorefinerytile;
 3, 1: biorefinerytile;
 3, 2: biorefinerytile;
 4, 0: biorefinerytile;
 4, 1: biorefinerytile;
 4, 2: biorefinerytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 250 "sprites/nml/industries/biorefinery.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */



switch (FEAT_INDUSTRIES, SELF, biorefinerybiorefinery, industry_distance(biorefinery)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, biorefineryarable_farm, industry_distance(arable_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; biorefinerybiorefinery; }
switch (FEAT_INDUSTRIES, SELF, biorefinerycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; biorefineryarable_farm; }

switch(FEAT_INDUSTRIES, SELF, biorefinerycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (biorefinerysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, biorefineryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 8 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 8 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 biorefinerysimple_produce;
}
# 264 "sprites/nml/industries/biorefinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, biorefineryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, biorefineryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, biorefinerycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: biorefineryincrease_closure_counter;
 biorefineryreset_closure_counter;
}
# 265 "sprites/nml/industries/biorefinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, biorefineryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, biorefineryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 biorefineryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, biorefinerycheck_closure, allow_close_secondary) {
 1..255: biorefineryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 266 "sprites/nml/industries/biorefinery.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, biorefineryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, biorefineryextra_text, [



   show_debug_texts
   ]) {
 1: biorefineryextra_text_debug;
 return string(STR_EXTRA_BIOREFINERY);
}
# 268 "sprites/nml/industries/biorefinery.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, biorefinerycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, biorefineryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: biorefinerycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, biorefinerycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): biorefineryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 270 "sprites/nml/industries/biorefinery.pnml" 2

item(FEAT_INDUSTRIES, biorefinery, 0x2E) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_biorefinery_1,
    tilelayout_biorefinery_2,
    tilelayout_biorefinery_3,
    tilelayout_biorefinery_4
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_BIOREFINERY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_BIOREFINERY));
  prod_cargo_types: [RFPR, PETR];
  accept_cargo_types: [GRAI, SGBT];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 170;
  map_colour: 186;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_AIRPLANE_CAN_EXPLODE);
 }

 /* Economy specific cargo */
 if ((climate == CLIMATE_TROPICAL) && 1) { property { accept_cargo_types: [GRAI, SGCN]; } }

 graphics {
  produce_cargo_arrival: biorefineryproduce;
  construction_probability:biorefinerycheck_availability;
  monthly_prod_change: biorefinerycheck_production_level;
  random_prod_change: biorefinerycheck_closure;
  extra_text_industry: biorefineryextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_BIOREFINERY));
  colour: biorefinerycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 318 "sprites/nml/industries/biorefinery.pnml" 2
# 34 "<stdin>" 2
# 1 "sprites/nml/industries/brewery.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(breweryspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(breweryspriteset_1) {
 tmpl_building_sprite_filename( 10, 60, 91, -60, "sprites/graphics/industries/brewery.png")
 tmpl_building_sprite_filename( 10, 60, 91, -60, "sprites/graphics/industries/brewery_snow.png")
}

spriteset(breweryspriteset_2) {
 tmpl_building_sprite_filename( 80, 60, 91, -60, "sprites/graphics/industries/brewery.png")
 tmpl_building_sprite_filename( 80, 60, 91, -60, "sprites/graphics/industries/brewery_snow.png")
}

spriteset(breweryspriteset_3) {
 tmpl_building_sprite_filename( 150, 60, 91, -60, "sprites/graphics/industries/brewery.png")
 tmpl_building_sprite_filename( 150, 60, 91, -60, "sprites/graphics/industries/brewery_snow.png")
}

spritelayout breweryspritelayout_1_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: breweryspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 3079 + (animation_frame / 4); xoffset: 8; yoffset: 0; zoffset: 55 + animation_frame; xextent: 11; zextent: 7; hide_sprite: animation_frame > 19; }
}

spritelayout breweryspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: breweryspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout breweryspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: breweryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: breweryspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

switch(FEAT_INDUSTRYTILES, SELF, brewerylayout_1, relative_pos) {
 relative_coord(1, 0): breweryspritelayout_1_anim;
 relative_coord(1, 2): breweryspritelayout_2;
 breweryspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, brewerylayout_2, relative_pos) {
 relative_coord(1, 0): breweryspritelayout_2;
 relative_coord(2, 0): breweryspritelayout_1_anim;
 breweryspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, brewerylayout_3, relative_pos) {
 relative_coord(1, 0): breweryspritelayout_1_anim;
 relative_coord(1, 1): breweryspritelayout_2;
 breweryspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, brewerylayout_4, relative_pos) {
 relative_coord(0, 0): breweryspritelayout_1_anim;
 relative_coord(2, 0): breweryspritelayout_2;
 breweryspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, brewerylayout_5, relative_pos) {
 relative_coord(1, 0): breweryspritelayout_2;
 relative_coord(1, 1): breweryspritelayout_2;
 relative_coord(2, 0): breweryspritelayout_1_anim;
 breweryspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, PARENT, brewerytile_spritelayout, layout_num) {
 1: brewerylayout_1;
 2: brewerylayout_2;
 3: brewerylayout_3;
 4: brewerylayout_4;
 5: brewerylayout_5;
 brewerylayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, brewerytile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, brewerytile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; brewerytile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, brewerytile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: brewerytile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

/* Return a random animation frame from the extra_callback_info1 */
switch(FEAT_INDUSTRYTILES, SELF, brewerytile_anim_control, (extra_callback_info1 & 14)) {
 0: return 0;
 1: return 2;
 2: return 4;
 3: return 6;
 4: return 8;
 5: return 10;
 6: return 12;
 7: return 14;
 8: return 16;
 9: return 18;
 10: return 20;
 11: return 22;
 12: return 24;
 return CB_RESULT_NEXT_FRAME;
}

item(FEAT_INDUSTRYTILES, brewerytile, 161) {
 property {
  substitute: 0;
  accepted_cargos: [[FRVG, 8], [GRAI, 8], [MNSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
  animation_info: [ANIMATION_LOOPING, 71];
  animation_speed: 2;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }
 graphics {
  anim_control: brewerytile_anim_control;
  tile_check: brewerytile_location_check;
  brewerytile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_brewery_1 {
 0, 2: brewerytile;
 1, 0: brewerytile;
 1, 2: brewerytile;
}

tilelayout tilelayout_brewery_2 {
 0, 0: brewerytile;
 1, 0: brewerytile;
 2, 0: brewerytile;
}

tilelayout tilelayout_brewery_3 {
 0, 1: brewerytile;
 1, 0: brewerytile;
 1, 1: brewerytile;
}

tilelayout tilelayout_brewery_4 {
 0, 0: brewerytile;
 1, 0: brewerytile;
 2, 0: brewerytile;
}

tilelayout tilelayout_brewery_5 {
 0, 0: brewerytile;
 0, 1: brewerytile;
 1, 0: brewerytile;
 1, 1: brewerytile;
 2, 0: brewerytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 172 "sprites/nml/industries/brewery.pnml"
/* extra text template */





switch(FEAT_INDUSTRIES, SELF, brewerycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (brewerysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, breweryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 2,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 brewerysimple_produce;
}
# 181 "sprites/nml/industries/brewery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, breweryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, breweryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, brewerycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: breweryincrease_closure_counter;
 breweryreset_closure_counter;
}
# 182 "sprites/nml/industries/brewery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, breweryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, breweryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 breweryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, brewerycheck_closure, allow_close_secondary) {
 1..255: breweryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 183 "sprites/nml/industries/brewery.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, breweryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, breweryextra_text, [



   show_debug_texts
   ]) {
 1: breweryextra_text_debug;
 return string(STR_EXTRA_BREWERY);
}
# 185 "sprites/nml/industries/brewery.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, brewerycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, breweryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: brewerycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, brewerycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): breweryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 187 "sprites/nml/industries/brewery.pnml" 2

item(FEAT_INDUSTRIES, brewery, 0x23) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_brewery_1,
    tilelayout_brewery_2,
    tilelayout_brewery_3,
    tilelayout_brewery_4,
    tilelayout_brewery_5
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_BREWERY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_BREWERY));
  prod_cargo_types: [BEER];
  accept_cargo_types: [MNSP, FRVG, GRAI];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 50;
  map_colour: 191;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: breweryproduce;
  construction_probability:brewerycheck_availability;
  monthly_prod_change: brewerycheck_production_level;
  random_prod_change: brewerycheck_closure;
  extra_text_industry: breweryextra_text;
  colour: brewerycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 231 "sprites/nml/industries/brewery.pnml" 2
# 35 "<stdin>" 2

# 1 "sprites/nml/industries/brickworks.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



/* shared ground tile by all sprite layouts of this industry */
spriteset(brickworksspriteset_ground, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(150, 10) }

spriteset(brickworksspriteset_sand, "sprites/graphics/industries/brickworks.png") { tmpl_ground_tile(290, 10) }
spriteset(brickworksspriteset_clay, "sprites/graphics/industries/brickworks.png") { tmpl_ground_tile(360, 10) }

spriteset(brickworksspriteset_1, "sprites/graphics/industries/brickworks.png") { tmpl_building_sprite( 10, 10, 101, -64) }
spriteset(brickworksspriteset_2, "sprites/graphics/industries/brickworks.png") { tmpl_building_sprite( 80, 10, 101, -59) }
spriteset(brickworksspriteset_3, "sprites/graphics/industries/brickworks.png") { tmpl_building_sprite(150, 10, 101, -71) }
spriteset(brickworksspriteset_4, "sprites/graphics/industries/brickworks.png") { tmpl_building_sprite(220, 10, 101, -69) }

spritelayout brickworksspritelayout_sand_staithe { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_sand; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } }

spritelayout brickworksspritelayout_clay_staithe { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_clay; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } }

spritelayout brickworksspritelayout_1_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building {
  sprite: 3701 + ((animation_frame + 6) % 8);
  xoffset: 8;
  zoffset: 70;
  xextent: 8;
  zextent: 7;
 }
}

spritelayout brickworksspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout brickworksspritelayout_3_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building {
  sprite: 3701 + animation_frame;
  yoffset: 8;
  zoffset: 58;
  yextent: 8;
  zextent: 7;
 }
}

spritelayout brickworksspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: brickworksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: brickworksspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout brickworksspritelayout_5 {
 ground {
  sprite: brickworksspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, brickworkslayout_1, relative_pos) {
 relative_coord(0, 0): brickworksspritelayout_4;
 relative_coord(0, 1): brickworksspritelayout_4;
 relative_coord(1, 0): brickworksspritelayout_3_anim;
 relative_coord(1, 1): brickworksspritelayout_3_anim;
 relative_coord(2, 0): brickworksspritelayout_2;
 relative_coord(2, 1): brickworksspritelayout_1_anim;
 relative_coord(3, 0): brickworksspritelayout_clay_staithe;
 relative_coord(4, 0): brickworksspritelayout_sand_staithe;
 brickworksspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, brickworkslayout_2, relative_pos) {
 relative_coord(0, 0): brickworksspritelayout_4;
 relative_coord(0, 1): brickworksspritelayout_4;
 relative_coord(1, 0): brickworksspritelayout_3_anim;
 relative_coord(1, 1): brickworksspritelayout_3_anim;
 relative_coord(2, 0): brickworksspritelayout_2;
 relative_coord(2, 1): brickworksspritelayout_clay_staithe;
 relative_coord(3, 0): brickworksspritelayout_1_anim;
 relative_coord(3, 1): brickworksspritelayout_sand_staithe;
 brickworksspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, brickworkslayout_3, relative_pos) {
 relative_coord(0, 0): brickworksspritelayout_4;
 relative_coord(0, 1): brickworksspritelayout_4;
 relative_coord(0, 2): brickworksspritelayout_1_anim;
 relative_coord(0, 3): brickworksspritelayout_clay_staithe;
 relative_coord(1, 0): brickworksspritelayout_3_anim;
 relative_coord(1, 1): brickworksspritelayout_3_anim;
 relative_coord(1, 2): brickworksspritelayout_2;
  relative_coord(1, 3): brickworksspritelayout_sand_staithe;
 brickworksspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, PARENT, brickworkslayout, layout_num) {
 1: brickworkslayout_1;
 2: brickworkslayout_2;
 3: brickworkslayout_3;
 brickworkslayout_1;
}

/* ****************************************************
 * Definition of the industry tiles and their callbacks
 * ****************************************************/

/* Sand depot tile */

switch(FEAT_INDUSTRYTILES, SELF, brickworksnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, brickworksplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; brickworksnearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, brickworkslocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: brickworksplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

/* tile */

switch(FEAT_INDUSTRYTILES, SELF, brickworksanim_control, (extra_callback_info1 & 7)) {
 0: return 0;
 1: return 1;
 2: return 2;
 3: return 3;
 4: return 4;
 5: return 5;
 6: return 6;
 return 254;
}

item(FEAT_INDUSTRYTILES, brickworkstile, 165) {
 property {
  substitute: 0;
  accepted_cargos: [[COAL, 8], [CLAY, 8], [SAND, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 7];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: brickworksanim_control;
  tile_check: brickworkslocation_check;
  brickworkslayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_brick_works_1 {
 0, 0: brickworkstile;
 0, 1: brickworkstile;
 1, 0: brickworkstile;
 1, 1: brickworkstile;
 2, 0: brickworkstile;
 2, 1: brickworkstile;
 3, 0: brickworkstile;
 3, 1: brickworkstile;
 4, 0: brickworkstile;
 4, 1: brickworkstile;
}

tilelayout tilelayout_brick_works_2 {
 0, 0: brickworkstile;
 0, 1: brickworkstile;
 1, 0: brickworkstile;
 1, 1: brickworkstile;
 2, 0: brickworkstile;
 2, 1: brickworkstile;
 3, 0: brickworkstile;
 3, 1: brickworkstile;
}

tilelayout tilelayout_brick_works_3 {
 0, 0: brickworkstile;
 0, 1: brickworkstile;
 0, 2: brickworkstile;
 0, 3: brickworkstile;
 1, 0: brickworkstile;
 1, 1: brickworkstile;
 1, 2: brickworkstile;
 1, 3: brickworkstile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 194 "sprites/nml/industries/brickworks.pnml"
/* extra text template */


switch (FEAT_INDUSTRIES, SELF, brickworksbrick_works, industry_distance(brick_works)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, brickworkscoal_mine, industry_distance(coal_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; brickworksbrick_works; }
switch (FEAT_INDUSTRIES, SELF, brickworksquarry, industry_distance(quarry)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; brickworkscoal_mine; }
switch (FEAT_INDUSTRIES, SELF, brickworksclay_pit, industry_distance(clay_pit)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; brickworksquarry; }
switch (FEAT_INDUSTRIES, SELF, brickworkscheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; brickworksclay_pit; }

switch(FEAT_INDUSTRIES, SELF, brickworkscolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (brickworkssimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, brickworksproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 4,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(2) * 4,
       2
   ),
   STORE_PERM( 4 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 2,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 brickworkssimple_produce;
}
# 206 "sprites/nml/industries/brickworks.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, brickworksincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, brickworksreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, brickworkscheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: brickworksincrease_closure_counter;
 brickworksreset_closure_counter;
}
# 207 "sprites/nml/industries/brickworks.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, brickworksclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, brickworkshad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 brickworksclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, brickworkscheck_closure, allow_close_secondary) {
 1..255: brickworkshad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 208 "sprites/nml/industries/brickworks.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, brickworksextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, brickworksextra_text, [



   show_debug_texts
   ]) {
 1: brickworksextra_text_debug;
 return string(STR_EXTRA_BRICKWORKS);
}
# 210 "sprites/nml/industries/brickworks.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, brickworkscheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, brickworksavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: brickworkscheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, brickworkscheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): brickworksavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 212 "sprites/nml/industries/brickworks.pnml" 2

item(FEAT_INDUSTRIES, brick_works, 0x2D) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_brick_works_1,
    tilelayout_brick_works_2,
    tilelayout_brick_works_3
   ];
  life_type: 4;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_BRICK_WORKS);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_BRICK_WORKS));
  prod_cargo_types: [BDMT];
  accept_cargo_types: [COAL, SAND, CLAY];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 120;
  map_colour: 184;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_HELICOPTER_CAN_EXPLODE);
 }
 graphics {
  produce_cargo_arrival: brickworksproduce;
  construction_probability:brickworkscheck_availability;
  monthly_prod_change: brickworkscheck_production_level;
  random_prod_change: brickworkscheck_closure;
  extra_text_industry: brickworksextra_text;
  colour: brickworkscolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 254 "sprites/nml/industries/brickworks.pnml" 2
# 37 "<stdin>" 2
# 1 "sprites/nml/industries/builders_yard.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Defines a flat, ground aware spritelayout for an industry tile.
 * Ground sprite overlays and buildings must be defined separately.
 *
 * Use this layout when the tile uses foundations and autoslope
 *
 * spritelayout_name       Name for the spritelayout block.
 */
# 86 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a ground sprite overlay that will appear only if a given condition is true.
 *
 * ground_overlay_sprite   Sprite to use for the overlay.
 * condition               The overlay will only be drawn if this condition is true.
 */
# 100 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a ground sprite overlay that will appear always.
 *
 * ground_overlay_sprite   Sprite to use for the overlay.
 */


/* Defines a building with normal and snow sprites.
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 119 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines conditionally a building
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 * condition            The building will only be drawn if this condition is true.
 */
# 135 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a building
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 148 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a sloped, ground aware spritelayout for an industry tile.
 * Ground sprite overlays and buildings must be defined separately.
 *
 * Use this spritelayout when the tile doesn't use foundations and
 * autoslope. It's analoguous to GROUND_AWARE_SPRITELAYOUT
 *
 * spritelayout_name       Name for the spritelayout block.
 */
# 9 "sprites/nml/industries/builders_yard.pnml" 2



spriteset(builders_yardspriteset_empty) {
 [210,10,1,1,0,0, "sprites/graphics/industries/buildersyard.png"]
 [210,10,1,1,0,0, "sprites/graphics/industries/buildersyard.png"]
}

spriteset(builders_yardspriteset_ground_overlay_snow) {
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

spriteset(builders_yardspriteset_ground_overlay_normal) {
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
 tmpl_building_sprite_filename(150, 10, 43, -13, "sprites/graphics/industries/buildersyard.png")
}

spriteset(builders_yardspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 51, -13, "sprites/graphics/industries/buildersyard.png")
 tmpl_building_sprite_filename(10, 10, 51, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

spriteset(builders_yardspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 51, -13, "sprites/graphics/industries/buildersyard.png")
 tmpl_building_sprite_filename(80, 10, 51, -13, "sprites/graphics/industries/buildersyard_snow.png")
}

spritelayout builders_yardspritelayout_1 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: builders_yardspriteset_ground_overlay_normal; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: builders_yardspriteset_ground_overlay_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 building { sprite: builders_yardspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; }
}

spritelayout builders_yardspritelayout_2 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: builders_yardspriteset_ground_overlay_normal; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: builders_yardspriteset_ground_overlay_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 building { sprite: builders_yardspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; }
}

switch(FEAT_INDUSTRYTILES, SELF, builders_yardlayout_1, relative_pos) {
 relative_coord(0, 0): builders_yardspritelayout_1;
 relative_coord(0, 1): builders_yardspritelayout_2;
 builders_yardspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, builders_yardlayout_2, relative_pos) {
 relative_coord(0, 0): builders_yardspritelayout_1;
 relative_coord(1, 0): builders_yardspritelayout_2;
 builders_yardspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, builders_yardlayout, layout_num) {
 1: builders_yardlayout_1;
 2: builders_yardlayout_2;
 builders_yardlayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_decide_arctic, [ STORE_TEMP( (nearby_tile_height(0, 0) < (snowline_height - 8)) * GROUNDSPRITE_NORMAL, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4493 * (nearby_tile_height(0, 0) < (snowline_height )), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_height(0, 0) < (snowline_height + 1)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4531 * (nearby_tile_height(0, 0) < (snowline_height + 2)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4550 * (nearby_tile_height(0, 0) >= (snowline_height + 2)), 0) ]) { builders_yardlayout; } switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_decide_tropic, [ STORE_TEMP( (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT) * GROUNDSPRITE_DESERT, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0,-1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * GROUNDSPRITE_NORMAL, 0) ]) { builders_yardlayout; } switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_decide_temperate, [ STORE_TEMP( GROUNDSPRITE_NORMAL, 0) ]) { builders_yardlayout; } switch (FEAT_INDUSTRYTILES, SELF, builders_yardground_switch, [ STORE_TEMP(0, 0), climate ]) { CLIMATE_ARCTIC: builders_yardtile_decide_arctic; CLIMATE_TROPIC: builders_yardtile_decide_tropic; builders_yardtile_decide_temperate; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_15, nearby_tile_class(-4, -4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_14, nearby_tile_class(-4, 4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_15; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_13, nearby_tile_class(4, -4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_14; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_12, nearby_tile_class(4, 4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_13; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_11, nearby_tile_class(-3, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_12; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_10, nearby_tile_class(-3, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_11; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_9, nearby_tile_class(3, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_10; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_8, nearby_tile_class(3, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_9; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_7, nearby_tile_class(-2, 2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_8; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_6, nearby_tile_class(2, -2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_7; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_5, nearby_tile_class(2, 2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_6; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_4, nearby_tile_class(-3, 0)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_5; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_3, nearby_tile_class(0, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_4; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_2, nearby_tile_class(3, 0)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_3; }
switch (FEAT_INDUSTRYTILES, SELF, builders_yardtile_houses_1, nearby_tile_class(0, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; builders_yardtile_houses_2; }
switch(FEAT_INDUSTRYTILES, SELF, builders_yardnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; builders_yardtile_houses_1; }
switch (FEAT_INDUSTRYTILES, PARENT, builders_yardterrain_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; builders_yardnearby_industry; }

item(FEAT_INDUSTRYTILES, builders_yardtile, 164) {
 property {
  substitute: 0;
  accepted_cargos: [[BDMT, 8]];
  land_shape_flags: 0;
 }

 graphics {
  builders_yardground_switch;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_builders_yard_1 {
 0, 0: builders_yardtile;
 0, 1: builders_yardtile;
}

tilelayout tilelayout_builders_yard_2 {
 0, 0: builders_yardtile;
 1, 0: builders_yardtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, builders_yardcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, builders_yardavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: builders_yardcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, builders_yardcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): builders_yardavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 122 "sprites/nml/industries/builders_yard.pnml" 2

item(FEAT_INDUSTRIES, builders_yard, 0x3F) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_builders_yard_1,
    tilelayout_builders_yard_2
   ];
  life_type: IND_LIFE_TYPE_BLACK_HOLE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_BUILDERS_YARD);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_BUILDERS_YARD));
  prod_cargo_types: [];
  accept_cargo_types: [BDMT];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 0;
  conflicting_ind_types: [builders_yard];
  prob_random: 18;
  prob_in_game: 12;
  prospect_chance: 0.75;
  fund_cost_multiplier: 8;
  map_colour: 15;
  remove_cost_multiplier: 0;
 }
 graphics {
  construction_probability:builders_yardcheck_availability;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 157 "sprites/nml/industries/builders_yard.pnml" 2
# 38 "<stdin>" 2
# 1 "sprites/nml/industries/cement_plant.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/cement_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/smoke_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Creates a small puff of dark smoke that slowly rises until dissapearing. */
# 20 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a small puff of white smoke that slowly rises until dissapearing. */
# 32 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a long column of white smoke. */
# 10 "sprites/nml/industries/cement_plant.pnml" 2



/* General ground sprite */
spriteset(cement_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
}

spriteset(cement_plantspriteset_clay, "sprites/graphics/industries/cementplant.png") { tmpl_ground_tile(80, 130) }
spriteset(cement_plantspriteset_stone, "sprites/graphics/industries/cementplant.png") { tmpl_ground_tile(150, 130) }

spriteset(cement_plantspriteset_1, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite( 80, 10, 113, -82) }
spriteset(cement_plantspriteset_2, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(150, 10, 113, -82) }
spriteset(cement_plantspriteset_3, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(220, 10, 113, -82) }
spriteset(cement_plantspriteset_4, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(290, 10, 113, -82) }

spriteset(cement_plantspriteset_ground_spriteset_5, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 /* DUPLICATED - NUMBER SPRITES NEEDS TO MATCH TO NUMBER OF ANIMATED FRAMES USED BY SPRITELAYOUT*/
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(cement_plantspriteset_5_anim) {
 tmpl_building_sprite_filename(220, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(290, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(360, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(430, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(500, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(570, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
 tmpl_building_sprite_filename(640, 130, 113, -82, "sprites/graphics/industries/cementplant.png")
}

spriteset(cement_plantspriteset_6, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(430, 10, 113, -82) }
spriteset(cement_plantspriteset_7, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(500, 10, 113, -82) }
spriteset(cement_plantspriteset_8, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(570, 10, 113, -82) }
spriteset(cement_plantspriteset_9, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(640, 10, 113, -82) }
spriteset(cement_plantspriteset_10, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(710, 10, 113, -82) }
spriteset(cement_plantspriteset_11, "sprites/graphics/industries/cementplant.png") { tmpl_building_sprite(780, 10, 113, -82) }

spritelayout cement_plantspritelayout_clay_staithe { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_clay; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_stone_staithe { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_stone; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_5_anim {
 ground {
  sprite: cement_plantspriteset_ground_spriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
 building {
  sprite: cement_plantspriteset_5_anim(animation_frame);
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 48;
 }
 building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

spritelayout cement_plantspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_9 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_9; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_10 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_10; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout cement_plantspritelayout_11_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: cement_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: cement_plantspriteset_11; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 0; yoffset: 0; zoffset: 81; xextent: 15; yextent: 7; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 3; yoffset: 0; zoffset: 81; xextent: 15; yextent: 7; zextent: 7; }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

switch(FEAT_INDUSTRYTILES, SELF, cement_plantlayout_1, relative_pos) {
 relative_coord(0, 1): cement_plantspritelayout_2;
 relative_coord(0, 2): cement_plantspritelayout_3;
 relative_coord(1, 1): cement_plantspritelayout_1;
 relative_coord(1, 2): cement_plantspritelayout_6;
 relative_coord(2, 2): cement_plantspritelayout_5_anim;
 relative_coord(3, 2): cement_plantspritelayout_4;
 relative_coord(4, 0): cement_plantspritelayout_stone_staithe;
 relative_coord(4, 2): cement_plantspritelayout_8;
 relative_coord(4, 3): cement_plantspritelayout_7;
 relative_coord(5, 0): cement_plantspritelayout_clay_staithe;
 relative_coord(5, 1): cement_plantspritelayout_10;
 relative_coord(5, 2): cement_plantspritelayout_9;
 cement_plantspritelayout_11_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, cement_plantlayout_2, relative_pos) {
 relative_coord(0, 0): cement_plantspritelayout_2;
 relative_coord(0, 1): cement_plantspritelayout_3;
 relative_coord(0, 2): cement_plantspritelayout_1;
 relative_coord(1, 0): cement_plantspritelayout_6;
 relative_coord(1, 1): cement_plantspritelayout_6;
 relative_coord(2, 0): cement_plantspritelayout_5_anim;
 relative_coord(2, 1): cement_plantspritelayout_5_anim;
 relative_coord(2, 3): cement_plantspritelayout_8;
 relative_coord(2, 4): cement_plantspritelayout_7;
 relative_coord(3, 0): cement_plantspritelayout_4;
 relative_coord(3, 1): cement_plantspritelayout_4;
 relative_coord(3, 2): cement_plantspritelayout_10;
 relative_coord(3, 3): cement_plantspritelayout_9;
 relative_coord(3, 4): cement_plantspritelayout_stone_staithe;
 cement_plantspritelayout_11_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, cement_plantlayout_3, relative_pos) {
 relative_coord(0, 0): cement_plantspritelayout_2;
 relative_coord(0, 1): cement_plantspritelayout_3;
 relative_coord(0, 2): cement_plantspritelayout_6;
 relative_coord(0, 3): cement_plantspritelayout_6;
 relative_coord(0, 4): cement_plantspritelayout_stone_staithe;
 relative_coord(0, 5): cement_plantspritelayout_clay_staithe;
 relative_coord(1, 0): cement_plantspritelayout_2;
 relative_coord(1, 1): cement_plantspritelayout_3;
 relative_coord(1, 2): cement_plantspritelayout_5_anim;
 relative_coord(1, 3): cement_plantspritelayout_5_anim;
 relative_coord(1, 5): cement_plantspritelayout_8;
 relative_coord(1, 6): cement_plantspritelayout_7;
 relative_coord(2, 0): cement_plantspritelayout_1;
 relative_coord(2, 1): cement_plantspritelayout_1;
 relative_coord(2, 2): cement_plantspritelayout_4;
 relative_coord(2, 3): cement_plantspritelayout_4;
 relative_coord(2, 4): cement_plantspritelayout_10;
 relative_coord(2, 5): cement_plantspritelayout_9;
 cement_plantspritelayout_11_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, cement_plantlayout_4, relative_pos) {
 relative_coord(0, 0): cement_plantspritelayout_2;
 relative_coord(0, 1): cement_plantspritelayout_3;
 relative_coord(0, 2): cement_plantspritelayout_2;
 relative_coord(0, 3): cement_plantspritelayout_3;
 relative_coord(1, 0): cement_plantspritelayout_6;
 relative_coord(1, 1): cement_plantspritelayout_6;
 relative_coord(1, 2): cement_plantspritelayout_6;
 relative_coord(1, 3): cement_plantspritelayout_1;
 relative_coord(2, 0): cement_plantspritelayout_5_anim;
 relative_coord(2, 1): cement_plantspritelayout_5_anim;
 relative_coord(2, 2): cement_plantspritelayout_5_anim;
 relative_coord(3, 0): cement_plantspritelayout_4;
 relative_coord(3, 1): cement_plantspritelayout_4;
 relative_coord(3, 2): cement_plantspritelayout_4;
 relative_coord(4, 0): cement_plantspritelayout_stone_staithe;
 relative_coord(4, 2): cement_plantspritelayout_8;
 relative_coord(4, 3): cement_plantspritelayout_7;
 relative_coord(5, 0): cement_plantspritelayout_clay_staithe;
 relative_coord(5, 1): cement_plantspritelayout_10;
 relative_coord(5, 2): cement_plantspritelayout_9;
 cement_plantspritelayout_11_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, cement_plantlayout_5, relative_pos) {
 relative_coord(0, 0): cement_plantspritelayout_1;
 relative_coord(0, 1): cement_plantspritelayout_1;
 relative_coord(1, 0): cement_plantspritelayout_2;
 relative_coord(1, 1): cement_plantspritelayout_3;
 relative_coord(1, 2): cement_plantspritelayout_2;
 relative_coord(1, 3): cement_plantspritelayout_3;
 relative_coord(2, 0): cement_plantspritelayout_6;
 relative_coord(2, 1): cement_plantspritelayout_6;
 relative_coord(2, 2): cement_plantspritelayout_6;
 relative_coord(3, 0): cement_plantspritelayout_5_anim;
 relative_coord(3, 1): cement_plantspritelayout_5_anim;
 relative_coord(3, 2): cement_plantspritelayout_5_anim;
 relative_coord(4, 0): cement_plantspritelayout_4;
 relative_coord(4, 1): cement_plantspritelayout_4;
 relative_coord(4, 2): cement_plantspritelayout_stone_staithe;
 relative_coord(5, 1): cement_plantspritelayout_8;
 relative_coord(5, 2): cement_plantspritelayout_7;
 relative_coord(6, 0): cement_plantspritelayout_10;
 relative_coord(6, 1): cement_plantspritelayout_9;
 relative_coord(6, 2): cement_plantspritelayout_clay_staithe;
 cement_plantspritelayout_11_anim;
}

switch(FEAT_INDUSTRYTILES, PARENT, cement_plantlayout, layout_num) {
 1: cement_plantlayout_1;
 2: cement_plantlayout_2;
 3: cement_plantlayout_3;
 4: cement_plantlayout_4;
 5: cement_plantlayout_5;
 cement_plantspritelayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, cement_planttile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { cement_plantlayout; }
switch (FEAT_INDUSTRYTILES, SELF, cement_planttile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { cement_planttile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, cement_planttile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { cement_planttile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, cement_plantnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, cement_plantplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; cement_plantnearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, cement_plantlocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: cement_plantplayer_check; return CB_RESULT_LOCATION_DISALLOW; }


/* tile */

switch(FEAT_INDUSTRYTILES, SELF, cement_planttile1_anim_control, (extra_callback_info1 & 7)) {
 0: return 0;
 1: return 1;
 2: return 2;
 3: return 3;
 4: return 4;
 5: return 5;
 6: return 6;
 return 254;
}

item(FEAT_INDUSTRYTILES, cement_planttile, 162) {
 property {
  substitute: 0;
  accepted_cargos: [[COAL, 8], [CLAY, 8], [GRVL, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 7];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: cement_planttile1_anim_control;
  tile_check: cement_plantlocation_check;
  cement_planttile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_cement_plant_1 {
 0, 1: cement_planttile;
 0, 2: cement_planttile;
 1, 1: cement_planttile;
 1, 2: cement_planttile;
 2, 2: cement_planttile;
 3, 2: cement_planttile;
 4, 0: cement_planttile;
 4, 1: cement_planttile;
 4, 2: cement_planttile;
 4, 3: cement_planttile;
 5, 0: cement_planttile;
 5, 1: cement_planttile;
 5, 2: cement_planttile;
}

tilelayout tilelayout_cement_plant_2 {
 0, 0: cement_planttile;
 0, 1: cement_planttile;
 0, 2: cement_planttile;
 1, 0: cement_planttile;
 1, 1: cement_planttile;
 2, 0: cement_planttile;
 2, 1: cement_planttile;
 2, 2: cement_planttile;
 2, 3: cement_planttile;
 2, 4: cement_planttile;
 3, 0: cement_planttile;
 3, 1: cement_planttile;
 3, 2: cement_planttile;
 3, 3: cement_planttile;
 3, 4: cement_planttile;
}

tilelayout tilelayout_cement_plant_3 {
 0, 0: cement_planttile;
 0, 1: cement_planttile;
 0, 2: cement_planttile;
 0, 3: cement_planttile;
 0, 4: cement_planttile;
 0, 5: cement_planttile;
 1, 0: cement_planttile;
 1, 1: cement_planttile;
 1, 2: cement_planttile;
 1, 3: cement_planttile;
 1, 4: cement_planttile;
 1, 5: cement_planttile;
 1, 6: cement_planttile;
 2, 0: cement_planttile;
 2, 1: cement_planttile;
 2, 2: cement_planttile;
 2, 3: cement_planttile;
 2, 4: cement_planttile;
 2, 5: cement_planttile;
}

tilelayout tilelayout_cement_plant_4 {
 0, 0: cement_planttile;
 0, 1: cement_planttile;
 0, 2: cement_planttile;
 0, 3: cement_planttile;
 1, 0: cement_planttile;
 1, 1: cement_planttile;
 1, 2: cement_planttile;
 1, 3: cement_planttile;
 2, 0: cement_planttile;
 2, 1: cement_planttile;
 2, 2: cement_planttile;
 3, 0: cement_planttile;
 3, 1: cement_planttile;
 3, 2: cement_planttile;
 4, 0: cement_planttile;
 4, 1: cement_planttile;
 4, 2: cement_planttile;
 4, 3: cement_planttile;
 5, 0: cement_planttile;
 5, 1: cement_planttile;
 5, 2: cement_planttile;
}

tilelayout tilelayout_cement_plant_5 {
 0, 0: cement_planttile;
 0, 1: cement_planttile;
 1, 0: cement_planttile;
 1, 1: cement_planttile;
 2, 0: cement_planttile;
 2, 1: cement_planttile;
 3, 0: cement_planttile;
 3, 1: cement_planttile;
 4, 0: cement_planttile;
 4, 1: cement_planttile;
 4, 2: cement_planttile;
 5, 0: cement_planttile;
 5, 1: cement_planttile;
 5, 2: cement_planttile;
 6, 0: cement_planttile;
 6, 1: cement_planttile;
 6, 2: cement_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 374 "sprites/nml/industries/cement_plant.pnml"
/* extra text template */

/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, cement_plantcement_plant, industry_distance(cement_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, cement_plantcoal_mine, industry_distance(coal_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; cement_plantcement_plant; }
switch (FEAT_INDUSTRIES, SELF, cement_plantquarry, industry_distance(quarry)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; cement_plantcoal_mine; }
switch (FEAT_INDUSTRIES, SELF, cement_plantclay_pit, industry_distance(clay_pit)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; cement_plantquarry; }
switch (FEAT_INDUSTRIES, SELF, cement_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; cement_plantclay_pit; }

switch(FEAT_INDUSTRIES, SELF, cement_plantcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (cement_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, cement_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 4,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(2) * 4,
       2
   ),
   STORE_PERM( 4 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 2,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 cement_plantsimple_produce;
}
# 387 "sprites/nml/industries/cement_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, cement_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, cement_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, cement_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: cement_plantincrease_closure_counter;
 cement_plantreset_closure_counter;
}
# 388 "sprites/nml/industries/cement_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, cement_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, cement_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 cement_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, cement_plantcheck_closure, allow_close_secondary) {
 1..255: cement_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 389 "sprites/nml/industries/cement_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, cement_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, cement_plantextra_text, [



   show_debug_texts
   ]) {
 1: cement_plantextra_text_debug;
 return string(STR_EXTRA_CEMENT_PLANT);
}
# 391 "sprites/nml/industries/cement_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, cement_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, cement_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: cement_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, cement_plantcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): cement_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 393 "sprites/nml/industries/cement_plant.pnml" 2

item(FEAT_INDUSTRIES, cement_plant, 0x2B) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_cement_plant_1,
    tilelayout_cement_plant_2,
    tilelayout_cement_plant_3,
    tilelayout_cement_plant_4,
    tilelayout_cement_plant_5
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_CEMENT_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_CEMENT_PLANT));
  prod_cargo_types: [BDMT];
  accept_cargo_types: [COAL, CLAY, GRVL];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 203;
  map_colour: 19;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_HELICOPTER_CAN_EXPLODE);
 }
 graphics {
  produce_cargo_arrival: cement_plantproduce;
  construction_probability:cement_plantcheck_availability;
  monthly_prod_change: cement_plantcheck_production_level;
  random_prod_change: cement_plantcheck_closure;
  extra_text_industry: cement_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_CEMENT_PLANT));
  colour: cement_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 438 "sprites/nml/industries/cement_plant.pnml" 2
# 39 "<stdin>" 2
# 1 "sprites/nml/industries/clay_pit.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */





spriteset(clay_pitspriteset_1) {
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_2) {
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_3) {
 [150, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [150, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_4) {
 [220, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [220, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_5) {
 [290, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [290, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_6) {
 [360, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [360, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_7) {
 [10, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [10, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_8) {
 [80, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [80, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_9) {
 [150, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [150, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_10) {
 [220, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [220, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_11) {
 [290, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [290, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_12) {
 [360, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [360, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_13) {
 [10, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [10, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_14) {
 [80, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [80, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_15) {
 [150, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [150, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_16) {
 [220, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [220, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_17) {
 [290, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [290, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_18) {
 [360, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [360, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_19) {
 [10, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [10, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_20) {
 [80, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [80, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_21) {
 [150, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [150, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_22) {
 [220, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [220, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_23) {
 [290, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [290, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_24) {
 [360, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [360, 130, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_25) {
 [440, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [440, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_26) {
 [510, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [510, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_27) {
 [580, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [580, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_28) {
 [650, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [650, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_29) {
 [440, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [440, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_30) {
 [510, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [510, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_31) {
 [580, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [580, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_32) {
 [650, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [650, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_33) {
 [580, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [580, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_34) {
 [650, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [650, 90, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_35) {
 [730, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [730, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_36) {
 [800, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [800, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_37) {
 [870, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [870, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_38) {
 [940, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [940, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_39) {
 [1010, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [1010, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_40) {
 [1080, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [1080, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_41) {
 [1150, 10, 64, 34, -31, -3, "sprites/graphics/industries/claypit.png"]
 [1150, 10, 64, 34, -31, -3, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_42) {
 [1220, 10, 64, 33, -31, -2, "sprites/graphics/industries/claypit.png"]
 [1220, 10, 64, 33, -31, -2, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_43) {
 [1290, 10, 64, 34, -31, -3, "sprites/graphics/industries/claypit.png"]
 [1290, 10, 64, 34, -31, -3, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_44) {
 [1360, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [1360, 10, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_45) {
 [800, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [800, 50, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_46) {
 [870, 50, 64, 51, -31, -20, "sprites/graphics/industries/claypit.png"]
 [870, 50, 64, 51, -31, -20, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_47) {
 [1010, 50, 64, 64, -31, -35, "sprites/graphics/industries/claypit.png"]
 [1010, 50, 64, 64, -31, -35, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_48) {
 [1080, 50, 64, 49, -31, -18, "sprites/graphics/industries/claypit.png"]
 [1080, 50, 64, 49, -31, -18, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_49) {
 [1150, 50, 64, 57, -31, -26, "sprites/graphics/industries/claypit.png"]
 [1150, 50, 64, 57, -31, -26, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_50) {
 [730, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [730, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_51) {
 [800, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [800, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_52) {
 [940, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [940, 140, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_53) {
 [730, 80, 64, 51, -31, -20, "sprites/graphics/industries/claypit.png"]
 [730, 80, 64, 51, -31, -20, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_54) {
 [800, 100, 64, 31, -31, 0, "sprites/graphics/industries/claypit.png"]
 [800, 100, 64, 31, -31, 0, "sprites/graphics/industries/claypit_snow.png"]
}

spriteset(clay_pitspriteset_55) {
 [940, 90, 64, 47, -31, -16, "sprites/graphics/industries/claypit.png"]
 [940, 90, 64, 47, -31, -16, "sprites/graphics/industries/claypit_snow.png"]
}

spritelayout clay_pitspritelayout_1 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_1(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: clay_pitspriteset_25(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout clay_pitspritelayout_2 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_2(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: clay_pitspriteset_26(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout clay_pitspritelayout_3 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_3(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: clay_pitspriteset_27(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout clay_pitspritelayout_4 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_4(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: clay_pitspriteset_28(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  xextent: 11;
  zextent: 42;
 }
}

spritelayout clay_pitspritelayout_5 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_5(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_6 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_6(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_7 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_7(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 32;
 }
 building {
  sprite: clay_pitspriteset_29(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_8 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_8(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: clay_pitspriteset_30(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_9 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_9(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_10 {
 ground {
  sprite: clay_pitspriteset_10(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_31;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_11 {
 ground {
  sprite: clay_pitspriteset_11(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_32(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_12 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_12(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_13 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_13(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_14 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_14(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_15 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_15(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_16 {
 ground {
  sprite: clay_pitspriteset_16(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_33(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_17 {
 ground {
  sprite: clay_pitspriteset_17(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_34(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_18 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_18(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_19 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_19(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_20 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_20(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_21 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_21(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_22 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_22(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_23 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_23(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_24 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_24(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout clay_pitspritelayout_35 {
 ground {
  sprite: clay_pitspriteset_35(terrain_type == TILETYPE_SNOW);
 }
}

spritelayout clay_pitspritelayout_36 {
 ground {
  sprite: clay_pitspriteset_36(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_45(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
}

spritelayout clay_pitspritelayout_37 {
 ground {
  sprite: clay_pitspriteset_37(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_46(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_38 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_38(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_39 {
 ground {
  sprite: clay_pitspriteset_39(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_47(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 48;
 }
}

spritelayout clay_pitspritelayout_40 {
 ground {
  sprite: clay_pitspriteset_40(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_48(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_41 {
 ground {
  sprite: clay_pitspriteset_41(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_49(terrain_type == TILETYPE_SNOW);
  zextent: 48;
 }
}

spritelayout clay_pitspritelayout_42 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_42(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_43 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_43(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_44 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_44(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout clay_pitspritelayout_50 {
 ground {
  sprite: clay_pitspriteset_50(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_53(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout clay_pitspritelayout_51 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: clay_pitspriteset_51(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 8;
 }
 building {
  sprite: clay_pitspriteset_54(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 8;
 }
}

spritelayout clay_pitspritelayout_52 {
 ground {
  sprite: clay_pitspriteset_52(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: clay_pitspriteset_55(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, clay_pitlayout_1, relative_pos) {
 relative_coord(5, 3): clay_pitspritelayout_1;
 relative_coord(4, 3): clay_pitspritelayout_2;
 relative_coord(3, 3): clay_pitspritelayout_3;
 relative_coord(2, 3): clay_pitspritelayout_4;
 relative_coord(1, 3): clay_pitspritelayout_5;
 relative_coord(0, 3): clay_pitspritelayout_6;
 relative_coord(5, 2): clay_pitspritelayout_7;
 relative_coord(4, 2): clay_pitspritelayout_8;
 relative_coord(3, 2): clay_pitspritelayout_9;
 relative_coord(2, 2): clay_pitspritelayout_10;
 relative_coord(1, 2): clay_pitspritelayout_11;
 relative_coord(0, 2): clay_pitspritelayout_12;
 relative_coord(5, 1): clay_pitspritelayout_13;
 relative_coord(4, 1): clay_pitspritelayout_14;
 relative_coord(3, 1): clay_pitspritelayout_15;
 relative_coord(2, 1): clay_pitspritelayout_16;
 relative_coord(1, 1): clay_pitspritelayout_17;
 relative_coord(0, 1): clay_pitspritelayout_18;
 relative_coord(5, 0): clay_pitspritelayout_19;
 relative_coord(4, 0): clay_pitspritelayout_20;
 relative_coord(3, 0): clay_pitspritelayout_21;
 relative_coord(2, 0): clay_pitspritelayout_22;
 relative_coord(1, 0): clay_pitspritelayout_23;
 relative_coord(0, 0): clay_pitspritelayout_24;
 relative_coord(8, 2): clay_pitspritelayout_35;
 relative_coord(7, 2): clay_pitspritelayout_36;
 relative_coord(6, 2): clay_pitspritelayout_37;
 relative_coord(6, 3): clay_pitspritelayout_38;
 relative_coord(8, 1): clay_pitspritelayout_39;
 relative_coord(7, 1): clay_pitspritelayout_40;
 relative_coord(6, 1): clay_pitspritelayout_41;
 relative_coord(7, 0): clay_pitspritelayout_42;
 relative_coord(8, 0): clay_pitspritelayout_43;
 clay_pitspritelayout_44;
}

switch(FEAT_INDUSTRYTILES, SELF, clay_pitlayout_2, relative_pos) {
 relative_coord(5, 4): clay_pitspritelayout_1;
 relative_coord(4, 4): clay_pitspritelayout_2;
 relative_coord(3, 4): clay_pitspritelayout_3;
 relative_coord(2, 4): clay_pitspritelayout_4;
 relative_coord(1, 4): clay_pitspritelayout_5;
 relative_coord(0, 4): clay_pitspritelayout_6;
 relative_coord(5, 3): clay_pitspritelayout_7;
 relative_coord(4, 3): clay_pitspritelayout_8;
 relative_coord(3, 3): clay_pitspritelayout_9;
 relative_coord(2, 3): clay_pitspritelayout_10;
 relative_coord(1, 3): clay_pitspritelayout_11;
 relative_coord(0, 3): clay_pitspritelayout_12;
 relative_coord(5, 2): clay_pitspritelayout_13;
 relative_coord(4, 2): clay_pitspritelayout_14;
 relative_coord(3, 2): clay_pitspritelayout_15;
 relative_coord(2, 2): clay_pitspritelayout_16;
 relative_coord(1, 2): clay_pitspritelayout_17;
 relative_coord(0, 2): clay_pitspritelayout_18;
 relative_coord(5, 1): clay_pitspritelayout_19;
 relative_coord(4, 1): clay_pitspritelayout_20;
 relative_coord(3, 1): clay_pitspritelayout_21;
 relative_coord(2, 1): clay_pitspritelayout_22;
 relative_coord(1, 1): clay_pitspritelayout_23;
 relative_coord(0, 1): clay_pitspritelayout_24;
 relative_coord(6, 0): clay_pitspritelayout_39;
 relative_coord(6, 1): clay_pitspritelayout_52;
 relative_coord(6, 2): clay_pitspritelayout_41;
 relative_coord(6, 3): clay_pitspritelayout_50;
 clay_pitspritelayout_51;
}

switch(FEAT_INDUSTRYTILES, PARENT, clay_pitlayout, layout_num) {
 1: clay_pitlayout_1;
 2: clay_pitlayout_2;
 clay_pitspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* tile_check is disabled; if it's enabled OpenTTD won't terraform for this industry, which makes it unlikely to be built on steep maps.
// This means that this industry will locate adjacent to others, blocking routes.  It's the lesser of two evils.
TILE_DISALLOW_NEARBY_CLASS(tile1_nearby_industry,  TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile1_player_check,                                                             THIS_ID(tile1_nearby_industry))
TILE_DISALLOW_TERRAIN     (tile1_disallow_terrain, TILETYPE_DESERT,     CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_player_check))
TILE_DISALLOW_SLOPES      (tile1_location_check,                        CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_disallow_terrain))
*/

item(FEAT_INDUSTRYTILES, clay_pittile, 189) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  foundations: return CB_RESULT_NO_FOUNDATIONS;
  autoslope: return CB_RESULT_NO_AUTOSLOPE;
  /*tile_check:   THIS_ID(tile1_location_check); // disabled to permit terraforming, see note above*/
  clay_pitlayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_clay_pit_1 {
 0, 0: clay_pittile;
 1, 0: clay_pittile;
 2, 0: clay_pittile;
 3, 0: clay_pittile;
 4, 0: clay_pittile;
 5, 0: clay_pittile;
 6, 0: clay_pittile;
 7, 0: clay_pittile;
 8, 0: clay_pittile;
 0, 1: clay_pittile;
 1, 1: clay_pittile;
 2, 1: clay_pittile;
 3, 1: clay_pittile;
 4, 1: clay_pittile;
 5, 1: clay_pittile;
 6, 1: clay_pittile;
 7, 1: clay_pittile;
 8, 1: clay_pittile;
 0, 2: clay_pittile;
 1, 2: clay_pittile;
 2, 2: clay_pittile;
 3, 2: clay_pittile;
 4, 2: clay_pittile;
 5, 2: clay_pittile;
 6, 2: clay_pittile;
 7, 2: clay_pittile;
 8, 2: clay_pittile;
 0, 3: clay_pittile;
 1, 3: clay_pittile;
 2, 3: clay_pittile;
 3, 3: clay_pittile;
 4, 3: clay_pittile;
 5, 3: clay_pittile;
 6, 3: clay_pittile;
}

tilelayout tilelayout_clay_pit_2 {
 6, 0: clay_pittile;
 0, 1: clay_pittile;
 1, 1: clay_pittile;
 2, 1: clay_pittile;
 3, 1: clay_pittile;
 4, 1: clay_pittile;
 5, 1: clay_pittile;
 6, 1: clay_pittile;
 0, 2: clay_pittile;
 1, 2: clay_pittile;
 2, 2: clay_pittile;
 3, 2: clay_pittile;
 4, 2: clay_pittile;
 5, 2: clay_pittile;
 6, 2: clay_pittile;
 0, 3: clay_pittile;
 1, 3: clay_pittile;
 2, 3: clay_pittile;
 3, 3: clay_pittile;
 4, 3: clay_pittile;
 5, 3: clay_pittile;
 6, 3: clay_pittile;
 0, 4: clay_pittile;
 1, 4: clay_pittile;
 2, 4: clay_pittile;
 3, 4: clay_pittile;
 4, 4: clay_pittile;
 5, 4: clay_pittile;
 6, 4: clay_pittile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, clay_pitpaper_mill, industry_distance(paper_mill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, clay_pitcement_plant, industry_distance(cement_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; clay_pitpaper_mill; }
switch (FEAT_INDUSTRIES, SELF, clay_pitbrick_works, industry_distance(brick_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; clay_pitcement_plant; }
switch (FEAT_INDUSTRIES, SELF, clay_pitcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; clay_pitbrick_works; }

switch(FEAT_INDUSTRIES, SELF, clay_pitcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(clay_pitproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, clay_pitproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 clay_pitproduction;
}
# 939 "sprites/nml/industries/clay_pit.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, clay_pitcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, clay_pitrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, clay_pitrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, clay_pitdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: clay_pitrandom_slow_decrease;
 clay_pitrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, clay_pitcheck_decrease_production, allow_primary_production_decrease) {
 1..255: clay_pitdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, clay_pitrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, clay_pitcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: clay_pitrandom_increase;
 clay_pitcheck_decrease_production;
}
# 940 "sprites/nml/industries/clay_pit.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, clay_pitextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 942 "sprites/nml/industries/clay_pit.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, clay_pitcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, clay_pitavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: clay_pitcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, clay_pitcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): clay_pitavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 944 "sprites/nml/industries/clay_pit.pnml" 2

item(FEAT_INDUSTRIES, clay_pit, 0x2C) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_clay_pit_1,
    tilelayout_clay_pit_2
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_CLAY_PIT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_CLAY_PIT));
  prod_cargo_types: [CLAY];
  accept_cargo_types: [ENSP];
  prod_multiplier: [16, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 200;
  map_colour: 46;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: clay_pitproduce;
  construction_probability:clay_pitcheck_availability;
  monthly_prod_change: clay_pitcheck_production_level;
  random_prod_change: clay_pitcheck_closure;
  build_prod_change: 4;
  extra_text_industry: clay_pitextra_text;
  colour: clay_pitcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 986 "sprites/nml/industries/clay_pit.pnml" 2
# 40 "<stdin>" 2
# 1 "sprites/nml/industries/coal_mine.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tiles
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, coal_minetile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, coal_minetile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; coal_minetile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, coal_minetile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: coal_minetile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, coal_minetile_1, 0) {
 property {
  substitute: 0;
  override: 0;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_2, 1) {
 property {
  substitute: 1;
  override: 1;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_3, 2) {
 property {
  substitute: 2;
  override: 2;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_4, 3) {
 property {
  substitute: 3;
  override: 3;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_5, 4) {
 property {
  substitute: 4;
  override: 4;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_6, 5) {
 property {
  substitute: 5;
  override: 5;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, coal_minetile_7, 6) {
 property {
  substitute: 6;
  override: 6;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: coal_minetile_location_check;
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, coal_minecoal_mine, industry_count(coal_mine) * 2 / 3 / industry_clusters != 0 && ( industry_distance(coal_mine) < 20 || industry_distance(coal_mine) > 70) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, coal_minebrick_works, industry_distance(brick_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; coal_minecoal_mine; }
switch (FEAT_INDUSTRIES, SELF, coal_minecement_plant, industry_distance(cement_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; coal_minebrick_works; }
switch (FEAT_INDUSTRIES, SELF, coal_minesteelmill, industry_distance(steelmill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; coal_minecement_plant; }
switch (FEAT_INDUSTRIES, SELF, coal_minelime_kiln, industry_distance(lime_kiln)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; coal_minesteelmill; }
switch (FEAT_INDUSTRIES, SELF, coal_minecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; coal_minelime_kiln; }

switch(FEAT_INDUSTRIES, SELF, coal_minecolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(coal_mineproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, coal_mineproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 coal_mineproduction;
}
# 111 "sprites/nml/industries/coal_mine.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, coal_minecheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, coal_minerandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, coal_minerandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, coal_minedecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: coal_minerandom_slow_decrease;
 coal_minerandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, coal_minecheck_decrease_production, allow_primary_production_decrease) {
 1..255: coal_minedecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, coal_minerandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, coal_minecheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: coal_minerandom_increase;
 coal_minecheck_decrease_production;
}
# 112 "sprites/nml/industries/coal_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, coal_mineextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 114 "sprites/nml/industries/coal_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, coal_minecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, coal_mineavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: coal_minecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, coal_minecheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): coal_mineavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 116 "sprites/nml/industries/coal_mine.pnml" 2

item(FEAT_INDUSTRIES, coal_mine, 0x00) {
 property {
  substitute: 0;
  override: 0;
  accept_cargo_types: [ENSP];
  prod_multiplier: [20, 0];
  input_multiplier_1: [0, 0];
  conflicting_ind_types: [];
  prob_random: 8;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 252;
  map_colour: 1;
 }
 graphics {
  produce_cargo_arrival: coal_mineproduce;
  construction_probability:coal_minecheck_availability;
  monthly_prod_change: coal_minecheck_production_level;
  random_prod_change: coal_minecheck_closure;
  build_prod_change: 4;
  extra_text_industry: coal_mineextra_text;
  colour: coal_minecolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 143 "sprites/nml/industries/coal_mine.pnml" 2
# 41 "<stdin>" 2

# 1 "sprites/nml/industries/dairy.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/dairy.pnml" 2



spriteset(dairyspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(dairyspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(10, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_ground_spriteset_2, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 /* DUPLICATED */
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(dairyspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
 /* DUPLICATED */
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(80, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_flag_anim) {
 tmpl_building_sprite_filename(220, 120, 64, -65, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(220, 120, 64, -65, "sprites/graphics/industries/dairy_snow.png")
 tmpl_building_sprite_filename( 10, 120, 64, -65, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename( 10, 120, 64, -65, "sprites/graphics/industries/dairy_snow.png")
 tmpl_building_sprite_filename( 80, 120, 64, -65, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename( 80, 120, 64, -65, "sprites/graphics/industries/dairy_snow.png")
 tmpl_building_sprite_filename(150, 120, 64, -65, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(150, 120, 64, -65, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 94, -62, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(150, 10, 94, -62, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 94, -43, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(220, 10, 94, -43, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 94, -43, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(290, 10, 94, -43, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_6) {
 tmpl_building_sprite_filename(360, 10, 94, -43, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(360, 10, 94, -43, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_7) {
 tmpl_building_sprite_filename(430, 10, 94, -43, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(430, 10, 94, -43, "sprites/graphics/industries/dairy_snow.png")
}

spriteset(dairyspriteset_8) {
 tmpl_building_sprite_filename(500, 10, 94, -63, "sprites/graphics/industries/dairy.png")
 tmpl_building_sprite_filename(500, 10, 94, -63, "sprites/graphics/industries/dairy_snow.png")
}


spritelayout dairyspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground_spriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground_spriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; }
 building {
  sprite: dairyspriteset_flag_anim(2 * (((animation_frame % 6) < 4) ? (animation_frame % 6) : 6 - (animation_frame % 6)) + (terrain_type == TILETYPE_SNOW));
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_7_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building {
  sprite: 3701 + (animation_frame % 7);
  yoffset: 12;
  zoffset: 56;
  yextent: 3;
  zextent: 7;
 }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout dairyspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: dairyspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: dairyspriteset_8(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_1, relative_pos) {
 relative_coord(0, 1): dairyspritelayout_5;
 relative_coord(1, 0): dairyspritelayout_6;
 relative_coord(1, 1): dairyspritelayout_4;
 relative_coord(2, 0): dairyspritelayout_8;
 relative_coord(2, 1): dairyspritelayout_3;
 relative_coord(3, 0): dairyspritelayout_1;
 relative_coord(3, 1): dairyspritelayout_2;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_2, relative_pos) {
 relative_coord(0, 1): dairyspritelayout_7_anim;
 relative_coord(0, 2): dairyspritelayout_5;
 relative_coord(1, 1): dairyspritelayout_6;
 relative_coord(1, 2): dairyspritelayout_4;
 relative_coord(2, 0): dairyspritelayout_8;
 relative_coord(2, 1): dairyspritelayout_3;
 relative_coord(2, 2): dairyspritelayout_8;
 relative_coord(3, 0): dairyspritelayout_1;
 relative_coord(3, 1): dairyspritelayout_2;
 relative_coord(3, 2): dairyspritelayout_8;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_3, relative_pos) {
 relative_coord(0, 0): dairyspritelayout_7_anim;
 relative_coord(0, 1): dairyspritelayout_5;
 relative_coord(0, 2): dairyspritelayout_8;
 relative_coord(1, 0): dairyspritelayout_6;
 relative_coord(1, 1): dairyspritelayout_4;
 relative_coord(1, 2): dairyspritelayout_8;
 relative_coord(2, 1): dairyspritelayout_8;
 relative_coord(2, 2): dairyspritelayout_3;
 relative_coord(3, 1): dairyspritelayout_1;
 relative_coord(3, 2): dairyspritelayout_2;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_4, relative_pos) {
 relative_coord(0, 1): dairyspritelayout_5;
 relative_coord(0, 3): dairyspritelayout_5;
 relative_coord(1, 0): dairyspritelayout_6;
 relative_coord(1, 1): dairyspritelayout_4;
 relative_coord(1, 2): dairyspritelayout_6;
 relative_coord(1, 3): dairyspritelayout_4;
 relative_coord(2, 0): dairyspritelayout_8;
 relative_coord(2, 1): dairyspritelayout_8;
 relative_coord(2, 2): dairyspritelayout_3;
 relative_coord(2, 3): dairyspritelayout_8;
 relative_coord(3, 1): dairyspritelayout_1;
 relative_coord(3, 2): dairyspritelayout_2;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_5, relative_pos) {
 relative_coord(0, 0): dairyspritelayout_8;
 relative_coord(0, 1): dairyspritelayout_3;
 relative_coord(0, 2): dairyspritelayout_7_anim;
 relative_coord(0, 3): dairyspritelayout_5;
 relative_coord(1, 0): dairyspritelayout_1;
 relative_coord(1, 1): dairyspritelayout_2;
 relative_coord(1, 2): dairyspritelayout_6;
 relative_coord(1, 3): dairyspritelayout_4;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_6, relative_pos) {
 relative_coord(0, 0): dairyspritelayout_7_anim;
 relative_coord(0, 1): dairyspritelayout_5;
 relative_coord(1, 0): dairyspritelayout_6;
 relative_coord(1, 1): dairyspritelayout_4;
 relative_coord(3, 0): dairyspritelayout_8;
 relative_coord(3, 1): dairyspritelayout_3;
 relative_coord(4, 0): dairyspritelayout_1;
 relative_coord(4, 1): dairyspritelayout_2;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, SELF, dairylayout_7, relative_pos) {
 relative_coord(0, 0): dairyspritelayout_7_anim;
 relative_coord(0, 1): dairyspritelayout_5;
 relative_coord(0, 3): dairyspritelayout_7_anim;
 relative_coord(0, 4): dairyspritelayout_5;
 relative_coord(1, 0): dairyspritelayout_6;
 relative_coord(1, 1): dairyspritelayout_4;
 relative_coord(1, 3): dairyspritelayout_6;
 relative_coord(1, 4): dairyspritelayout_4;
 relative_coord(2, 0): dairyspritelayout_8;
 relative_coord(2, 1): dairyspritelayout_3;
 relative_coord(2, 3): dairyspritelayout_8;
 relative_coord(2, 4): dairyspritelayout_8;
 relative_coord(3, 0): dairyspritelayout_1;
 relative_coord(3, 1): dairyspritelayout_2;
 dairyspritelayout_7_anim;
}

switch(FEAT_INDUSTRYTILES, PARENT, dairylayout, layout_num) {
 1: dairylayout_1;
 2: dairylayout_2;
 3: dairylayout_3;
 4: dairylayout_4;
 5: dairylayout_5;
 6: dairylayout_6;
 7: dairylayout_7;
 dairylayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, dairytile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { dairylayout; }
switch (FEAT_INDUSTRYTILES, SELF, dairytile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { dairytile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, dairytile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { dairytile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, dairynearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, dairyplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dairynearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, dairylocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: dairyplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

switch(FEAT_INDUSTRYTILES, SELF, dairyanim_control, (extra_callback_info1 & 7)) {
 0: return 0;
 1: return 1;
 2: return 2;
 3: return 3;
 4: return 4;
 5: return 5;
 6: return 6;
 return CB_RESULT_START_ANIMATION;
}

item(FEAT_INDUSTRYTILES, dairytile, 181) {
 property {
  substitute: 0;
  accepted_cargos: [[MNSP, 8], [MILK, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
  animation_info: [ANIMATION_LOOPING, 7 * 6];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: dairyanim_control;
  tile_check: dairylocation_check;
  dairytile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_dairy_1 {
 0, 0: dairytile;
 0, 1: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 2, 0: dairytile;
 2, 1: dairytile;
 3, 0: dairytile;
 3, 1: dairytile;
}

tilelayout tilelayout_dairy_2 {
 0, 1: dairytile;
 0, 2: dairytile;
 1, 1: dairytile;
 1, 2: dairytile;
 2, 0: dairytile;
 2, 1: dairytile;
 2, 2: dairytile;
 3, 0: dairytile;
 3, 1: dairytile;
 3, 2: dairytile;
}

tilelayout tilelayout_dairy_3 {
 0, 0: dairytile;
 0, 1: dairytile;
 0, 2: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 1, 2: dairytile;
 2, 1: dairytile;
 2, 2: dairytile;
 3, 1: dairytile;
 3, 2: dairytile;
}

tilelayout tilelayout_dairy_4 {
 0, 0: dairytile;
 0, 1: dairytile;
 0, 2: dairytile;
 0, 3: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 1, 2: dairytile;
 1, 3: dairytile;
 2, 0: dairytile;
 2, 1: dairytile;
 2, 2: dairytile;
 2, 3: dairytile;
 3, 1: dairytile;
 3, 2: dairytile;
}

tilelayout tilelayout_dairy_5 {
 0, 0: dairytile;
 0, 1: dairytile;
 0, 2: dairytile;
 0, 3: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 1, 2: dairytile;
 1, 3: dairytile;
}

tilelayout tilelayout_dairy_6 {
 0, 0: dairytile;
 0, 1: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 3, 0: dairytile;
 3, 1: dairytile;
 4, 0: dairytile;
 4, 1: dairytile;
}

tilelayout tilelayout_dairy_7 {
 0, 0: dairytile;
 0, 1: dairytile;
 0, 3: dairytile;
 0, 4: dairytile;
 1, 0: dairytile;
 1, 1: dairytile;
 1, 3: dairytile;
 1, 4: dairytile;
 2, 0: dairytile;
 2, 1: dairytile;
 2, 3: dairytile;
 2, 4: dairytile;
 3, 0: dairytile;
 3, 1: dairytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 380 "sprites/nml/industries/dairy.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, dairydairy, industry_distance(dairy)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, dairydairy_farm, industry_distance(dairy_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dairydairy; }
switch (FEAT_INDUSTRIES, SELF, dairytown_distance, town_euclidean_dist(0, 0)) { 0 .. 64: dairydairy_farm; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRIES, SELF, dairycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dairytown_distance; }

switch(FEAT_INDUSTRIES, SELF, dairycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (dairysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, dairyproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 3 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 5 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 dairysimple_produce;
}
# 394 "sprites/nml/industries/dairy.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, dairyincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, dairyreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, dairycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: dairyincrease_closure_counter;
 dairyreset_closure_counter;
}
# 395 "sprites/nml/industries/dairy.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, dairyclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, dairyhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 dairyclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, dairycheck_closure, allow_close_secondary) {
 1..255: dairyhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 396 "sprites/nml/industries/dairy.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, dairyextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, dairyextra_text, [



   show_debug_texts
   ]) {
 1: dairyextra_text_debug;
 return string(STR_EXTRA_DAIRY);
}
# 398 "sprites/nml/industries/dairy.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, dairycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, dairyavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: dairycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, dairycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): dairyavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 400 "sprites/nml/industries/dairy.pnml" 2

item(FEAT_INDUSTRIES, dairy, 0x24) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_dairy_1,
    tilelayout_dairy_2,
    tilelayout_dairy_3,
    tilelayout_dairy_4,
    tilelayout_dairy_5,
    tilelayout_dairy_6,
    tilelayout_dairy_7
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_DAIRY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_DAIRY));
  prod_cargo_types: [FOOD];
  accept_cargo_types: [MNSP, MILK];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 45;
  map_colour: 15;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_HELICOPTER_CAN_EXPLODE);
 }
 graphics {
  produce_cargo_arrival: dairyproduce;
  construction_probability:dairycheck_availability;
  monthly_prod_change: dairycheck_production_level;
  random_prod_change: dairycheck_closure;
  extra_text_industry: dairyextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_DAIRY));
  colour: dairycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 447 "sprites/nml/industries/dairy.pnml" 2
# 43 "<stdin>" 2
# 1 "sprites/nml/industries/dairy_farm.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */





spriteset(dairy_farmspriteset_barn1, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(10, 10, 52, -21) }
spriteset(dairy_farmspriteset_silo, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(80, 10, 52, -21) }
spriteset(dairy_farmspriteset_barn2, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(150, 10, 52, -21) }
spriteset(dairy_farmspriteset_house, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(220, 10, 52, -21) }
spriteset(dairy_farmspriteset_cows_bw, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(290, 10, 52, -21) }
spriteset(dairy_farmspriteset_cows_brown, "sprites/graphics/industries/dairyfarm.png") { tmpl_building_sprite(360, 10, 52, -21) }

spritelayout dairy_farmspritelayout_barn1 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 building { sprite: dairy_farmspriteset_barn1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; }
}

spritelayout dairy_farmspritelayout_silo { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 building { sprite: dairy_farmspriteset_silo; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; }
}

spritelayout dairy_farmspritelayout_barn2 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 building { sprite: dairy_farmspriteset_barn2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; }
}

spritelayout dairy_farmspritelayout_house { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 building { sprite: dairy_farmspriteset_house; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; }
}

spritelayout dairy_farmspritelayout_cows_bw { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 building { sprite: dairy_farmspriteset_cows_bw; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; }
}

spritelayout dairy_farmspritelayout_cows_brown { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 building { sprite: dairy_farmspriteset_cows_brown; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; }
}

spritelayout dairy_farmspritelayout_cows_bw_dirt { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 building { sprite: dairy_farmspriteset_cows_bw; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; }
}

spritelayout dairy_farmspritelayout_cows_brown_dirt { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 building { sprite: dairy_farmspriteset_cows_brown; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; }
}

switch(FEAT_INDUSTRYTILES, SELF, dairy_farmlayout_1, relative_pos) {
 relative_coord(3, 0): dairy_farmspritelayout_barn1;
 relative_coord(2, 0): dairy_farmspritelayout_silo;
 relative_coord(3, 2): dairy_farmspritelayout_barn2;
 relative_coord(0, 2): dairy_farmspritelayout_house;
 relative_coord(0, 1): dairy_farmspritelayout_cows_bw;
 relative_coord(0, 0): dairy_farmspritelayout_cows_brown;
 relative_coord(2, 1): dairy_farmspritelayout_cows_bw_dirt;
 dairy_farmspritelayout_cows_brown_dirt;
}

switch(FEAT_INDUSTRYTILES, SELF, dairy_farmlayout_2, relative_pos) {
 relative_coord(0, 2): dairy_farmspritelayout_barn1;
 relative_coord(1, 2): dairy_farmspritelayout_silo;
 relative_coord(1, 1): dairy_farmspritelayout_barn2;
 relative_coord(2, 2): dairy_farmspritelayout_house;
 relative_coord(2, 0): dairy_farmspritelayout_cows_bw;
 relative_coord(2, 1): dairy_farmspritelayout_cows_brown;
 relative_coord(0, 1): dairy_farmspritelayout_cows_bw_dirt;
 dairy_farmspritelayout_cows_brown_dirt;
}

switch(FEAT_INDUSTRYTILES, SELF, dairy_farmlayout_3, relative_pos) {
 relative_coord(0, 1): dairy_farmspritelayout_barn1;
 relative_coord(2, 0): dairy_farmspritelayout_silo;
 relative_coord(1, 0): dairy_farmspritelayout_barn2;
 relative_coord(0, 3): dairy_farmspritelayout_house;
 relative_coord(1, 3): dairy_farmspritelayout_cows_bw;
 relative_coord(2, 3): dairy_farmspritelayout_cows_brown;
 relative_coord(2, 1): dairy_farmspritelayout_cows_bw_dirt;
 dairy_farmspritelayout_cows_brown_dirt;
}

switch(FEAT_INDUSTRYTILES, PARENT, dairy_farmtile_spritelayout, layout_num) {
 1: dairy_farmlayout_1;
 2: dairy_farmlayout_2;
 3: dairy_farmlayout_3;
 dairy_farmspritelayout_barn1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* Allow players to build it also on snow and in the desert */
switch(FEAT_INDUSTRYTILES, SELF, dairy_farmtile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, dairy_farmtile_slope_check, nearby_tile_slope(0,0) & bitmask(IS_STEEP_SLOPE)) { 0: dairy_farmtile_nearby_industry; return string(STR_ERR_LOCATION_NOT_ON_STEEP_SLOPE); }
switch(FEAT_INDUSTRYTILES, SELF, dairy_farmtile_height_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: dairy_farmtile_slope_check; return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE); }
switch(FEAT_INDUSTRYTILES, SELF, dairy_farmtile_desert_check, (nearby_tile_terrain_type( 1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 1) == TILETYPE_DESERT) ) { 1: return string(STR_ERR_LOCATION_NOT_IN_DESERT); dairy_farmtile_height_check; }
switch (FEAT_INDUSTRYTILES, PARENT, dairy_farmtile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dairy_farmtile_desert_check; }
switch(FEAT_INDUSTRYTILES, SELF, dairy_farmtile_location_check, nearby_tile_is_water(0, 0)) { 1: string(STR_ERR_LOCATION_NOT_ON_WATER); dairy_farmtile_player_check; }

/* Tile which is built upon foundations and with autoslope */
item(FEAT_INDUSTRYTILES, dairy_farmtile_house, 180) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }

 graphics {
  tile_check: dairy_farmtile_location_check;
  dairy_farmtile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_dairy_farm_1 {
 0, 0: dairy_farmtile_house;
 0, 1: dairy_farmtile_house;
 0, 2: dairy_farmtile_house;
 2, 0: dairy_farmtile_house;
 2, 1: dairy_farmtile_house;
 3, 0: dairy_farmtile_house;
 3, 1: dairy_farmtile_house;
 3, 2: dairy_farmtile_house;
}

tilelayout tilelayout_dairy_farm_2 {
 0, 0: dairy_farmtile_house;
 0, 1: dairy_farmtile_house;
 0, 2: dairy_farmtile_house;
 1, 1: dairy_farmtile_house;
 1, 2: dairy_farmtile_house;
 2, 0: dairy_farmtile_house;
 2, 1: dairy_farmtile_house;
 2, 2: dairy_farmtile_house;
}

tilelayout tilelayout_dairy_farm_3 {
 0, 1: dairy_farmtile_house;
 0, 3: dairy_farmtile_house;
 1, 0: dairy_farmtile_house;
 1, 1: dairy_farmtile_house;
 1, 3: dairy_farmtile_house;
 2, 0: dairy_farmtile_house;
 2, 1: dairy_farmtile_house;
 2, 3: dairy_farmtile_house;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, dairy_farmdairy_farm, industry_count(dairy_farm) * 1 / 2 / industry_clusters != 0 && ( industry_distance(dairy_farm) < 10 || industry_distance(dairy_farm) > 36) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, dairy_farmdairy, industry_distance(dairy)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dairy_farmdairy_farm; }
switch (FEAT_INDUSTRIES, SELF, dairy_farmstockyard, industry_distance(stockyard)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dairy_farmdairy; }
switch (FEAT_INDUSTRIES, SELF, dairy_farmcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dairy_farmstockyard; }

switch(FEAT_INDUSTRIES, SELF, dairy_farmcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(dairy_farmproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, dairy_farmproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 dairy_farmproduction;
}
# 173 "sprites/nml/industries/dairy_farm.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, dairy_farmcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, dairy_farmrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, dairy_farmrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, dairy_farmdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: dairy_farmrandom_slow_decrease;
 dairy_farmrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, dairy_farmcheck_decrease_production, allow_primary_production_decrease) {
 1..255: dairy_farmdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, dairy_farmrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, dairy_farmcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: dairy_farmrandom_increase;
 dairy_farmcheck_decrease_production;
}
# 174 "sprites/nml/industries/dairy_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, dairy_farmextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 176 "sprites/nml/industries/dairy_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, dairy_farmcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, dairy_farmavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: dairy_farmcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, dairy_farmcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): dairy_farmavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 178 "sprites/nml/industries/dairy_farm.pnml" 2

item(FEAT_INDUSTRIES, dairy_farm, 0x1C) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_dairy_farm_1,
    tilelayout_dairy_farm_2,
    tilelayout_dairy_farm_3
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_FARM;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_DAIRYFARM);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_DAIRYFARM));
  prod_cargo_types: [LVST, MILK];
  accept_cargo_types: [FMSP];
  prod_multiplier: [4, 4];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 1;
  conflicting_ind_types: [];
  prob_random: 18;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 60;
  map_colour: 164;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: dairy_farmproduce;
  construction_probability:dairy_farmcheck_availability;
  monthly_prod_change: dairy_farmcheck_production_level;
  random_prod_change: dairy_farmcheck_closure;
  build_prod_change: 8;
  extra_text_industry: dairy_farmextra_text;
  colour: dairy_farmcolour;
 }
}
# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 221 "sprites/nml/industries/dairy_farm.pnml" 2
# 44 "<stdin>" 2
# 1 "sprites/nml/industries/dredging_site.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(dredgine_sitespriteset_1) {
 tmpl_building_sprite_filename(10, 10, 100, -65, "sprites/graphics/industries/dredgingsite.png")
}

spritelayout dredgine_sitespritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_WATER; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: dredgine_sitespriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 74; } }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, dredgine_sitetile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, dredgine_sitetile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dredgine_sitetile_nearby_industry; }

item(FEAT_INDUSTRYTILES, dredgine_sitetile, 198) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: dredgine_sitetile_location_check;
  dredgine_sitespritelayout_1;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_dredging_site_1 {
 0, 0: 255;
 0, 1: 24;
 0, 2: 24;
 0, 4: 255;
 1, 0: 255;
 1, 4: 255;
 2, 0: 255;
 2, 2: 255;
 2, 3: dredgine_sitetile;
 2, 4: 255;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, dredgine_sitedredging_site, industry_distance(dredging_site)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, dredgine_sitelime_kiln, industry_distance(lime_kiln)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dredgine_sitedredging_site; }
switch (FEAT_INDUSTRIES, SELF, dredgine_siteglass_works, industry_distance(glass_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dredgine_sitelime_kiln; }
switch (FEAT_INDUSTRIES, SELF, dredgine_sitecement_plant, industry_distance(cement_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dredgine_siteglass_works; }
switch (FEAT_INDUSTRIES, SELF, dredgine_sitebrick_works, industry_distance(brick_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; dredgine_sitecement_plant; }
switch (FEAT_INDUSTRIES, SELF, dredgine_sitecoastal_distance, water_distance) { 0 .. param_max_coastal_distance: dredgine_sitebrick_works; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRIES, SELF, dredgine_sitecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; dredgine_sitecoastal_distance; }

switch(FEAT_INDUSTRIES, SELF, dredgine_sitecolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(dredgine_siteproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, dredgine_siteproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 dredgine_siteproduction;
}
# 72 "sprites/nml/industries/dredging_site.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, dredgine_sitecheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, dredgine_siterandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, dredgine_siterandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, dredgine_sitedecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: dredgine_siterandom_slow_decrease;
 dredgine_siterandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, dredgine_sitecheck_decrease_production, allow_primary_production_decrease) {
 1..255: dredgine_sitedecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, dredgine_siterandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, dredgine_sitecheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: dredgine_siterandom_increase;
 dredgine_sitecheck_decrease_production;
}
# 73 "sprites/nml/industries/dredging_site.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, dredgine_siteextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 75 "sprites/nml/industries/dredging_site.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, dredgine_sitecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, dredgine_siteavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: dredgine_sitecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, dredgine_sitecheck_availability, current_date) {
 date(1852,1,1) .. date(5000000,12,31): dredgine_siteavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 77 "sprites/nml/industries/dredging_site.pnml" 2

item(FEAT_INDUSTRIES, dredging_site, 0x14) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_dredging_site_1
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_DREDGING_SITE);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_DREDGING_SITE));
  prod_cargo_types: [SAND, GRVL];
  accept_cargo_types: [ENSP];
  prod_multiplier: [13, 13];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 180;
  map_colour: 195;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
 }
 graphics {
  produce_cargo_arrival: dredgine_siteproduce;
  construction_probability:dredgine_sitecheck_availability;
  monthly_prod_change: dredgine_sitecheck_production_level;
  random_prod_change: dredgine_sitecheck_closure;
  build_prod_change: 4;
  extra_text_industry: dredgine_siteextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_DREDGING_SITE));
  colour: dredgine_sitecolour;
 }
}
# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 119 "sprites/nml/industries/dredging_site.pnml" 2
# 45 "<stdin>" 2
# 1 "sprites/nml/industries/fertiliser_plant.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/fertiliser_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/smoke_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Creates a small puff of dark smoke that slowly rises until dissapearing. */
# 20 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a small puff of white smoke that slowly rises until dissapearing. */
# 32 "sprites/nml/industries/../templates/smoke_templates.pnml"
/* Creates a long column of white smoke. */
# 10 "sprites/nml/industries/fertiliser_plant.pnml" 2



spriteset(fertiliser_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) }

spriteset(fertiliser_plantspriteset_1, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(80, 10, 114, -88) }
spriteset(fertiliser_plantspriteset_2, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(150, 10, 114, -83) }
spriteset(fertiliser_plantspriteset_3, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(220, 10, 114, -83) }
spriteset(fertiliser_plantspriteset_4, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(290, 10, 114, -83) }
spriteset(fertiliser_plantspriteset_5, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(360, 10, 66, -35) }
spriteset(fertiliser_plantspriteset_6, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(430, 10, 66, -35) }
spriteset(fertiliser_plantspriteset_7, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(500, 10, 66, -35) }
spriteset(fertiliser_plantspriteset_8, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(570, 10, 66, -35) }
spriteset(fertiliser_plantspriteset_9, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(640, 10, 66, -35) }
spriteset(fertiliser_plantspriteset_10, "sprites/graphics/industries/fertiliserplant.png") { tmpl_building_sprite(710, 10, 66, -35) }

spritelayout fertiliser_plantspritelayout_large_building_left { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_large_building_centre { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_large_building_right { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_large_store_left { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_large_store_right { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_spherical_tanks { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_cylinder_tanks { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_office { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_9; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_forklift { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_10; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout fertiliser_plantspritelayout_chimney_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fertiliser_plantspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 5; yoffset: 0; zoffset: 69; xextent: 15; yextent: 7; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 9; yoffset: 0; zoffset: 69; xextent: 15; yextent: 7; zextent: 7; }
}

spritelayout fertiliser_plantspritelayout_concrete { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: fertiliser_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } }

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_1, relative_pos) {
 relative_coord(0, 0): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(0, 1): fertiliser_plantspritelayout_large_building_right;
 relative_coord(0, 2): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(1, 0): fertiliser_plantspritelayout_large_store_right;
 relative_coord(1, 1): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 2): fertiliser_plantspritelayout_office;
 relative_coord(2, 0): fertiliser_plantspritelayout_large_store_left;
 relative_coord(2, 1): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 2): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(3, 0): fertiliser_plantspritelayout_forklift;
 relative_coord(3, 1): fertiliser_plantspritelayout_concrete;
 relative_coord(3, 2): fertiliser_plantspritelayout_spherical_tanks;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_2, relative_pos) {
 relative_coord(0, 0): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(0, 1): fertiliser_plantspritelayout_large_store_right;
 relative_coord(1, 0): fertiliser_plantspritelayout_large_building_right;
 relative_coord(1, 1): fertiliser_plantspritelayout_large_store_left;
 relative_coord(2, 0): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(2, 1): fertiliser_plantspritelayout_forklift;
 relative_coord(3, 0): fertiliser_plantspritelayout_large_building_left;
 relative_coord(3, 1): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(4, 0): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(4, 1): fertiliser_plantspritelayout_office;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_3, relative_pos) {
 relative_coord(0, 1): fertiliser_plantspritelayout_large_building_right;
 relative_coord(1, 0): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(1, 1): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 2): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(1, 3): fertiliser_plantspritelayout_large_store_right;
 relative_coord(2, 0): fertiliser_plantspritelayout_office;
 relative_coord(2, 1): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 2): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(2, 3): fertiliser_plantspritelayout_large_store_left;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_4, relative_pos) {
 relative_coord(0, 1): fertiliser_plantspritelayout_large_building_right;
 relative_coord(1, 0): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(1, 1): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 2): fertiliser_plantspritelayout_large_store_right;
 relative_coord(1, 3): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(2, 0): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(2, 1): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 2): fertiliser_plantspritelayout_large_store_left;
 relative_coord(2, 3): fertiliser_plantspritelayout_office;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_5, relative_pos) {
 relative_coord(0, 0): fertiliser_plantspritelayout_large_building_right;
 relative_coord(0, 2): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(1, 0): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 2): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(2, 0): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 2): fertiliser_plantspritelayout_large_store_right;
 relative_coord(3, 0): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(3, 2): fertiliser_plantspritelayout_large_store_left;
 relative_coord(4, 0): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(4, 2): fertiliser_plantspritelayout_large_store_right;
 relative_coord(5, 0): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(5, 2): fertiliser_plantspritelayout_large_store_left;
 relative_coord(6, 0): fertiliser_plantspritelayout_office;
 relative_coord(6, 2): fertiliser_plantspritelayout_forklift;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_6, relative_pos) {
 relative_coord(0, 0): fertiliser_plantspritelayout_large_building_right;
 relative_coord(0, 2): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(0, 3): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(1, 0): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 2): fertiliser_plantspritelayout_large_store_right;
 relative_coord(1, 3): fertiliser_plantspritelayout_large_store_right;
 relative_coord(2, 0): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 2): fertiliser_plantspritelayout_large_store_left;
 relative_coord(2, 3): fertiliser_plantspritelayout_large_store_left;
 relative_coord(3, 0): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(3, 2): fertiliser_plantspritelayout_forklift;
 relative_coord(3, 3): fertiliser_plantspritelayout_concrete;
 relative_coord(4, 0): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(4, 2): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(4, 3): fertiliser_plantspritelayout_office;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_plantlayout_7, relative_pos) {
 relative_coord(0, 0): fertiliser_plantspritelayout_large_building_right;
 relative_coord(0, 1): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(0, 2): fertiliser_plantspritelayout_chimney_anim;
 relative_coord(0, 5): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(0, 6): fertiliser_plantspritelayout_forklift;
 relative_coord(1, 0): fertiliser_plantspritelayout_large_building_centre;
 relative_coord(1, 1): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(1, 2): fertiliser_plantspritelayout_large_store_right;
 relative_coord(1, 5): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(1, 6): fertiliser_plantspritelayout_large_store_right;
 relative_coord(2, 0): fertiliser_plantspritelayout_large_building_left;
 relative_coord(2, 1): fertiliser_plantspritelayout_concrete;
 relative_coord(2, 2): fertiliser_plantspritelayout_large_store_left;
 relative_coord(2, 5): fertiliser_plantspritelayout_office;
 relative_coord(2, 6): fertiliser_plantspritelayout_large_store_left;
 relative_coord(4, 0): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(4, 1): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(4, 2): fertiliser_plantspritelayout_office;
 relative_coord(4, 5): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(4, 6): fertiliser_plantspritelayout_forklift;
 relative_coord(5, 1): fertiliser_plantspritelayout_spherical_tanks;
 relative_coord(5, 2): fertiliser_plantspritelayout_forklift;
 relative_coord(5, 5): fertiliser_plantspritelayout_cylinder_tanks;
 relative_coord(5, 6): fertiliser_plantspritelayout_office;
 fertiliser_plantspritelayout_cylinder_tanks;
}

switch(FEAT_INDUSTRYTILES, PARENT, fertiliser_planttile_spritelayout, layout_num) {
 1: fertiliser_plantlayout_1;
 2: fertiliser_plantlayout_2;
 3: fertiliser_plantlayout_3;
 4: fertiliser_plantlayout_4;
 5: fertiliser_plantlayout_5;
 6: fertiliser_plantlayout_6;
 7: fertiliser_plantlayout_7;
 fertiliser_plantlayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_planttile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, fertiliser_planttile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fertiliser_planttile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, fertiliser_planttile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: fertiliser_planttile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

switch(FEAT_INDUSTRYTILES, SELF, fertiliser_planttile_anim_control, (extra_callback_info1 & 7)) {
 0: return 0;
 1: return 1;
 2: return 2;
 3: return 3;
 4: return 4;
 5: return 5;
 6: return 6;
 return CB_RESULT_NEXT_FRAME;
}

item(FEAT_INDUSTRYTILES, fertiliser_planttile, 163) {
 property {
  substitute: 0;
  accepted_cargos: [[RFPR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
  animation_info: [ANIMATION_LOOPING, 7];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: fertiliser_planttile_anim_control;
  tile_check: fertiliser_planttile_location_check;
  fertiliser_planttile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_fertiliser_plant_1 {
 0, 0: fertiliser_planttile;
 0, 1: fertiliser_planttile;
 0, 2: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 1: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 1: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 3, 0: fertiliser_planttile;
 3, 1: fertiliser_planttile;
 3, 2: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_2 {
 0, 0: fertiliser_planttile;
 0, 1: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 1: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 1: fertiliser_planttile;
 3, 0: fertiliser_planttile;
 3, 1: fertiliser_planttile;
 4, 0: fertiliser_planttile;
 4, 1: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_3 {
 0, 1: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 1: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 1, 3: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 1: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 2, 3: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_4 {
 0, 1: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 1: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 1, 3: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 1: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 2, 3: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_5 {
 0, 0: fertiliser_planttile;
 0, 2: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 3, 0: fertiliser_planttile;
 3, 2: fertiliser_planttile;
 4, 0: fertiliser_planttile;
 4, 2: fertiliser_planttile;
 5, 0: fertiliser_planttile;
 5, 2: fertiliser_planttile;
 6, 0: fertiliser_planttile;
 6, 2: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_6 {
 0, 0: fertiliser_planttile;
 0, 2: fertiliser_planttile;
 0, 3: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 1, 3: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 2, 3: fertiliser_planttile;
 3, 0: fertiliser_planttile;
 3, 2: fertiliser_planttile;
 3, 3: fertiliser_planttile;
 4, 0: fertiliser_planttile;
 4, 2: fertiliser_planttile;
 4, 3: fertiliser_planttile;
}

tilelayout tilelayout_fertiliser_plant_7 {
 0, 0: fertiliser_planttile;
 0, 1: fertiliser_planttile;
 0, 2: fertiliser_planttile;
 0, 5: fertiliser_planttile;
 0, 6: fertiliser_planttile;
 1, 0: fertiliser_planttile;
 1, 1: fertiliser_planttile;
 1, 2: fertiliser_planttile;
 1, 5: fertiliser_planttile;
 1, 6: fertiliser_planttile;
 2, 0: fertiliser_planttile;
 2, 1: fertiliser_planttile;
 2, 2: fertiliser_planttile;
 2, 5: fertiliser_planttile;
 2, 6: fertiliser_planttile;
 4, 0: fertiliser_planttile;
 4, 1: fertiliser_planttile;
 4, 2: fertiliser_planttile;
 4, 5: fertiliser_planttile;
 4, 6: fertiliser_planttile;
 5, 1: fertiliser_planttile;
 5, 2: fertiliser_planttile;
 5, 5: fertiliser_planttile;
 5, 6: fertiliser_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 353 "sprites/nml/industries/fertiliser_plant.pnml"
/* extra text template */



/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, fertiliser_plantfertiliser_plant, industry_distance(fertiliser_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, fertiliser_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fertiliser_plantfertiliser_plant; }

switch(FEAT_INDUSTRIES, SELF, fertiliser_plantcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (fertiliser_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, fertiliser_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 8 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 1 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 1 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 fertiliser_plantsimple_produce;
}
# 366 "sprites/nml/industries/fertiliser_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, fertiliser_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, fertiliser_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, fertiliser_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: fertiliser_plantincrease_closure_counter;
 fertiliser_plantreset_closure_counter;
}
# 367 "sprites/nml/industries/fertiliser_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, fertiliser_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, fertiliser_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 fertiliser_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, fertiliser_plantcheck_closure, allow_close_secondary) {
 1..255: fertiliser_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 368 "sprites/nml/industries/fertiliser_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, fertiliser_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, fertiliser_plantextra_text, [

   STORE_TEMP(((8<<16) | 8), 256),

   show_debug_texts
   ]) {
 1: fertiliser_plantextra_text_debug;
 return string(STR_EXTRA_FERTILIZER_PLANT);
}
# 370 "sprites/nml/industries/fertiliser_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, fertiliser_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, fertiliser_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: fertiliser_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, fertiliser_plantcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): fertiliser_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 372 "sprites/nml/industries/fertiliser_plant.pnml" 2

item(FEAT_INDUSTRIES, fertiliser_plant, 0x28) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_fertiliser_plant_1,
    tilelayout_fertiliser_plant_2,
    tilelayout_fertiliser_plant_3,
    tilelayout_fertiliser_plant_4,
    tilelayout_fertiliser_plant_5,
    tilelayout_fertiliser_plant_6,
    tilelayout_fertiliser_plant_7
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_FERTILISER_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_FERTILISER_PLANT));
  prod_cargo_types: [FMSP];
  accept_cargo_types: [RFPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 170;
  map_colour: 174;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: fertiliser_plantproduce;
  construction_probability:fertiliser_plantcheck_availability;
  monthly_prod_change: fertiliser_plantcheck_production_level;
  random_prod_change: fertiliser_plantcheck_closure;
  extra_text_industry: fertiliser_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_FERTILISER_PLANT));
  colour: fertiliser_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 419 "sprites/nml/industries/fertiliser_plant.pnml" 2
# 46 "<stdin>" 2
# 1 "sprites/nml/industries/fishing_grounds.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(fishing_groundsspriteset_1, "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(10, 10) }
spriteset(fishing_groundsspriteset_2, "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(80, 10) }
spriteset(fishing_groundsspriteset_3, "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(150, 10) }
spriteset(fishing_groundsspriteset_4, "sprites/graphics/industries/fishinggrounds.png") { tmpl_ground_tile(220, 10) }
spriteset(fishing_groundsspriteset_5, "sprites/graphics/industries/fishinggrounds.png") { tmpl_building_sprite(290, 10, 31, -32) }

spritelayout fishing_groundsspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_WATER; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fishing_groundsspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

spritelayout fishing_groundsspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_WATER; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fishing_groundsspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

spritelayout fishing_groundsspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_WATER; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: fishing_groundsspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

spritelayout fishing_groundsspritelayout_4 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 childsprite {
  sprite: fishing_groundsspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
 building {
  sprite: fishing_groundsspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_groundslayout_1, relative_pos) {
 relative_coord(3, 2): fishing_groundsspritelayout_1;
 relative_coord(3, 3): fishing_groundsspritelayout_4;
 relative_coord(3, 4): fishing_groundsspritelayout_2;
 fishing_groundsspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_groundslayout_2, relative_pos) {
 relative_coord(3, 2): fishing_groundsspritelayout_1;
 relative_coord(3, 3): fishing_groundsspritelayout_2;
 relative_coord(3, 4): fishing_groundsspritelayout_4;
 fishing_groundsspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_groundslayout_3, relative_pos) {
 relative_coord(2, 3): fishing_groundsspritelayout_3;
 relative_coord(5, 3): fishing_groundsspritelayout_4;
 fishing_groundsspritelayout_2;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_groundslayout_4, relative_pos) {
 relative_coord(3, 5): fishing_groundsspritelayout_1;
 relative_coord(3, 3): fishing_groundsspritelayout_4;
 relative_coord(3, 2): fishing_groundsspritelayout_2;
 fishing_groundsspritelayout_3;
}

switch(FEAT_INDUSTRYTILES, PARENT, fishing_groundslayout, layout_num) {
 1: fishing_groundslayout_1;
 2: fishing_groundslayout_2;
 3: fishing_groundslayout_3;
 4: fishing_groundslayout_4;
 fishing_groundsspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, fishing_groundstile, 204) {
 property {
  substitute: 0;
  accepted_cargos: [];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  fishing_groundslayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_fishing_grounds_1 {
 0, 0: 255;
 0, 1: 255;
 0, 2: 255;
 0, 3: 255;
 0, 4: 255;
 0, 5: 255;
 0, 6: 255;
 1, 0: 255;
 1, 1: 255;
 1, 2: 255;
 1, 3: 255;
 1, 4: 255;
 1, 5: 255;
 1, 6: 255;
 2, 0: 255;
 2, 1: 255;
 2, 2: 24;
 2, 3: 24;
 2, 4: 255;
 2, 5: 255;
 2, 6: 255;
 3, 0: 255;
 3, 1: 255;
 3, 2: fishing_groundstile;
 3, 3: fishing_groundstile;
 3, 4: fishing_groundstile;
 3, 5: 255;
 3, 6: 255;
 4, 0: 255;
 4, 1: 255;
 4, 2: 255;
 4, 3: fishing_groundstile;
 4, 4: 255;
 4, 5: 255;
 4, 6: 255;
 5, 0: 255;
 5, 1: 255;
 5, 2: 255;
 5, 3: 255;
 5, 4: 255;
 5, 5: 255;
 5, 6: 255;
 6, 0: 255;
 6, 1: 255;
 6, 2: 255;
 6, 3: 255;
 6, 4: 255;
 6, 5: 255;
 6, 6: 255;
}

tilelayout tilelayout_fishing_grounds_2 {
 0, 0: 255;
 0, 1: 255;
 0, 2: 255;
 0, 3: 255;
 0, 4: 255;
 0, 5: 255;
 0, 6: 255;
 1, 0: 255;
 1, 1: 255;
 1, 2: 255;
 1, 3: 255;
 1, 4: 255;
 1, 5: 255;
 1, 6: 255;
 2, 0: 255;
 2, 1: 255;
 2, 2: 255;
 2, 3: 24;
 2, 4: 24;
 2, 5: 255;
 2, 6: 255;
 3, 0: 255;
 3, 1: 255;
 3, 2: fishing_groundstile;
 3, 3: fishing_groundstile;
 3, 4: fishing_groundstile;
 3, 5: 255;
 3, 6: 255;
 4, 0: 255;
 4, 1: 255;
 4, 2: 255;
 4, 3: 255;
 4, 4: fishing_groundstile;
 4, 5: 255;
 4, 6: 255;
 5, 0: 255;
 5, 1: 255;
 5, 2: 255;
 5, 3: 255;
 5, 4: fishing_groundstile;
 5, 5: 255;
 5, 6: 255;
 6, 0: 255;
 6, 1: 255;
 6, 2: 255;
 6, 3: 255;
 6, 4: 255;
 6, 5: 255;
 6, 6: 255;
 7, 0: 255;
 7, 1: 255;
 7, 2: 255;
 7, 3: 255;
 7, 4: 255;
 7, 5: 255;
 7, 6: 255;
}

tilelayout tilelayout_fishing_grounds_3 {
 0, 0: 255;
 0, 1: 255;
 0, 2: 255;
 0, 3: 255;
 0, 4: 255;
 0, 5: 255;
 0, 6: 255;
 1, 0: 255;
 1, 1: 255;
 1, 2: 255;
 1, 3: 255;
 1, 4: 255;
 1, 5: 255;
 1, 6: 255;
 2, 0: 255;
 2, 1: 255;
 2, 2: 255;
 2, 3: fishing_groundstile;
 2, 4: 255;
 2, 5: 255;
 2, 6: 255;
 3, 0: 255;
 3, 1: 255;
 3, 2: 255;
 3, 3: 255;
 3, 4: 255;
 3, 5: 255;
 3, 6: 255;
 4, 0: 255;
 4, 1: 255;
 4, 2: 24;
 4, 3: 24;
 4, 4: 255;
 4, 5: 255;
 4, 6: 255;
 5, 0: 255;
 5, 1: 255;
 5, 2: fishing_groundstile;
 5, 3: fishing_groundstile;
 5, 4: fishing_groundstile;
 5, 5: 255;
 5, 6: 255;
 6, 0: 255;
 6, 1: 255;
 6, 2: 255;
 6, 3: 255;
 6, 4: 255;
 6, 5: 255;
 6, 6: 255;
 7, 0: 255;
 7, 1: 255;
 7, 2: 255;
 7, 3: 255;
 7, 4: 255;
 7, 5: 255;
 7, 6: 255;
}

tilelayout tilelayout_fishing_grounds_4 {
 0, 0: 255;
 0, 1: 255;
 0, 2: 255;
 0, 3: 255;
 0, 4: 255;
 0, 5: 255;
 0, 6: 255;
 0, 7: 255;
 1, 0: 255;
 1, 1: 255;
 1, 2: 255;
 1, 3: 255;
 1, 4: 255;
 1, 5: 255;
 1, 6: 255;
 1, 7: 255;
 2, 0: 255;
 2, 1: 255;
 2, 2: 24;
 2, 3: 24;
 2, 4: 255;
 2, 5: fishing_groundstile;
 2, 6: 255;
 2, 7: 255;
 3, 0: 255;
 3, 1: 255;
 3, 2: fishing_groundstile;
 3, 3: fishing_groundstile;
 3, 4: fishing_groundstile;
 3, 5: fishing_groundstile;
 3, 6: 255;
 3, 7: 255;
 4, 0: 255;
 4, 1: 255;
 4, 2: 255;
 4, 3: 255;
 4, 4: 255;
 4, 5: 255;
 4, 6: 255;
 4, 7: 255;
 5, 0: 255;
 5, 1: 255;
 5, 2: 255;
 5, 3: 255;
 5, 4: 255;
 5, 5: 255;
 5, 6: 255;
 5, 7: 255;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, fishing_groundsfishing_grounds, industry_count(fishing_grounds) * 3 / 4 / industry_clusters != 0 && ( industry_distance(fishing_grounds) < 16 || industry_distance(fishing_grounds) > 60) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, fishing_groundsfishing_harbour, industry_distance(fishing_harbour)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; fishing_groundsfishing_grounds; }
switch (FEAT_INDUSTRIES, SELF, fishing_groundscoastal_distance, water_distance) { 0 .. param_max_coastal_distance: fishing_groundsfishing_harbour; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRIES, SELF, fishing_groundscheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fishing_groundscoastal_distance; }

switch(FEAT_INDUSTRIES, SELF, fishing_groundscolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(fishing_groundsproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, fishing_groundsproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 fishing_groundsproduction;
}
# 328 "sprites/nml/industries/fishing_grounds.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, fishing_groundscheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, fishing_groundsavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: fishing_groundscheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, fishing_groundscheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): fishing_groundsavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 330 "sprites/nml/industries/fishing_grounds.pnml" 2

/* industry specific switch to randomise initial production; as Fishing Grounds never changes production, go for a wide range of productions*/
random_switch(FEAT_INDUSTRIES, SELF, fishing_groundsrandomise_primary_production_on_build) {
 1: return 8;
 1: return 12;
 3: return 16;
 2: return 20;
 2: return 24;
 1: return 28;
 1: return 32;
 1: return 36;
 1: return 40;
}


item(FEAT_INDUSTRIES, fishing_grounds, 0x20) {
 property {
  substitute: 5;
  layouts: [
    tilelayout_fishing_grounds_1,
    tilelayout_fishing_grounds_2,
    tilelayout_fishing_grounds_3,
    tilelayout_fishing_grounds_4
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_FISHING_GROUND);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_FISHING_GROUND));
  prod_cargo_types: [FISH];
  accept_cargo_types: [];
  prod_multiplier: [5, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;
  conflicting_ind_types: [];
  prob_random: 20;
  prob_in_game: 20;
  prospect_chance: 0.75;
  fund_cost_multiplier: 88;
  map_colour: 158;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(
                                 IND_FLAG_BUILT_ON_WATER,
               IND_FLAG_NO_PRODUCTION_INCREASE,
               IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES
           );
 }
 graphics {
  produce_cargo_arrival: fishing_groundsproduce;
  construction_probability:fishing_groundscheck_availability;
  monthly_prod_change: return CB_RESULT_IND_PROD_NO_CHANGE;
  random_prod_change: return CB_RESULT_IND_PROD_NO_CHANGE;
  build_prod_change: fishing_groundsrandomise_primary_production_on_build; // initial production customised to Fishing Grounds
//		extra_text_industry:     // no extra text. No production increase by means of FMSP
  colour: fishing_groundscolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 392 "sprites/nml/industries/fishing_grounds.pnml" 2
# 47 "<stdin>" 2

# 1 "sprites/nml/industries/fishing_harbour.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(fishing_harbourspriteset_1, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(10, 10, 39, -8) }

spriteset(fishing_harbourspriteset_2, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(10, 60, 39, -7) }

spriteset(fishing_harbourspriteset_3, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 60, 39, -7) }

spriteset(fishing_harbourspriteset_4, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(150, 60, 39, -7) }

spriteset(fishing_harbourspriteset_5, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(220, 60, 39, -7) }

spriteset(fishing_harbourspriteset_6, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(290, 60, 39, -7) }

spriteset(fishing_harbourspriteset_7, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(360, 60, 39, -7) }

spriteset(fishing_harbourspriteset_8, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 10, 39, 0) }

spriteset(fishing_harbourspriteset_9, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(150, 10, 39, 0) }

spriteset(fishing_harbourspriteset_10, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(220, 10, 39, 0) }

spriteset(fishing_harbourspriteset_11) { [10, 110, 64, 39, -35, -15, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(fishing_harbourspriteset_12, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(80, 110, 39, -14) }

spriteset(fishing_harbourspriteset_13) { [150, 110, 64, 39, -37, -8, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(fishing_harbourspriteset_14) { [220, 110, 64, 39, -27, -12, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(fishing_harbourspriteset_15) { [290, 110, 64, 39, -15, -11, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(fishing_harbourspriteset_16) { [360, 110, 64, 39, -45, -15, "sprites/graphics/industries/fishingharbour.png"] }
// ramp part 1
spriteset(fishing_harbourspriteset_17, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(440, 110, 74, -26) }
// ramp part 2
spriteset(fishing_harbourspriteset_18) { [510, 110, 64, 74, -31, -42, "sprites/graphics/industries/fishingharbour.png"] }

spriteset(fishing_harbourspriteset_19, "sprites/graphics/industries/fishingharbour.png") { tmpl_building_sprite(360, 10, 39, 0) }


spritelayout fishing_harbourspritelayout_1 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_2 {
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_3 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_4 {
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_5 {
 building {
  sprite: fishing_harbourspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_6 {
 building {
  sprite: fishing_harbourspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_7 {
 building {
  sprite: fishing_harbourspriteset_6;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_8 {
 building {
  sprite: fishing_harbourspriteset_6;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_9 {
 building {
  sprite: fishing_harbourspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_19;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_10 {
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
}

spritelayout fishing_harbourspritelayout_11 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_12 {
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_13 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_14 {
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_15 {
 building {
  sprite: fishing_harbourspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_16 {
 building {
  sprite: fishing_harbourspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_17 {
 building {
  sprite: fishing_harbourspriteset_6;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_18 {
 building {
  sprite: fishing_harbourspriteset_6;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_19 {
 building {
  sprite: fishing_harbourspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_20 {
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_21 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_11;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_22 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_12;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_23 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_13;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_24 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_14;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_25 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_14;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
 childsprite {
  sprite: fishing_harbourspriteset_14;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xoffset: 12;
  yoffset: 18;
 }
}

spritelayout fishing_harbourspritelayout_26 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_15;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_27 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_16;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

spritelayout fishing_harbourspritelayout_28 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_9;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  yoffset: 4;
  zoffset: 27;
  yextent: 12;
 }
}

spritelayout fishing_harbourspritelayout_29 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_10;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xoffset: 4;
  zoffset: 27;
  xextent: 12;
 }
}

spritelayout fishing_harbourspritelayout_30 {
 building {
  sprite: fishing_harbourspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
  zextent: 7;
 }
 building {
  sprite: fishing_harbourspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
 building {
  sprite: fishing_harbourspriteset_9;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xoffset: 5;
  zoffset: 40;
  xextent: 11;
 }
}

spritelayout fishing_harbourspritelayout_31 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_17;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
}

spritelayout fishing_harbourspritelayout_32 {
 ground {
  sprite: GROUNDSPRITE_WATER;
 }
 building {
  sprite: fishing_harbourspriteset_18;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  always_draw: 1;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4163, var[0x60, 0, 31, 0]) {
 0: fishing_harbourspritelayout_10;
 1: fishing_harbourspritelayout_4;
 2: fishing_harbourspritelayout_8;
 3: fishing_harbourspritelayout_9;
 4: fishing_harbourspritelayout_6;
 5: fishing_harbourspritelayout_5;
 6: fishing_harbourspritelayout_7;
 7: fishing_harbourspritelayout_10;
 8: fishing_harbourspritelayout_3;
 9: fishing_harbourspritelayout_4;
 10: fishing_harbourspritelayout_8;
 11: fishing_harbourspritelayout_9;
 12: fishing_harbourspritelayout_6;
 13: fishing_harbourspritelayout_5;
 14: fishing_harbourspritelayout_7;
 fishing_harbourspritelayout_10;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4164, var[0x60, 0, 31, 0]) {
 0: fishing_harbourspritelayout_20;
 1: fishing_harbourspritelayout_14;
 2: fishing_harbourspritelayout_18;
 3: fishing_harbourspritelayout_19;
 4: fishing_harbourspritelayout_16;
 5: fishing_harbourspritelayout_15;
 6: fishing_harbourspritelayout_17;
 7: fishing_harbourspritelayout_20;
 8: fishing_harbourspritelayout_13;
 9: fishing_harbourspritelayout_14;
 10: fishing_harbourspritelayout_18;
 11: fishing_harbourspritelayout_19;
 12: fishing_harbourspritelayout_16;
 13: fishing_harbourspritelayout_15;
 14: fishing_harbourspritelayout_17;
 fishing_harbourspritelayout_20;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourlayout_1, relative_pos) {
 relative_coord(0, 3): fishing_harbourspritelayout_27;
 relative_coord(0, 4): action2_4163;
 relative_coord(1, 1): fishing_harbourspritelayout_11;
 relative_coord(1, 2): fishing_harbourspritelayout_29;
 relative_coord(1, 3): fishing_harbourspritelayout_11;
 relative_coord(1, 4): action2_4164;
 relative_coord(2, 1): fishing_harbourspritelayout_24;
 relative_coord(2, 2): fishing_harbourspritelayout_24;
 fishing_harbourspritelayout_2;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourlayout_2, relative_pos) {
 relative_coord(1, 0): fishing_harbourspritelayout_23;
 relative_coord(1, 1): fishing_harbourspritelayout_23;
 relative_coord(2, 0): fishing_harbourspritelayout_30;
 relative_coord(2, 1): fishing_harbourspritelayout_12;
 relative_coord(2, 2): fishing_harbourspritelayout_21;
 relative_coord(3, 1): action2_4164;
 relative_coord(3, 2): action2_4163;
 fishing_harbourspritelayout_2;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourlayout_3, relative_pos) {
 relative_coord(0, 0): action2_4164;
 relative_coord(0, 1): action2_4164;
 relative_coord(0, 2): action2_4164;
 relative_coord(1, 0): fishing_harbourspritelayout_24;
 relative_coord(1, 2): fishing_harbourspritelayout_2;
 relative_coord(2, 1): fishing_harbourspritelayout_26;
 relative_coord(2, 2): fishing_harbourspritelayout_28;
 relative_coord(2, 3): fishing_harbourspritelayout_22;
 fishing_harbourspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourlayout_4, relative_pos) {
 relative_coord(0, 0): action2_4164;
 relative_coord(0, 1): fishing_harbourspritelayout_11;
 relative_coord(0, 2): fishing_harbourspritelayout_1;
 relative_coord(0, 3): fishing_harbourspritelayout_1;
 relative_coord(0, 4): fishing_harbourspritelayout_28;
 relative_coord(1, 0): action2_4163;
 relative_coord(1, 1): fishing_harbourspritelayout_31;
 relative_coord(1, 2): fishing_harbourspritelayout_32;
 relative_coord(1, 4): fishing_harbourspritelayout_25;
 fishing_harbourspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourlayout_5, relative_pos) {
 relative_coord(0, 0): action2_4163;
 relative_coord(1, 0): fishing_harbourspritelayout_3;
 relative_coord(2, 0): fishing_harbourspritelayout_3;
 relative_coord(2, 1): fishing_harbourspritelayout_31;
 relative_coord(2, 2): fishing_harbourspritelayout_32;
 relative_coord(3, 0): fishing_harbourspritelayout_30;
 relative_coord(3, 1): fishing_harbourspritelayout_13;
 relative_coord(3, 2): fishing_harbourspritelayout_13;
 relative_coord(4, 0): fishing_harbourspritelayout_24;
 relative_coord(4, 1): fishing_harbourspritelayout_24;
 relative_coord(4, 2): fishing_harbourspritelayout_24;
 fishing_harbourspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, fishing_harbourlayout, layout_num) {
 1: fishing_harbourlayout_1;
 2: fishing_harbourlayout_2;
 3: fishing_harbourlayout_3;
 4: fishing_harbourlayout_4;
 5: fishing_harbourlayout_5;
 fishing_harbourspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, fishing_harbourtile_1, 195) {
 property {
  substitute: 0;
  accepted_cargos: [[MNSP, 8], [FISH, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  fishing_harbourlayout;
 }
}

/* It must not be a flat tile */
switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourtile2_flat_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }

/* We allow on sea shores and on normal slopes - but not rivers and canals */
switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourtile2_land_check, nearby_tile_water_class(0,0) == WATER_CLASS_NONE) { 1: fishing_harbourtile2_flat_check; return CB_RESULT_LOCATION_DISALLOW; }
switch(FEAT_INDUSTRYTILES, SELF, fishing_harbourtile2_location_check, nearby_tile_water_class(0,0) == WATER_CLASS_SEA) { 1: fishing_harbourtile2_flat_check; fishing_harbourtile2_land_check; }

item(FEAT_INDUSTRYTILES, fishing_harbourtile_2, 196) {
 property {
  substitute: 0;
  accepted_cargos: [[MNSP, 8], [FISH, 8]];
  land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
 }

 graphics {
  foundations: return CB_RESULT_NO_FOUNDATIONS;
  tile_check: fishing_harbourtile2_location_check;
  fishing_harbourlayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_fishing_harbour_1 {
 0, 3: fishing_harbourtile_1;
 0, 4: fishing_harbourtile_2;
 1, 0: 255;
 1, 1: fishing_harbourtile_1;
 1, 2: fishing_harbourtile_1;
 1, 3: fishing_harbourtile_1;
 1, 4: fishing_harbourtile_2;
 2, 1: fishing_harbourtile_1;
 2, 2: fishing_harbourtile_1;
}

tilelayout tilelayout_fishing_harbour_2 {
 1, 255: 255;
 2, 255: 255;
 0, 0: 255;
 0, 1: 255;
 0, 2: 255;
 1, 0: fishing_harbourtile_1;
 1, 1: fishing_harbourtile_1;
 2, 0: fishing_harbourtile_1;
 2, 1: fishing_harbourtile_1;
 2, 2: fishing_harbourtile_1;
 3, 1: fishing_harbourtile_2;
 3, 2: fishing_harbourtile_2;
}

tilelayout tilelayout_fishing_harbour_3 {
 0, 0: fishing_harbourtile_2;
 0, 1: fishing_harbourtile_2;
 0, 2: fishing_harbourtile_2;
 1, 0: fishing_harbourtile_1;
 1, 2: fishing_harbourtile_1;
 2, 1: fishing_harbourtile_1;
 2, 2: fishing_harbourtile_1;
 2, 3: fishing_harbourtile_1;
 2, 4: 255;
 3, 2: 255;
 3, 3: 255;
}

tilelayout tilelayout_fishing_harbour_4 {
 0, 0: fishing_harbourtile_2;
 0, 1: fishing_harbourtile_1;
 0, 2: fishing_harbourtile_1;
 0, 3: fishing_harbourtile_1;
 0, 4: fishing_harbourtile_1;
 0, 5: 255;
 1, 0: fishing_harbourtile_2;
 1, 1: fishing_harbourtile_1;
 1, 2: fishing_harbourtile_1;
 1, 4: fishing_harbourtile_1;
 1, 5: 255;
 2, 3: 255;
 2, 4: 255;
 2, 5: 255;
}

tilelayout tilelayout_fishing_harbour_5 {
 0, 0: fishing_harbourtile_2;
 1, 0: fishing_harbourtile_1;
 1, 2: 255;
 2, 0: fishing_harbourtile_1;
 2, 1: fishing_harbourtile_1;
 2, 2: fishing_harbourtile_1;
 2, 3: 255;
 3, 0: fishing_harbourtile_1;
 3, 1: fishing_harbourtile_1;
 3, 2: fishing_harbourtile_1;
 3, 3: 255;
 4, 255: 255;
 4, 0: fishing_harbourtile_1;
 4, 1: fishing_harbourtile_1;
 4, 2: fishing_harbourtile_1;
 4, 3: 255;
 5, 255: 255;
 5, 0: 255;
 5, 1: 255;
 5, 2: 255;
 5, 3: 255;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 988 "sprites/nml/industries/fishing_harbour.pnml"
/* extra text template */




switch (FEAT_INDUSTRIES, SELF, fishing_harbourfishing_grounds, industry_count(fishing_grounds) * 5 / 4 / industry_clusters != 0 && ( industry_distance(fishing_grounds) < 16 || industry_distance(fishing_grounds) > 60) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, fishing_harbourcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fishing_harbourfishing_grounds; }

switch(FEAT_INDUSTRIES, SELF, fishing_harbourcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (fishing_harboursimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, fishing_harbourproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 5 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 fishing_harboursimple_produce;
}
# 999 "sprites/nml/industries/fishing_harbour.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, fishing_harbourincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, fishing_harbourreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, fishing_harbourcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: fishing_harbourincrease_closure_counter;
 fishing_harbourreset_closure_counter;
}
# 1000 "sprites/nml/industries/fishing_harbour.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, fishing_harbourclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, fishing_harbourhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 fishing_harbourclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, fishing_harbourcheck_closure, allow_close_secondary) {
 1..255: fishing_harbourhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 1001 "sprites/nml/industries/fishing_harbour.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, fishing_harbourextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, fishing_harbourextra_text, [



   show_debug_texts
   ]) {
 1: fishing_harbourextra_text_debug;
 return string(STR_EXTRA_FISHING_HARBOUR);
}
# 1003 "sprites/nml/industries/fishing_harbour.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, fishing_harbourcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, fishing_harbouravailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: fishing_harbourcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, fishing_harbourcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): fishing_harbouravailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 1005 "sprites/nml/industries/fishing_harbour.pnml" 2

item(FEAT_INDUSTRIES, fishing_harbour, 0x1F) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_fishing_harbour_1,
    tilelayout_fishing_harbour_2,
    tilelayout_fishing_harbour_3,
    tilelayout_fishing_harbour_4,
    tilelayout_fishing_harbour_5
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_FISHING_HARBOUR);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_FISHING_HARBOUR));
  prod_cargo_types: [FOOD];
  accept_cargo_types: [MNSP, FISH];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 14;
  prob_in_game: 8;
  prospect_chance: 0.75;
  fund_cost_multiplier: 150;
  map_colour: 15;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER,
                                  IND_FLAG_BUILT_NEAR_TOWN
         );
 }
 graphics {
  produce_cargo_arrival: fishing_harbourproduce;
  construction_probability:fishing_harbourcheck_availability;
  monthly_prod_change: fishing_harbourcheck_production_level;
  random_prod_change: fishing_harbourcheck_closure;
  extra_text_industry: fishing_harbourextra_text;
  colour: fishing_harbourcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 1051 "sprites/nml/industries/fishing_harbour.pnml" 2
# 49 "<stdin>" 2
# 1 "sprites/nml/industries/food_market.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/food_market.pnml" 2



spriteset(food_marketspriteset_ground_normal) { tmpl_ground_tile_filename(10, 10, "sprites/graphics/industries/foodmarket.png") }
spriteset(food_marketspriteset_ground_snow) { tmpl_ground_tile_filename(10, 10, "sprites/graphics/industries/foodmarket_snow.png") }

spriteset(food_marketspriteset_building_normal) { tmpl_building_sprite_filename(10, 60, 36, -4, "sprites/graphics/industries/foodmarket.png") }
spriteset(food_marketspriteset_building_snow) { tmpl_building_sprite_filename(10, 60, 36, -4, "sprites/graphics/industries/foodmarket_snow.png") }

spritelayout food_marketspritelayout_1 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: food_marketspriteset_ground_normal; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: GROUNDSPRITE_SNOW; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: food_marketspriteset_ground_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 // Add two trees; care for snow on snowy terrain. Climate-selection done
 // in defines.pnml (to allow also to select a different sprite in the presence
 // of other tree NewGRFs
 building {
  sprite: nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW ? market_tree : 1793;
  xoffset: 11;
  yoffset: 1;
  xextent: 6;
  yextent: 6;
 }
 building {
  sprite: nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW ? market_tree : 1793;
  xoffset: 11;
  yoffset: 6;
  xextent: 6;
  yextent: 6;
 }
 building { sprite: food_marketspriteset_building_normal; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; hide_sprite: !(nearby_tile_terrain_type(0, 0) != TILETYPE_SNOW); }
 building { sprite: food_marketspriteset_building_snow; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; hide_sprite: !(nearby_tile_terrain_type(0, 0) == TILETYPE_SNOW); }
}



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch (FEAT_INDUSTRYTILES, SELF, food_markettile_road_adjacent_4, nearby_tile_class(-1, 0)) { TILE_CLASS_ROAD: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, food_markettile_road_adjacent_3, nearby_tile_class(0, -1)) { TILE_CLASS_ROAD: return CB_RESULT_LOCATION_ALLOW; food_markettile_road_adjacent_4; }
switch (FEAT_INDUSTRYTILES, SELF, food_markettile_road_adjacent_2, nearby_tile_class(1, 0)) { TILE_CLASS_ROAD: return CB_RESULT_LOCATION_ALLOW; food_markettile_road_adjacent_3; }
switch (FEAT_INDUSTRYTILES, SELF, food_markettile_road_adjacent_1, nearby_tile_class(0, 1)) { TILE_CLASS_ROAD: return CB_RESULT_LOCATION_ALLOW; food_markettile_road_adjacent_2; }
switch (FEAT_INDUSTRYTILES, PARENT, food_marketterrain_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; food_markettile_road_adjacent_1; }

item(FEAT_INDUSTRYTILES, food_markettile, 194) {
 property {
  substitute: 0;
  accepted_cargos: [[FOOD, 8], [FRVG, 8], [BEER, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: food_marketterrain_check;
  food_marketspritelayout_1;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_food_market_1 {
 0, 0: food_markettile;
}
/* *************************************************
 * Definition of the industry
 * *************************************************/

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, food_marketcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, food_marketavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: food_marketcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, food_marketcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): food_marketavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 79 "sprites/nml/industries/food_market.pnml" 2


item(FEAT_INDUSTRIES, food_market, 0x3B) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_food_market_1
   ];
  name: string(STR_IND_FOOD_MARKET);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_FOOD_MARKET));
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;

  prod_cargo_types: [];
  accept_cargo_types: [FOOD, FRVG, BEER];

  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;

  life_type: IND_LIFE_TYPE_BLACK_HOLE;
  conflicting_ind_types: [food_market];
  prob_random: 24;
  prob_in_game: 12;
  prospect_chance: 0.75;
  fund_cost_multiplier: 6;
  remove_cost_multiplier: 0;
  map_colour: 191;
 }
 graphics {
  construction_probability:food_marketcheck_availability;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 117 "sprites/nml/industries/food_market.pnml" 2
# 50 "<stdin>" 2
# 1 "sprites/nml/industries/forest.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* **************
 * tile_trees
 * *************/

spritelayout action2_4257 {
 ground {
  sprite: 3962;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4258 {
 ground {
  sprite: 3963;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4259 {
 ground {
  sprite: 3964;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4260 {
 ground {
  sprite: 3965;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4261 {
 ground {
  sprite: 3966;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4262 {
 ground {
  sprite: 3967;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4263 {
 ground {
  sprite: 3968;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4264 {
 ground {
  sprite: 3969;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4265 {
 ground {
  sprite: 3970;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4266 {
 ground {
  sprite: 3971;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4267 {
 ground {
  sprite: 3972;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4268 {
 ground {
  sprite: 3973;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4269 {
 ground {
  sprite: 3974;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4270 {
 ground {
  sprite: 3975;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4271 {
 ground {
  sprite: 3976;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4272 {
 ground {
  sprite: 3977;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4273 {
 ground {
  sprite: 3978;
 }
 building {
  sprite: 1586;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4274 {
 ground {
  sprite: 3979;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1586;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4275 {
 ground {
  sprite: 3980;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1586;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4276, var[0x60, 0, 31, 0]) {
 0: action2_4257;
 1: action2_4258;
 2: action2_4259;
 3: action2_4260;
 4: action2_4261;
 5: action2_4262;
 6: action2_4263;
 7: action2_4264;
 8: action2_4265;
 9: action2_4266;
 10: action2_4267;
 11: action2_4268;
 12: action2_4269;
 13: action2_4270;
 14: action2_4271;
 29: action2_4272;
 23: action2_4273;
 27: action2_4274;
 30: action2_4275;
 action2_4257;
}

spritelayout action2_4280 {
 ground {
  sprite: 3962;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4281 {
 ground {
  sprite: 3963;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4282 {
 ground {
  sprite: 3964;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4283 {
 ground {
  sprite: 3965;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4284 {
 ground {
  sprite: 3966;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4285 {
 ground {
  sprite: 3967;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1711;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4286 {
 ground {
  sprite: 3968;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4287 {
 ground {
  sprite: 3969;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4288 {
 ground {
  sprite: 3970;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1711;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4289 {
 ground {
  sprite: 3971;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4290 {
 ground {
  sprite: 3972;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4291 {
 ground {
  sprite: 3973;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4292 {
 ground {
  sprite: 3974;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4293 {
 ground {
  sprite: 3975;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4294 {
 ground {
  sprite: 3976;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4295 {
 ground {
  sprite: 3977;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4296 {
 ground {
  sprite: 3978;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4297 {
 ground {
  sprite: 3979;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1593;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4298 {
 ground {
  sprite: 3980;
 }
 building {
  sprite: 1593;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1593;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4299, var[0x60, 0, 31, 0]) {
 0: action2_4280;
 1: action2_4281;
 2: action2_4282;
 3: action2_4283;
 4: action2_4284;
 5: action2_4285;
 6: action2_4286;
 7: action2_4287;
 8: action2_4288;
 9: action2_4289;
 10: action2_4290;
 11: action2_4291;
 12: action2_4292;
 13: action2_4293;
 14: action2_4294;
 29: action2_4295;
 23: action2_4296;
 27: action2_4297;
 30: action2_4298;
 action2_4280;
}

spritelayout action2_4302 {
 ground {
  sprite: 4493;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4303 {
 ground {
  sprite: 4494;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4304 {
 ground {
  sprite: 4495;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4305 {
 ground {
  sprite: 4496;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4306 {
 ground {
  sprite: 4497;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4307 {
 ground {
  sprite: 4498;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1711;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4308 {
 ground {
  sprite: 4499;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4309 {
 ground {
  sprite: 4500;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4310 {
 ground {
  sprite: 4501;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1711;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4311 {
 ground {
  sprite: 4502;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4312 {
 ground {
  sprite: 4503;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4313 {
 ground {
  sprite: 4504;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4314 {
 ground {
  sprite: 4505;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4315 {
 ground {
  sprite: 4506;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4316 {
 ground {
  sprite: 4507;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4317 {
 ground {
  sprite: 4508;
 }
 building {
  sprite: 1711;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4318 {
 ground {
  sprite: 4509;
 }
 building {
  sprite: 1733;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4319 {
 ground {
  sprite: 4510;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1733;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4320 {
 ground {
  sprite: 4511;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1733;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1711;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4321, var[0x60, 0, 31, 0]) {
 0: action2_4302;
 1: action2_4303;
 2: action2_4304;
 3: action2_4305;
 4: action2_4306;
 5: action2_4307;
 6: action2_4308;
 7: action2_4309;
 8: action2_4310;
 9: action2_4311;
 10: action2_4312;
 11: action2_4313;
 12: action2_4314;
 13: action2_4315;
 14: action2_4316;
 29: action2_4317;
 23: action2_4318;
 27: action2_4319;
 30: action2_4320;
 action2_4302;
}

spritelayout action2_4324 {
 ground {
  sprite: 4512;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4325 {
 ground {
  sprite: 4513;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4326 {
 ground {
  sprite: 4514;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4327 {
 ground {
  sprite: 4515;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4328 {
 ground {
  sprite: 4516;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4329 {
 ground {
  sprite: 4517;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4330 {
 ground {
  sprite: 4518;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4331 {
 ground {
  sprite: 4519;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4332 {
 ground {
  sprite: 4520;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4333 {
 ground {
  sprite: 4521;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4334 {
 ground {
  sprite: 4522;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4335 {
 ground {
  sprite: 4523;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4336 {
 ground {
  sprite: 4524;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4337 {
 ground {
  sprite: 4525;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4338 {
 ground {
  sprite: 4526;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4339 {
 ground {
  sprite: 4527;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4340 {
 ground {
  sprite: 4528;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4341 {
 ground {
  sprite: 4529;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4342 {
 ground {
  sprite: 4530;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4343, var[0x60, 0, 31, 0]) {
 0: action2_4324;
 1: action2_4325;
 2: action2_4326;
 3: action2_4327;
 4: action2_4328;
 5: action2_4329;
 6: action2_4330;
 7: action2_4331;
 8: action2_4332;
 9: action2_4333;
 10: action2_4334;
 11: action2_4335;
 12: action2_4336;
 13: action2_4337;
 14: action2_4338;
 29: action2_4339;
 23: action2_4340;
 27: action2_4341;
 30: action2_4342;
 action2_4324;
}

spritelayout action2_4346 {
 ground {
  sprite: 4531;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4347 {
 ground {
  sprite: 4532;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4348 {
 ground {
  sprite: 4533;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4349 {
 ground {
  sprite: 4534;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4350 {
 ground {
  sprite: 4535;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4351 {
 ground {
  sprite: 4536;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4352 {
 ground {
  sprite: 4537;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4353 {
 ground {
  sprite: 4538;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4354 {
 ground {
  sprite: 4539;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4355 {
 ground {
  sprite: 4540;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4356 {
 ground {
  sprite: 4541;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4357 {
 ground {
  sprite: 4542;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4358 {
 ground {
  sprite: 4543;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4359 {
 ground {
  sprite: 4544;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4360 {
 ground {
  sprite: 4545;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4361 {
 ground {
  sprite: 4546;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4362 {
 ground {
  sprite: 4547;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4363 {
 ground {
  sprite: 4548;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4364 {
 ground {
  sprite: 4549;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4365, var[0x60, 0, 31, 0]) {
 0: action2_4346;
 1: action2_4347;
 2: action2_4348;
 3: action2_4349;
 4: action2_4350;
 5: action2_4351;
 6: action2_4352;
 7: action2_4353;
 8: action2_4354;
 9: action2_4355;
 10: action2_4356;
 11: action2_4357;
 12: action2_4358;
 13: action2_4359;
 14: action2_4360;
 29: action2_4361;
 23: action2_4362;
 27: action2_4363;
 30: action2_4364;
 action2_4346;
}

spritelayout action2_4368 {
 ground {
  sprite: GROUNDSPRITE_SNOW;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4369 {
 ground {
  sprite: 4551;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4370 {
 ground {
  sprite: 4552;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4371 {
 ground {
  sprite: 4553;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4372 {
 ground {
  sprite: 4554;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4373 {
 ground {
  sprite: 4555;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4374 {
 ground {
  sprite: 4556;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4375 {
 ground {
  sprite: 4557;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4376 {
 ground {
  sprite: 4558;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1768;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4377 {
 ground {
  sprite: 4559;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4378 {
 ground {
  sprite: 4560;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4379 {
 ground {
  sprite: 4561;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4380 {
 ground {
  sprite: 4562;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4381 {
 ground {
  sprite: 4563;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4382 {
 ground {
  sprite: 4564;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4383 {
 ground {
  sprite: 4565;
 }
 building {
  sprite: 1768;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4384 {
 ground {
  sprite: 4566;
 }
 building {
  sprite: 1789;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4385 {
 ground {
  sprite: 4567;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1789;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1810;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4386 {
 ground {
  sprite: 4568;
 }
 building {
  sprite: 1810;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1810;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1789;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1768;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4387, var[0x60, 0, 31, 0]) {
 0: action2_4368;
 1: action2_4369;
 2: action2_4370;
 3: action2_4371;
 4: action2_4372;
 5: action2_4373;
 6: action2_4374;
 7: action2_4375;
 8: action2_4376;
 9: action2_4377;
 10: action2_4378;
 11: action2_4379;
 12: action2_4380;
 13: action2_4381;
 14: action2_4382;
 29: action2_4383;
 23: action2_4384;
 27: action2_4385;
 30: action2_4386;
 action2_4368;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4390, ((var[0x60, 16, 255, 0] - snowline_height) + 1)) {
 0..7: action2_4321;
 8..15: action2_4343;
 16..23: action2_4365;
 24..127: action2_4387;
 action2_4299;
}

spritelayout action2_4391 {
 ground {
  sprite: 3962;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4392 {
 ground {
  sprite: 3963;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4393 {
 ground {
  sprite: 3964;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4394 {
 ground {
  sprite: 3965;
 }
 building {
  sprite: 1871;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4395 {
 ground {
  sprite: 3966;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4396 {
 ground {
  sprite: 3967;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1871;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4397 {
 ground {
  sprite: 3968;
 }
 building {
  sprite: 1871;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4398 {
 ground {
  sprite: 3969;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4399 {
 ground {
  sprite: 3970;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1871;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4400 {
 ground {
  sprite: 3971;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4401 {
 ground {
  sprite: 3972;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4402 {
 ground {
  sprite: 3973;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4403 {
 ground {
  sprite: 3974;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4404 {
 ground {
  sprite: 3975;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4405 {
 ground {
  sprite: 3976;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4406 {
 ground {
  sprite: 3977;
 }
 building {
  sprite: 1871;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4407 {
 ground {
  sprite: 3978;
 }
 building {
  sprite: 1872;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4408 {
 ground {
  sprite: 3979;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1872;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1901;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4409 {
 ground {
  sprite: 3980;
 }
 building {
  sprite: 1901;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1901;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1872;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1871;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, switch_forest_default_layout, var[0x60, 0, 31, 0]) {
 0: action2_4391;
 1: action2_4392;
 2: action2_4393;
 3: action2_4394;
 4: action2_4395;
 5: action2_4396;
 6: action2_4397;
 7: action2_4398;
 8: action2_4399;
 9: action2_4400;
 10: action2_4401;
 11: action2_4402;
 12: action2_4403;
 13: action2_4404;
 14: action2_4405;
 29: action2_4406;
 23: action2_4407;
 27: action2_4408;
 30: action2_4409;
 action2_4391;
}

spritelayout action2_4413 {
 ground {
  sprite: 3943;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4414 {
 ground {
  sprite: 3944;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4415 {
 ground {
  sprite: 3945;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4416 {
 ground {
  sprite: 3946;
 }
 building {
  sprite: 1915;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4417 {
 ground {
  sprite: 3947;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4418 {
 ground {
  sprite: 3948;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1915;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4419 {
 ground {
  sprite: 3949;
 }
 building {
  sprite: 1915;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4420 {
 ground {
  sprite: 3950;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4421 {
 ground {
  sprite: 3951;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1915;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4422 {
 ground {
  sprite: 3952;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4423 {
 ground {
  sprite: 3953;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4424 {
 ground {
  sprite: 3954;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4425 {
 ground {
  sprite: 3955;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4426 {
 ground {
  sprite: 3956;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4427 {
 ground {
  sprite: 3957;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4428 {
 ground {
  sprite: 3958;
 }
 building {
  sprite: 1915;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4429 {
 ground {
  sprite: 3959;
 }
 building {
  sprite: 1899;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4430 {
 ground {
  sprite: 3960;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1899;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1900;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4431 {
 ground {
  sprite: 3961;
 }
 building {
  sprite: 1900;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1900;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1899;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1915;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, switch_forest_desert_layout, var[0x60, 0, 31, 0]) {
 0: action2_4413;
 1: action2_4414;
 2: action2_4415;
 3: action2_4416;
 4: action2_4417;
 5: action2_4418;
 6: action2_4419;
 7: action2_4420;
 8: action2_4421;
 9: action2_4422;
 10: action2_4423;
 11: action2_4424;
 12: action2_4425;
 13: action2_4426;
 14: action2_4427;
 29: action2_4428;
 23: action2_4429;
 27: action2_4430;
 30: action2_4431;
 action2_4413;
}

switch(FEAT_INDUSTRYTILES, SELF, switch_forest_terrain, terrain_type) {
 1: switch_forest_desert_layout;
 switch_forest_default_layout;
}

switch(FEAT_INDUSTRYTILES, SELF, foresttile_trees_spritelayout, var[0x03, 0, 255]) {
 1: action2_4390;
 2: switch_forest_terrain;
 action2_4276;
}

/* **************
 * tile_equipment
 * *************/

spriteset(spriteset_crane, "sprites/graphics/industries/forest.png") { tmpl_building_sprite(10, 10, 78, -45) }
spriteset(spriteset_bulldozer, "sprites/graphics/industries/forest.png") { tmpl_building_sprite(80, 10, 78, -45) }
spriteset(spriteset_tracks_snowtile, "sprites/graphics/industries/forest.png") { tmpl_building_sprite(220, 10, 78, -45) }

spritelayout foresttile_equipment_nonsnow_spritelayout {
 ground {
  sprite: 2022;
 }
 building {
  sprite: spriteset_crane;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xextent: 7;
  yextent: 7;
  zextent: 7;
  always_draw: 1;
 }
 building {
  sprite: spriteset_bulldozer;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xextent: 7;
  yextent: 7;
  zextent: 7;
  always_draw: 1;
 }
}

spritelayout foresttile_equipment_snow_spritelayout {
 ground {
  sprite: spriteset_tracks_snowtile;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
 building {
  sprite: spriteset_crane;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xextent: 7;
  yextent: 7;
  zextent: 7;
  always_draw: 1;
 }
 building {
  sprite: spriteset_bulldozer;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xextent: 7;
  yextent: 7;
  zextent: 7;
  always_draw: 1;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, foresttile_equipment_height_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: foresttile_equipment_nonsnow_spritelayout; foresttile_equipment_snow_spritelayout; }

switch(FEAT_INDUSTRYTILES, SELF, foresttile_equipment_spritelayout, climate) {
 CLIMATE_ARCTIC: foresttile_equipment_height_check;
 foresttile_equipment_nonsnow_spritelayout;
}

/* ****************************************************
 * Definition of the industry tiles and their callbacks
 * ***************************************************/

switch(FEAT_INDUSTRYTILES, SELF, foresttile_trees_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, foresttile_trees_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; foresttile_trees_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, foresttile_trees_water_check, nearby_tile_is_water(0, 0)) { 1: string(STR_ERR_LOCATION_NOT_ON_WATER); foresttile_trees_player_check; }
switch(FEAT_INDUSTRYTILES, SELF, foresttile_trees_location_check, (nearby_tile_terrain_type( 1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 1) == TILETYPE_DESERT) ) { 1: return string(STR_ERR_LOCATION_NOT_IN_DESERT); foresttile_trees_water_check; }

item(FEAT_INDUSTRYTILES, tile_trees, 205) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  foundations: return CB_RESULT_NO_FOUNDATIONS;
  autoslope: return CB_RESULT_NO_AUTOSLOPE;
  tile_check: foresttile_trees_location_check;
  foresttile_trees_spritelayout;
 }
}


switch(FEAT_INDUSTRYTILES, SELF, foresttile_equipment_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, foresttile_equipment_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; foresttile_equipment_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, foresttile_equipment_location_check, nearby_tile_is_water(0, 0)) { 1: CB_RESULT_LOCATION_DISALLOW; foresttile_equipment_player_check; }

item(FEAT_INDUSTRYTILES, tile_equipment, 206) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  tile_check: foresttile_equipment_location_check;
  foresttile_equipment_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_forest_1 {
 0, 0: tile_trees;
 0, 1: tile_trees;
 0, 2: tile_trees;
 1, 0: tile_trees;
 1, 1: tile_trees;
 1, 2: tile_trees;
 2, 1: tile_trees;
 2, 2: tile_equipment;
}

tilelayout tilelayout_forest_2 {
 0, 0: tile_trees;
 0, 1: tile_trees;
 0, 2: tile_trees;
 1, 0: tile_trees;
 1, 1: tile_trees;
 1, 2: tile_trees;
 3, 0: tile_trees;
 3, 1: tile_trees;
 3, 2: tile_equipment;
 4, 0: tile_trees;
 4, 1: tile_trees;
 4, 2: tile_trees;
}

tilelayout tilelayout_forest_3 {
 0, 1: tile_trees;
 0, 2: tile_trees;
 0, 3: tile_trees;
 1, 0: tile_trees;
 1, 1: tile_trees;
 1, 2: tile_trees;
 1, 3: tile_trees;
 1, 4: tile_trees;
 2, 0: tile_trees;
 2, 1: tile_trees;
 2, 2: tile_trees;
 2, 3: tile_trees;
 3, 0: tile_trees;
 3, 1: tile_trees;
 3, 2: tile_equipment;
 4, 0: tile_trees;
 4, 1: tile_trees;
 5, 0: tile_trees;
 5, 1: tile_trees;
 5, 2: tile_trees;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, forestforest, industry_count(forest) * 3 / 4 / industry_clusters != 0 && ( industry_distance(forest) < 15 || industry_distance(forest) > 80) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, forestsawmill, industry_distance(sawmill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; forestforest; }
switch (FEAT_INDUSTRIES, SELF, forestpaper_mill, industry_distance(paper_mill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; forestsawmill; }
switch (FEAT_INDUSTRIES, SELF, forestcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; forestpaper_mill; }

switch(FEAT_INDUSTRIES, SELF, forestcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(forestproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, forestproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 forestproduction;
}
# 5253 "sprites/nml/industries/forest.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, forestcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, forestrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, forestrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, forestdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: forestrandom_slow_decrease;
 forestrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, forestcheck_decrease_production, allow_primary_production_decrease) {
 1..255: forestdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, forestrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, forestcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: forestrandom_increase;
 forestcheck_decrease_production;
}
# 5254 "sprites/nml/industries/forest.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, forestextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 5256 "sprites/nml/industries/forest.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, forestcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, forestavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: forestcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, forestcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): forestavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 5258 "sprites/nml/industries/forest.pnml" 2

item(FEAT_INDUSTRIES, forest, 0x0B) {
 property {
  substitute: INDUSTRYTYPE_FOREST;
  layouts: [
    tilelayout_forest_1,
    tilelayout_forest_2,
    tilelayout_forest_3
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: 18437;
  prod_cargo_types: [WOOD];
  accept_cargo_types: [FMSP];
  prod_multiplier: [19];
  conflicting_ind_types: [];
  prob_random: 8;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 95;
  map_colour: 81;
 }
 graphics {
  produce_cargo_arrival: forestproduce;
  construction_probability:forestcheck_availability;
  monthly_prod_change: forestcheck_production_level;
  random_prod_change: forestcheck_closure;
  build_prod_change: 4;
  extra_text_fund: return string(STR_FUND_FOREST);
  extra_text_industry: forestextra_text;
  colour: forestcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 5295 "sprites/nml/industries/forest.pnml" 2
# 51 "<stdin>" 2
# 1 "sprites/nml/industries/fruit_plantation.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



item(FEAT_INDUSTRYTILES, fruit_plantationtile_plantation, 207) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }
}

spritelayout action2_4597 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4598 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4599 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4600 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1689;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4601 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4602 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1689;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4603 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1689;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4604 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4605 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1689;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4606 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4607 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4608 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4609 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4610 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4611 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4612 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1689;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4613 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1633;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4614 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1633;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1620;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4615 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1620;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1620;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1633;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1689;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4616, var[0x60, 0, 31, 0]) {
 0: action2_4597;
 1: action2_4598;
 2: action2_4599;
 3: action2_4600;
 4: action2_4601;
 5: action2_4602;
 6: action2_4603;
 7: action2_4604;
 8: action2_4605;
 9: action2_4606;
 10: action2_4607;
 11: action2_4608;
 12: action2_4609;
 13: action2_4610;
 14: action2_4611;
 29: action2_4612;
 23: action2_4613;
 27: action2_4614;
 30: action2_4615;
 action2_4597;
}

spritelayout action2_4620 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4621 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4622 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4623 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4624 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4625 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4626 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4627 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4628 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4629 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4630 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4631 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4632 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4633 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4634 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4635 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4636 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4637 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4638 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4639, var[0x60, 0, 31, 0]) {
 0: action2_4620;
 1: action2_4621;
 2: action2_4622;
 3: action2_4623;
 4: action2_4624;
 5: action2_4625;
 6: action2_4626;
 7: action2_4627;
 8: action2_4628;
 9: action2_4629;
 10: action2_4630;
 11: action2_4631;
 12: action2_4632;
 13: action2_4633;
 14: action2_4634;
 29: action2_4635;
 23: action2_4636;
 27: action2_4637;
 30: action2_4638;
 action2_4620;
}

spritelayout action2_4642 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4643 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4644 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4645 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4646 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4647 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4648 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4649 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4650 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4651 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4652 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4653 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4654 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4655 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4656 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4657 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4658 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4659 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4660 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4661, var[0x60, 0, 31, 0]) {
 0: action2_4642;
 1: action2_4643;
 2: action2_4644;
 3: action2_4645;
 4: action2_4646;
 5: action2_4647;
 6: action2_4648;
 7: action2_4649;
 8: action2_4650;
 9: action2_4651;
 10: action2_4652;
 11: action2_4653;
 12: action2_4654;
 13: action2_4655;
 14: action2_4656;
 29: action2_4657;
 23: action2_4658;
 27: action2_4659;
 30: action2_4660;
 action2_4642;
}

spritelayout action2_4664 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4665 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4666 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4667 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4668 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4669 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4670 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4671 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4672 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4673 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4674 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4675 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4676 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4677 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4678 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4679 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4680 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4681 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4682 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4683, var[0x60, 0, 31, 0]) {
 0: action2_4664;
 1: action2_4665;
 2: action2_4666;
 3: action2_4667;
 4: action2_4668;
 5: action2_4669;
 6: action2_4670;
 7: action2_4671;
 8: action2_4672;
 9: action2_4673;
 10: action2_4674;
 11: action2_4675;
 12: action2_4676;
 13: action2_4677;
 14: action2_4678;
 29: action2_4679;
 23: action2_4680;
 27: action2_4681;
 30: action2_4682;
 action2_4664;
}

spritelayout action2_4686 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4687 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4688 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4689 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4690 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4691 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4692 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4693 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4694 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4695 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4696 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4697 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4698 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4699 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4700 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4701 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4702 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4703 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4704 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4705, var[0x60, 0, 31, 0]) {
 0: action2_4686;
 1: action2_4687;
 2: action2_4688;
 3: action2_4689;
 4: action2_4690;
 5: action2_4691;
 6: action2_4692;
 7: action2_4693;
 8: action2_4694;
 9: action2_4695;
 10: action2_4696;
 11: action2_4697;
 12: action2_4698;
 13: action2_4699;
 14: action2_4700;
 29: action2_4701;
 23: action2_4702;
 27: action2_4703;
 30: action2_4704;
 action2_4686;
}

spritelayout action2_4708 {
 ground {
  sprite: 4164;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4709 {
 ground {
  sprite: 4165;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4710 {
 ground {
  sprite: 4166;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4711 {
 ground {
  sprite: 4167;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4712 {
 ground {
  sprite: 4168;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4713 {
 ground {
  sprite: 4169;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4714 {
 ground {
  sprite: 4170;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4715 {
 ground {
  sprite: 4171;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4716 {
 ground {
  sprite: 4172;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4717 {
 ground {
  sprite: 4173;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4718 {
 ground {
  sprite: 4174;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4719 {
 ground {
  sprite: 4175;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4720 {
 ground {
  sprite: 4176;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4721 {
 ground {
  sprite: 4177;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4722 {
 ground {
  sprite: 4178;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4723 {
 ground {
  sprite: 4179;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4724 {
 ground {
  sprite: 4180;
 }
 building {
  sprite: 1758;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4725 {
 ground {
  sprite: 4181;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1758;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1759;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4726 {
 ground {
  sprite: 4182;
 }
 building {
  sprite: 1759;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1758;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1759;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4727, var[0x60, 0, 31, 0]) {
 0: action2_4708;
 1: action2_4709;
 2: action2_4710;
 3: action2_4711;
 4: action2_4712;
 5: action2_4713;
 6: action2_4714;
 7: action2_4715;
 8: action2_4716;
 9: action2_4717;
 10: action2_4718;
 11: action2_4719;
 12: action2_4720;
 13: action2_4721;
 14: action2_4722;
 29: action2_4723;
 23: action2_4724;
 27: action2_4725;
 30: action2_4726;
 action2_4708;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4730, ((var[0x60, 16, 255, 0] - snowline_height) + 1)) {
 0..7: action2_4661;
 8..15: action2_4683;
 16..23: action2_4705;
 24..127: action2_4727;
 action2_4639;
}

spritelayout action2_4731 {
 ground {
  sprite: 4145;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4732 {
 ground {
  sprite: 4146;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4733 {
 ground {
  sprite: 4147;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4734 {
 ground {
  sprite: 4148;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4735 {
 ground {
  sprite: 4149;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4736 {
 ground {
  sprite: 4150;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1832;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4737 {
 ground {
  sprite: 4151;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4738 {
 ground {
  sprite: 4152;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4739 {
 ground {
  sprite: 4153;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1832;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4740 {
 ground {
  sprite: 4154;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4741 {
 ground {
  sprite: 4155;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4742 {
 ground {
  sprite: 4156;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4743 {
 ground {
  sprite: 4157;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4744 {
 ground {
  sprite: 4158;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4745 {
 ground {
  sprite: 4159;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4746 {
 ground {
  sprite: 4160;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4747 {
 ground {
  sprite: 4161;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4748 {
 ground {
  sprite: 4162;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4749 {
 ground {
  sprite: 4163;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4750, var[0x60, 0, 31, 0]) {
 0: action2_4731;
 1: action2_4732;
 2: action2_4733;
 3: action2_4734;
 4: action2_4735;
 5: action2_4736;
 6: action2_4737;
 7: action2_4738;
 8: action2_4739;
 9: action2_4740;
 10: action2_4741;
 11: action2_4742;
 12: action2_4743;
 13: action2_4744;
 14: action2_4745;
 29: action2_4746;
 23: action2_4747;
 27: action2_4748;
 30: action2_4749;
 action2_4731;
}

spritelayout action2_4753 {
 ground {
  sprite: 4145;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4754 {
 ground {
  sprite: 4146;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4755 {
 ground {
  sprite: 4147;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4756 {
 ground {
  sprite: 4148;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4757 {
 ground {
  sprite: 4149;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4758 {
 ground {
  sprite: 4150;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1832;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4759 {
 ground {
  sprite: 4151;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4760 {
 ground {
  sprite: 4152;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4761 {
 ground {
  sprite: 4153;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1832;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4762 {
 ground {
  sprite: 4154;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4763 {
 ground {
  sprite: 4155;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4764 {
 ground {
  sprite: 4156;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4765 {
 ground {
  sprite: 4157;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4766 {
 ground {
  sprite: 4158;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4767 {
 ground {
  sprite: 4159;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4768 {
 ground {
  sprite: 4160;
 }
 building {
  sprite: 1832;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4769 {
 ground {
  sprite: 4161;
 }
 building {
  sprite: 1831;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4770 {
 ground {
  sprite: 4162;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1831;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1830;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

spritelayout action2_4771 {
 ground {
  sprite: 4163;
 }
 building {
  sprite: 1830;
  xoffset: 2;
  yoffset: 2;
  xextent: 13;
  yextent: 13;
 }
 building {
  sprite: 1830;
  xoffset: 8;
  yoffset: 2;
  xextent: 7;
  yextent: 13;
 }
 building {
  sprite: 1831;
  yoffset: 7;
  yextent: 8;
 }
 building {
  sprite: 1832;
  xoffset: 8;
  yoffset: 7;
  xextent: 7;
  yextent: 8;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4772, var[0x60, 0, 31, 0]) {
 0: action2_4753;
 1: action2_4754;
 2: action2_4755;
 3: action2_4756;
 4: action2_4757;
 5: action2_4758;
 6: action2_4759;
 7: action2_4760;
 8: action2_4761;
 9: action2_4762;
 10: action2_4763;
 11: action2_4764;
 12: action2_4765;
 13: action2_4766;
 14: action2_4767;
 29: action2_4768;
 23: action2_4769;
 27: action2_4770;
 30: action2_4771;
 action2_4753;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_4775, terrain_type) {
 1: action2_4772;
 action2_4750;
}

switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_plantation_spritelayout, var[0x03, 0, 255]) {
 0: action2_4616;
 1: action2_4730;
 2: action2_4775;
 action2_4616;
}

/* ***************
 * tile with house
 * ***************/

spriteset(spriteset_4792, "sprites/graphics/industries/fruitplantation.png") { tmpl_building_sprite(10, 10, 59, -28) }
spritelayout fruit_plantationtile_house_spritelayout {
 ground {
  sprite: 2022;
 }
 building {
  sprite: spriteset_4792;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xextent: 7;
  yextent: 7;
  zextent: 7;
 }
}


/* ****************************************************
 * Definition of the industry tiles and their callbacks
 * ***************************************************/

switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_plantation_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, fruit_plantationtile_plantation_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fruit_plantationtile_plantation_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_plantation_water_check, nearby_tile_is_water(0, 0)) { 1: string(STR_ERR_LOCATION_NOT_ON_WATER); fruit_plantationtile_plantation_player_check; }
switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_plantation_location_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: fruit_plantationtile_plantation_water_check; return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE); }

item(FEAT_INDUSTRYTILES, fruit_plantationtile_plantation, 207) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  foundations: return CB_RESULT_NO_FOUNDATIONS;
  autoslope: return CB_RESULT_NO_AUTOSLOPE;
  tile_check: fruit_plantationtile_plantation_location_check;
  fruit_plantationtile_plantation_spritelayout;
 }
}



switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_house_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, fruit_plantationtile_house_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fruit_plantationtile_house_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_house_water_check, nearby_tile_is_water(0, 0)) { 1: string(STR_ERR_LOCATION_NOT_ON_WATER); fruit_plantationtile_house_player_check; }
switch(FEAT_INDUSTRYTILES, SELF, fruit_plantationtile_house_location_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: fruit_plantationtile_house_water_check; return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE); }

item(FEAT_INDUSTRYTILES, fruit_plantationtile_house, 208) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  autoslope: return CB_RESULT_AUTOSLOPE;
  tile_check: fruit_plantationtile_house_location_check;
  fruit_plantationtile_house_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_5807_1 {
 0, 0: fruit_plantationtile_plantation;
 0, 1: fruit_plantationtile_plantation;
 0, 2: fruit_plantationtile_plantation;
 1, 0: fruit_plantationtile_plantation;
 1, 1: fruit_plantationtile_plantation;
 1, 2: fruit_plantationtile_plantation;
 2, 1: fruit_plantationtile_plantation;
 2, 2: fruit_plantationtile_house;
}

tilelayout tilelayout_5807_2 {
 0, 0: fruit_plantationtile_plantation;
 0, 1: fruit_plantationtile_plantation;
 0, 2: fruit_plantationtile_plantation;
 0, 3: fruit_plantationtile_plantation;
 1, 1: fruit_plantationtile_plantation;
 1, 2: fruit_plantationtile_plantation;
 1, 3: fruit_plantationtile_plantation;
 1, 4: fruit_plantationtile_house;
}

tilelayout tilelayout_5807_3 {
 0, 0: fruit_plantationtile_plantation;
 0, 1: fruit_plantationtile_plantation;
 1, 0: fruit_plantationtile_plantation;
 1, 1: fruit_plantationtile_plantation;
 2, 0: fruit_plantationtile_plantation;
 2, 1: fruit_plantationtile_plantation;
 3, 0: fruit_plantationtile_plantation;
 3, 1: fruit_plantationtile_house;
}

tilelayout tilelayout_5807_4 {
 0, 0: fruit_plantationtile_plantation;
 0, 1: fruit_plantationtile_plantation;
 0, 3: fruit_plantationtile_plantation;
 0, 4: fruit_plantationtile_plantation;
 1, 0: fruit_plantationtile_plantation;
 1, 1: fruit_plantationtile_plantation;
 1, 3: fruit_plantationtile_plantation;
 1, 4: fruit_plantationtile_plantation;
 3, 0: fruit_plantationtile_plantation;
 3, 1: fruit_plantationtile_plantation;
 3, 3: fruit_plantationtile_plantation;
 3, 4: fruit_plantationtile_plantation;
 4, 0: fruit_plantationtile_plantation;
 4, 1: fruit_plantationtile_house;
 4, 3: fruit_plantationtile_plantation;
 4, 4: fruit_plantationtile_plantation;
}


/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, fruit_plantationfruit_plantation, industry_count(fruit_plantation) * 1 / 2 / industry_clusters != 0 && ( industry_distance(fruit_plantation) < 10 || industry_distance(fruit_plantation) > 36) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, fruit_plantationbrewery, industry_distance(brewery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; fruit_plantationfruit_plantation; }
switch (FEAT_INDUSTRIES, SELF, fruit_plantationcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; fruit_plantationbrewery; }

switch(FEAT_INDUSTRIES, SELF, fruit_plantationcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(fruit_plantationproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, fruit_plantationproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 fruit_plantationproduction;
}
# 5219 "sprites/nml/industries/fruit_plantation.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, fruit_plantationdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: fruit_plantationrandom_slow_decrease;
 fruit_plantationrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationcheck_decrease_production, allow_primary_production_decrease) {
 1..255: fruit_plantationdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, fruit_plantationcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: fruit_plantationrandom_increase;
 fruit_plantationcheck_decrease_production;
}
# 5220 "sprites/nml/industries/fruit_plantation.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, fruit_plantationextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 5222 "sprites/nml/industries/fruit_plantation.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, fruit_plantationcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, fruit_plantationavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: fruit_plantationcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, fruit_plantationcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): fruit_plantationavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 5224 "sprites/nml/industries/fruit_plantation.pnml" 2

item(FEAT_INDUSTRIES, fruit_plantation, 0x1E) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_5807_1,
    tilelayout_5807_2,
    tilelayout_5807_3,
    tilelayout_5807_4
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  name: TTD_STR_INDUSTRY_NAME_FRUIT_PLANTATION;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  prod_cargo_types: [FRVG];
  accept_cargo_types: [FMSP];
  prod_multiplier: [6];
  conflicting_ind_types: [];
  prob_random: 8;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 54;
  map_colour: 86;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: fruit_plantationproduce;
  construction_probability:fruit_plantationcheck_availability;
  monthly_prod_change: fruit_plantationcheck_production_level;
  random_prod_change: fruit_plantationcheck_closure;
  build_prod_change: 8;
  extra_text_fund: return string(STR_FUND_FRUIT_PLANTATION);
  extra_text_industry: fruit_plantationextra_text;
  colour: fruit_plantationcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 5263 "sprites/nml/industries/fruit_plantation.pnml" 2
# 52 "<stdin>" 2
# 1 "sprites/nml/industries/furniture_factory.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(furniture_factoryspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(furniture_factoryspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 88, -42, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(10, 60, 88, -42, "sprites/graphics/industries/furniturefactory_snow.png")
}

spriteset(furniture_factoryspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 88, -44, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(80, 60, 88, -44, "sprites/graphics/industries/furniturefactory_snow.png")
}

spriteset(furniture_factoryspriteset_3) {
 tmpl_building_sprite_filename(150, 60, 88, -42, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(150, 60, 88, -42, "sprites/graphics/industries/furniturefactory_snow.png")
}

spriteset(furniture_factoryspriteset_4) {
 tmpl_building_sprite_filename(220, 60, 88, -42, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(220, 60, 88, -42, "sprites/graphics/industries/furniturefactory_snow.png")
}

spriteset(furniture_factoryspriteset_5) {
 tmpl_building_sprite_filename(290, 60, 88, -42, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(290, 60, 88, -42, "sprites/graphics/industries/furniturefactory_snow.png")
}

spriteset(furniture_factoryspriteset_6) {
 tmpl_building_sprite_filename(360, 60, 88, -41, "sprites/graphics/industries/furniturefactory.png")
 tmpl_building_sprite_filename(360, 60, 88, -41, "sprites/graphics/industries/furniturefactory_snow.png")
}

spritelayout furniture_factoryspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 92; } }

spritelayout furniture_factoryspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout furniture_factoryspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout furniture_factoryspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout furniture_factoryspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout furniture_factoryspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: furniture_factoryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: furniture_factoryspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorylayout_1, relative_pos) {
 relative_coord(0, 1): furniture_factoryspritelayout_3;
 relative_coord(1, 1): furniture_factoryspritelayout_2;
 relative_coord(2, 0): furniture_factoryspritelayout_4;
 relative_coord(2, 1): furniture_factoryspritelayout_1;
 furniture_factoryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorylayout_2, relative_pos) {
 relative_coord(0, 1): furniture_factoryspritelayout_3;
 relative_coord(1, 0): furniture_factoryspritelayout_4;
 relative_coord(1, 1): furniture_factoryspritelayout_2;
 relative_coord(2, 0): furniture_factoryspritelayout_6;
 relative_coord(2, 1): furniture_factoryspritelayout_1;
 furniture_factoryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorylayout_3, relative_pos) {
 relative_coord(0, 0): furniture_factoryspritelayout_3;
 relative_coord(0, 1): furniture_factoryspritelayout_6;
 relative_coord(1, 0): furniture_factoryspritelayout_2;
 relative_coord(1, 1): furniture_factoryspritelayout_3;
 relative_coord(2, 0): furniture_factoryspritelayout_1;
 relative_coord(2, 1): furniture_factoryspritelayout_2;
 relative_coord(3, 0): furniture_factoryspritelayout_5;
 relative_coord(3, 1): furniture_factoryspritelayout_1;
 relative_coord(4, 0): furniture_factoryspritelayout_4;
 relative_coord(4, 1): furniture_factoryspritelayout_6;
 furniture_factoryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorylayout_4, relative_pos) {
 relative_coord(0, 0): furniture_factoryspritelayout_5;
 relative_coord(0, 1): furniture_factoryspritelayout_6;
 relative_coord(1, 0): furniture_factoryspritelayout_4;
 relative_coord(1, 1): furniture_factoryspritelayout_6;
 relative_coord(2, 0): furniture_factoryspritelayout_3;
 relative_coord(2, 1): furniture_factoryspritelayout_3;
 relative_coord(3, 0): furniture_factoryspritelayout_2;
 relative_coord(3, 1): furniture_factoryspritelayout_2;
 relative_coord(4, 0): furniture_factoryspritelayout_1;
 relative_coord(4, 1): furniture_factoryspritelayout_1;
 furniture_factoryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorylayout_5, relative_pos) {
 relative_coord(0, 0): furniture_factoryspritelayout_5;
 relative_coord(0, 1): furniture_factoryspritelayout_3;
 relative_coord(0, 2): furniture_factoryspritelayout_3;
 relative_coord(1, 0): furniture_factoryspritelayout_4;
 relative_coord(1, 1): furniture_factoryspritelayout_2;
 relative_coord(1, 2): furniture_factoryspritelayout_2;
 relative_coord(2, 0): furniture_factoryspritelayout_6;
 relative_coord(2, 1): furniture_factoryspritelayout_1;
 relative_coord(2, 2): furniture_factoryspritelayout_1;
 furniture_factoryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, PARENT, furniture_factorytile1_layout, layout_num) {
 1: furniture_factorylayout_1;
 2: furniture_factorylayout_2;
 3: furniture_factorylayout_3;
 4: furniture_factorylayout_4;
 5: furniture_factorylayout_5;
 furniture_factoryspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, furniture_factorytile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, furniture_factorytile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; furniture_factorytile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, furniture_factorytile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: furniture_factorytile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, furniture_factorytile, 184) {
 property {
  substitute: 0;
  accepted_cargos: [[WDPR, 8], [MNSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: furniture_factorytile1_location_check;
  furniture_factorytile1_layout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_furniture_factory_1 {
 0, 1: furniture_factorytile;
 1, 0: furniture_factorytile;
 1, 1: furniture_factorytile;
 2, 0: furniture_factorytile;
 2, 1: furniture_factorytile;
}

tilelayout tilelayout_furniture_factory_2 {
 0, 0: furniture_factorytile;
 0, 1: furniture_factorytile;
 1, 0: furniture_factorytile;
 1, 1: furniture_factorytile;
 2, 0: furniture_factorytile;
 2, 1: furniture_factorytile;
}

tilelayout tilelayout_furniture_factory_3 {
 0, 0: furniture_factorytile;
 0, 1: furniture_factorytile;
 1, 0: furniture_factorytile;
 1, 1: furniture_factorytile;
 2, 0: furniture_factorytile;
 2, 1: furniture_factorytile;
 3, 0: furniture_factorytile;
 3, 1: furniture_factorytile;
 4, 0: furniture_factorytile;
 4, 1: furniture_factorytile;
}

tilelayout tilelayout_furniture_factory_4 {
 0, 0: furniture_factorytile;
 0, 1: furniture_factorytile;
 1, 0: furniture_factorytile;
 1, 1: furniture_factorytile;
 2, 0: furniture_factorytile;
 2, 1: furniture_factorytile;
 3, 0: furniture_factorytile;
 3, 1: furniture_factorytile;
 4, 0: furniture_factorytile;
 4, 1: furniture_factorytile;
}

tilelayout tilelayout_furniture_factory_5 {
 0, 0: furniture_factorytile;
 0, 1: furniture_factorytile;
 0, 2: furniture_factorytile;
 1, 0: furniture_factorytile;
 1, 1: furniture_factorytile;
 1, 2: furniture_factorytile;
 2, 0: furniture_factorytile;
 2, 1: furniture_factorytile;
 2, 2: furniture_factorytile;
}


/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 220 "sprites/nml/industries/furniture_factory.pnml"
/* extra text template */

/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, furniture_factoryfurniture_factory, industry_distance(furniture_factory)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, furniture_factorycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; furniture_factoryfurniture_factory; }

switch(FEAT_INDUSTRIES, SELF, furniture_factorycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (furniture_factorysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, furniture_factoryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 5 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 furniture_factorysimple_produce;
}
# 230 "sprites/nml/industries/furniture_factory.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, furniture_factoryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, furniture_factoryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, furniture_factorycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: furniture_factoryincrease_closure_counter;
 furniture_factoryreset_closure_counter;
}
# 231 "sprites/nml/industries/furniture_factory.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, furniture_factoryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, furniture_factoryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 furniture_factoryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, furniture_factorycheck_closure, allow_close_secondary) {
 1..255: furniture_factoryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 232 "sprites/nml/industries/furniture_factory.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, furniture_factoryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, furniture_factoryextra_text, [



   show_debug_texts
   ]) {
 1: furniture_factoryextra_text_debug;
 return string(STR_EXTRA_FURNITURE_FACTORY);
}
# 234 "sprites/nml/industries/furniture_factory.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, furniture_factorycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, furniture_factoryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: furniture_factorycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, furniture_factorycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): furniture_factoryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 236 "sprites/nml/industries/furniture_factory.pnml" 2

item(FEAT_INDUSTRIES, furniture_factory, 0x0D) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_furniture_factory_1,
    tilelayout_furniture_factory_2,
    tilelayout_furniture_factory_3,
    tilelayout_furniture_factory_4,
    tilelayout_furniture_factory_5
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_FURNITURE_FACTORY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_FURNITURE_FACTORY));
  prod_cargo_types: [GOOD];
  accept_cargo_types: [MNSP, WDPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 8;
  prob_in_game: 7;
  prospect_chance: 0.75;
  fund_cost_multiplier: 95;
  map_colour: 186;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: furniture_factoryproduce;
  construction_probability:furniture_factorycheck_availability;
  monthly_prod_change: furniture_factorycheck_production_level;
  random_prod_change: furniture_factorycheck_closure;
  extra_text_industry: furniture_factoryextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_FURNITURE_FACTORY));
  colour: furniture_factorycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 281 "sprites/nml/industries/furniture_factory.pnml" 2
# 53 "<stdin>" 2

# 1 "sprites/nml/industries/glass_works.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(glass_worksspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(glass_worksspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 90, -59, "sprites/graphics/industries/glassworks.png")
 tmpl_building_sprite_filename(10, 60, 90, -59, "sprites/graphics/industries/glassworks_snow.png")
}

spriteset(glass_worksspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 90, -71, "sprites/graphics/industries/glassworks.png")
 tmpl_building_sprite_filename(80, 60, 90, -71, "sprites/graphics/industries/glassworks_snow.png")
}

spriteset(glass_worksspriteset_3) {
 tmpl_building_sprite_filename(150, 60, 90, -59, "sprites/graphics/industries/glassworks.png")
 tmpl_building_sprite_filename(150, 60, 90, -59, "sprites/graphics/industries/glassworks_snow.png")
}

spritelayout glass_worksspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: glass_worksspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } }

spritelayout glass_worksspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: glass_worksspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } }

spritelayout glass_worksspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: glass_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: glass_worksspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 12; } }

spritelayout glass_worksspritelayout_4 {
 ground {
  sprite: glass_worksspriteset_ground(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, glass_workslayout_1, relative_pos) {
 relative_coord(0, 0): glass_worksspritelayout_4;
 relative_coord(0, 1): glass_worksspritelayout_3;
 relative_coord(1, 0): glass_worksspritelayout_1;
 relative_coord(1, 1): glass_worksspritelayout_2;
 glass_worksspritelayout_4;
}

switch(FEAT_INDUSTRYTILES, SELF, glass_workslayout_2, relative_pos) {
 relative_coord(0, 0): glass_worksspritelayout_4;
 relative_coord(0, 1): glass_worksspritelayout_3;
 relative_coord(1, 0): glass_worksspritelayout_1;
 relative_coord(1, 1): glass_worksspritelayout_2;
 relative_coord(2, 0): glass_worksspritelayout_4;
 relative_coord(2, 1): glass_worksspritelayout_3;
 relative_coord(3, 0): glass_worksspritelayout_1;
 relative_coord(3, 1): glass_worksspritelayout_2;
 glass_worksspritelayout_4;
}

switch(FEAT_INDUSTRYTILES, SELF, glass_workslayout_3, relative_pos) {
 relative_coord(0, 0): glass_worksspritelayout_4;
 relative_coord(0, 1): glass_worksspritelayout_3;
 relative_coord(0, 2): glass_worksspritelayout_4;
 relative_coord(0, 3): glass_worksspritelayout_3;
 relative_coord(1, 0): glass_worksspritelayout_1;
 relative_coord(1, 1): glass_worksspritelayout_2;
 relative_coord(1, 2): glass_worksspritelayout_1;
 relative_coord(1, 3): glass_worksspritelayout_2;
 relative_coord(2, 1): glass_worksspritelayout_4;
 relative_coord(2, 2): glass_worksspritelayout_3;
 relative_coord(3, 1): glass_worksspritelayout_1;
 relative_coord(3, 2): glass_worksspritelayout_2;
 glass_worksspritelayout_4;
}

switch(FEAT_INDUSTRYTILES, PARENT, glass_workstile1_layout, layout_num) {
 1: glass_workslayout_1;
 2: glass_workslayout_2;
 3: glass_workslayout_3;
 glass_worksspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, glass_workstile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, glass_workstile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; glass_workstile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, glass_workstile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: glass_workstile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, glass_workstile, 178) {
 property {
  substitute: 0;
  accepted_cargos: [[SAND, 8], [RFPR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: glass_workstile1_location_check;
  glass_workstile1_layout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_glass_works_1 {
 0, 0: glass_workstile;
 0, 1: glass_workstile;
 1, 0: glass_workstile;
 1, 1: glass_workstile;
}

tilelayout tilelayout_glass_works_2 {
 0, 0: glass_workstile;
 0, 1: glass_workstile;
 1, 0: glass_workstile;
 1, 1: glass_workstile;
 2, 0: glass_workstile;
 2, 1: glass_workstile;
 3, 0: glass_workstile;
 3, 1: glass_workstile;
}

tilelayout tilelayout_glass_works_3 {
 0, 0: glass_workstile;
 0, 1: glass_workstile;
 0, 2: glass_workstile;
 0, 3: glass_workstile;
 1, 0: glass_workstile;
 1, 1: glass_workstile;
 1, 2: glass_workstile;
 1, 3: glass_workstile;
 2, 1: glass_workstile;
 2, 2: glass_workstile;
 3, 1: glass_workstile;
 3, 2: glass_workstile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 160 "sprites/nml/industries/glass_works.pnml"
/* extra text template */


switch (FEAT_INDUSTRIES, SELF, glass_worksglass_works, industry_distance(glass_works)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, glass_worksquarry, industry_distance(quarry)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; glass_worksglass_works; }
switch (FEAT_INDUSTRIES, SELF, glass_workscheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; glass_worksquarry; }

switch(FEAT_INDUSTRIES, SELF, glass_workscolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (glass_workssimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, glass_worksproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 6 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 glass_workssimple_produce;
}
# 170 "sprites/nml/industries/glass_works.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, glass_worksincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, glass_worksreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, glass_workscheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: glass_worksincrease_closure_counter;
 glass_worksreset_closure_counter;
}
# 171 "sprites/nml/industries/glass_works.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, glass_worksclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, glass_workshad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 glass_worksclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, glass_workscheck_closure, allow_close_secondary) {
 1..255: glass_workshad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 172 "sprites/nml/industries/glass_works.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, glass_worksextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, glass_worksextra_text, [



   show_debug_texts
   ]) {
 1: glass_worksextra_text_debug;
 return string(STR_EXTRA_GLASS_WORKS);
}
# 174 "sprites/nml/industries/glass_works.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, glass_workscheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, glass_worksavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: glass_workscheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, glass_workscheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): glass_worksavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 176 "sprites/nml/industries/glass_works.pnml" 2

item(FEAT_INDUSTRIES, glass_works, 0x16) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_glass_works_1,
    tilelayout_glass_works_2,
    tilelayout_glass_works_3
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_GLASS_WORKS);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_GLASS_WORKS));
  prod_cargo_types: [BDMT, MNSP];
  accept_cargo_types: [SAND, RFPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 95;
  map_colour: 146;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_HELICOPTER_CAN_EXPLODE);
 }
 graphics {
  produce_cargo_arrival: glass_worksproduce;
  construction_probability:glass_workscheck_availability;
  monthly_prod_change: glass_workscheck_production_level;
  random_prod_change: glass_workscheck_closure;
  extra_text_industry: glass_worksextra_text;
  colour: glass_workscolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 218 "sprites/nml/industries/glass_works.pnml" 2
# 55 "<stdin>" 2
# 1 "sprites/nml/industries/grain_mill.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/* Defines a flat, ground aware spritelayout for an industry tile.
 * Ground sprite overlays and buildings must be defined separately.
 *
 * Use this layout when the tile uses foundations and autoslope
 *
 * spritelayout_name       Name for the spritelayout block.
 */
# 86 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a ground sprite overlay that will appear only if a given condition is true.
 *
 * ground_overlay_sprite   Sprite to use for the overlay.
 * condition               The overlay will only be drawn if this condition is true.
 */
# 100 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a ground sprite overlay that will appear always.
 *
 * ground_overlay_sprite   Sprite to use for the overlay.
 */


/* Defines a building with normal and snow sprites.
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 119 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines conditionally a building
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 * condition            The building will only be drawn if this condition is true.
 */
# 135 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a building
 *
 * building_spriteset   Spriteset for the building sprites. This spriteset must define the sprites in the specified order.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 148 "sprites/nml/industries/../templates/spritelayouts_groundaware.pnml"
/* Defines a sloped, ground aware spritelayout for an industry tile.
 * Ground sprite overlays and buildings must be defined separately.
 *
 * Use this spritelayout when the tile doesn't use foundations and
 * autoslope. It's analoguous to GROUND_AWARE_SPRITELAYOUT
 *
 * spritelayout_name       Name for the spritelayout block.
 */
# 9 "sprites/nml/industries/grain_mill.pnml" 2



spriteset(grain_millspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(grain_millspriteset_ground_overlay_snow_1) {
 tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}

spriteset(grain_millspriteset_ground_overlay_snow_2) {
 tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}
spriteset(grain_millspriteset_ground_overlay_snow_3) {
 tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}
spriteset(grain_millspriteset_ground_overlay_snow_4) {
 tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill_snow.png")
}

spriteset(grain_millspriteset_ground_overlay_normal_1) {
 tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(10, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}

spriteset(grain_millspriteset_ground_overlay_normal_2) {
 tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(80, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}
spriteset(grain_millspriteset_ground_overlay_normal_3) {
 tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(150, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}
spriteset(grain_millspriteset_ground_overlay_normal_4) {
 tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(220, 10, 31, 0, "sprites/graphics/industries/grainmill.png")
}


spriteset(grain_millspriteset_snow_1) {
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(grain_millspriteset_snow_2) {
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(grain_millspriteset_snow_3) {
 [150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
 [150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(grain_millspriteset_snow_4) {
 [220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
 [220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill_snow.png"]
}

spriteset(grain_millspriteset_normal_1) {
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
}

spriteset(grain_millspriteset_normal_2) {
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/grainmill.png"]
}

spriteset(grain_millspriteset_normal_3) {
 [150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
 [150, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
}

spriteset(grain_millspriteset_normal_4) {
 [220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
 [220, 60, 64, 82, -31, -51, "sprites/graphics/industries/grainmill.png"]
}

spriteset(grain_millspriteset_5_anim) {
 tmpl_building_sprite_filename( 10, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename( 10, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename( 80, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename( 80, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(150, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(150, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(220, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(220, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(290, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(290, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
 tmpl_building_sprite_filename(360, 200, 82, -52, "sprites/graphics/industries/grainmill.png")
 tmpl_building_sprite_filename(360, 200, 82, -52, "sprites/graphics/industries/grainmill_snow.png")
}

spritelayout grain_millbrickbakery_tile_1 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 // normal
 childsprite { sprite: grain_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_normal_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 // snow
 childsprite { sprite: GROUNDSPRITE_SNOW; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_snow_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
}

spritelayout grain_millbrickbakery_tile_2 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 // normal
 childsprite { sprite: grain_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_normal_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 // snow
 childsprite { sprite: GROUNDSPRITE_SNOW; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_snow_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
}

spritelayout grain_millbrickbakery_tile_3 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: grain_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_normal_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: GROUNDSPRITE_SNOW; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_snow_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 building { sprite: grain_millspriteset_normal_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; hide_sprite: !(terrain_type != TILETYPE_SNOW); }
 building { sprite: grain_millspriteset_snow_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; hide_sprite: !(terrain_type == TILETYPE_SNOW); }
}

spritelayout grain_millbrickbakery_tile_4 { ground { sprite: GROUNDSPRITE_NORMAL ; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_DESERT; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT); } childsprite { sprite: GROUNDSPRITE_DESERT_1_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) ); } childsprite { sprite: GROUNDSPRITE_SNOW_4_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2)); } childsprite { sprite: GROUNDSPRITE_SNOW_3_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2))); } childsprite { sprite: GROUNDSPRITE_SNOW_2_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1))); } childsprite { sprite: GROUNDSPRITE_SNOW_1_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0))); }
 childsprite { sprite: grain_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_normal_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type != TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: GROUNDSPRITE_SNOW; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 childsprite { sprite: grain_millspriteset_ground_overlay_snow_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: !(terrain_type == TILETYPE_SNOW); always_draw: 1; }
 building { sprite: grain_millspriteset_normal_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; hide_sprite: !(terrain_type != TILETYPE_SNOW); }
 building { sprite: grain_millspriteset_snow_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; hide_sprite: !(terrain_type == TILETYPE_SNOW); }
}

spritelayout grain_millwindmill_tile_anim {
 ground {
  sprite: 2022;
 }
 building {
  sprite: grain_millspriteset_5_anim(2 * animation_frame + (terrain_type == TILETYPE_SNOW));
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 24;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, grain_milllayout_1, relative_pos) {
 relative_coord(0, 1): grain_millbrickbakery_tile_4;
 relative_coord(1, 0): grain_millbrickbakery_tile_1;
 relative_coord(1, 1): grain_millbrickbakery_tile_2;
 grain_millbrickbakery_tile_3;
}

switch(FEAT_INDUSTRYTILES, SELF, grain_milllayout_2, relative_pos) {
 relative_coord(0, 0): grain_millbrickbakery_tile_3;
 relative_coord(0, 1): grain_millbrickbakery_tile_4;
 relative_coord(1, 0): grain_millbrickbakery_tile_3;
 relative_coord(1, 1): grain_millbrickbakery_tile_4;
 relative_coord(2, 0): grain_millbrickbakery_tile_1;
 relative_coord(2, 1): grain_millbrickbakery_tile_2;
 grain_millbrickbakery_tile_3;
}

switch(FEAT_INDUSTRYTILES, SELF, grain_milllayout_3, relative_pos) {
 relative_coord(0, 0): grain_millbrickbakery_tile_3;
 relative_coord(0, 1): grain_millbrickbakery_tile_4;
 relative_coord(0, 2): grain_millbrickbakery_tile_3;
 relative_coord(0, 3): grain_millbrickbakery_tile_4;
 relative_coord(1, 0): grain_millbrickbakery_tile_1;
 relative_coord(1, 1): grain_millbrickbakery_tile_2;
 relative_coord(1, 2): grain_millbrickbakery_tile_1;
 relative_coord(1, 3): grain_millbrickbakery_tile_2;
 grain_millbrickbakery_tile_3;
}

switch(FEAT_INDUSTRYTILES, SELF, grain_milllayout_4, relative_pos) {
 relative_coord(0, 0): grain_millwindmill_tile_anim;
 grain_millwindmill_tile_anim;
}

switch(FEAT_INDUSTRYTILES, PARENT, grain_milllayout, layout_num) {
 1: grain_milllayout_1;
 2: grain_milllayout_1;
 3: grain_milllayout_2;
 4: grain_milllayout_2;
 5: grain_milllayout_3;
 6: grain_milllayout_4;
 grain_millbrickbakery_tile_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, grain_milltile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, grain_milltile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; grain_milltile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, grain_milltile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: grain_milltile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, grain_milltile_decide_arctic, [ STORE_TEMP( (nearby_tile_height(0, 0) < (snowline_height - 8)) * GROUNDSPRITE_NORMAL, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4493 * (nearby_tile_height(0, 0) < (snowline_height )), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_height(0, 0) < (snowline_height + 1)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4531 * (nearby_tile_height(0, 0) < (snowline_height + 2)), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4550 * (nearby_tile_height(0, 0) >= (snowline_height + 2)), 0) ]) { grain_milllayout; } switch (FEAT_INDUSTRYTILES, SELF, grain_milltile_decide_tropic, [ STORE_TEMP( (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT) * GROUNDSPRITE_DESERT, 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * 4512 * (nearby_tile_terrain_type( 0,-1) == TILETYPE_DESERT), 0), STORE_TEMP( LOAD_TEMP(0) + (LOAD_TEMP(0) == 0) * GROUNDSPRITE_NORMAL, 0) ]) { grain_milllayout; } switch (FEAT_INDUSTRYTILES, SELF, grain_milltile_decide_temperate, [ STORE_TEMP( GROUNDSPRITE_NORMAL, 0) ]) { grain_milllayout; } switch (FEAT_INDUSTRYTILES, SELF, grain_millground_switch, [ STORE_TEMP(0, 0), climate ]) { CLIMATE_ARCTIC: grain_milltile_decide_arctic; CLIMATE_TROPIC: grain_milltile_decide_tropic; grain_milltile_decide_temperate; }

item(FEAT_INDUSTRYTILES, grain_milltile, 182) {
 property {
  substitute: 0;
  accepted_cargos: [[GRAI, 8], [MNSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 6];
  animation_speed: 3;
 }

 graphics {
  tile_check: grain_milltile1_location_check;
  grain_millground_switch;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_grain_mill_1 {
 0, 0: grain_milltile;
 0, 1: grain_milltile;
 1, 0: grain_milltile;
 1, 1: grain_milltile;
}

tilelayout tilelayout_grain_mill_2 {
 0, 0: grain_milltile;
 0, 1: grain_milltile;
 1, 0: grain_milltile;
 1, 1: grain_milltile;
}

tilelayout tilelayout_grain_mill_3 {
 0, 0: grain_milltile;
 0, 1: grain_milltile;
 1, 0: grain_milltile;
 1, 1: grain_milltile;
 2, 0: grain_milltile;
 2, 1: grain_milltile;
}

tilelayout tilelayout_grain_mill_4 {
 0, 0: grain_milltile;
 0, 1: grain_milltile;
 1, 0: grain_milltile;
 1, 1: grain_milltile;
 2, 0: grain_milltile;
 2, 1: grain_milltile;
}

tilelayout tilelayout_grain_mill_5 {
 0, 0: grain_milltile;
 0, 1: grain_milltile;
 0, 2: grain_milltile;
 0, 3: grain_milltile;
 1, 0: grain_milltile;
 1, 1: grain_milltile;
 1, 2: grain_milltile;
 1, 3: grain_milltile;
}

tilelayout tilelayout_grain_mill_6 {
 0, 0: grain_milltile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 291 "sprites/nml/industries/grain_mill.pnml"
/* extra text template */


switch (FEAT_INDUSTRIES, SELF, grain_millgrain_mill, industry_distance(grain_mill)) { 0 .. 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, grain_millbrewery, industry_distance(brewery)) { 0 .. 1: return CB_RESULT_LOCATION_DISALLOW; grain_millgrain_mill; }
switch (FEAT_INDUSTRIES, SELF, grain_millarable_farm, industry_distance(arable_farm)) { 0 .. 1: return CB_RESULT_LOCATION_DISALLOW; grain_millbrewery; }
switch (FEAT_INDUSTRIES, SELF, grain_milltown_distance, town_euclidean_dist(0, 0)) { 0 .. 144: grain_millarable_farm; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRIES, SELF, grain_millcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; grain_milltown_distance; }

/** After 1900, windmills only appear during map generation. */
switch (FEAT_INDUSTRIES, SELF, grain_millbrick_layouts_only_check_layout, var[0x86]) {
 5: return CB_RESULT_LOCATION_DISALLOW;
 grain_millcheck_location;
}

switch (FEAT_INDUSTRIES, SELF, grain_millbrick_layouts_only, extra_callback_info2) {
 IND_CREATION_GENERATION: grain_millcheck_location;
 grain_millbrick_layouts_only_check_layout;
}

/** Before 1870, only windmills appear. */
switch (FEAT_INDUSTRIES, SELF, grain_millwindmill_layout_only, var[0x86]) {
 5: grain_millcheck_location;
 return CB_RESULT_LOCATION_DISALLOW;
}

/** Both types of layouts can appear between 1870 and 1900. */
switch (FEAT_INDUSTRIES, SELF, grain_millcheck_date, current_year) {
 0..1870: grain_millwindmill_layout_only;
 1870..1900: grain_millcheck_location;
 grain_millbrick_layouts_only;
}

switch(FEAT_INDUSTRIES, SELF, grain_millcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (grain_millsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, grain_millproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 5 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 1 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 grain_millsimple_produce;
}
# 327 "sprites/nml/industries/grain_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, grain_millincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, grain_millreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, grain_millcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: grain_millincrease_closure_counter;
 grain_millreset_closure_counter;
}
# 328 "sprites/nml/industries/grain_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, grain_millclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, grain_millhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 grain_millclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, grain_millcheck_closure, allow_close_secondary) {
 1..255: grain_millhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 329 "sprites/nml/industries/grain_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, grain_millextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, grain_millextra_text, [



   show_debug_texts
   ]) {
 1: grain_millextra_text_debug;
 return string(STR_EXTRA_GRAIN_MILL);
}
# 331 "sprites/nml/industries/grain_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, grain_millcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, grain_millavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: grain_millcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, grain_millcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): grain_millavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 333 "sprites/nml/industries/grain_mill.pnml" 2

item(FEAT_INDUSTRIES, grain_mill, 0x22) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_grain_mill_1,
    tilelayout_grain_mill_2,
    tilelayout_grain_mill_3,
    tilelayout_grain_mill_4,
    tilelayout_grain_mill_5,
    tilelayout_grain_mill_6
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_GRAIN_MILL);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_GRAIN_MILL));
  prod_cargo_types: [FOOD];
  accept_cargo_types: [MNSP, GRAI];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 10;
  prob_in_game: 10;
  prospect_chance: 0.75;
  fund_cost_multiplier: 44;
  map_colour: 48;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: grain_millproduce;
  construction_probability:grain_millcheck_availability;
  location_check: grain_millcheck_date;
  monthly_prod_change: grain_millcheck_production_level;
  random_prod_change: grain_millcheck_closure;
  extra_text_industry: grain_millextra_text;
  colour: grain_millcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 379 "sprites/nml/industries/grain_mill.pnml" 2
# 56 "<stdin>" 2
# 1 "sprites/nml/industries/hardware_store.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(hardware_storespriteset_1) {
 tmpl_building_sprite_filename(0, 0, 64, -33, "sprites/graphics/industries/hardwarestore.png")
 tmpl_building_sprite_filename(0, 0, 64, -33, "sprites/graphics/industries/hardwarestore_snow.png")
}

spritelayout hardware_storespritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: hardware_storespriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/



item(FEAT_INDUSTRYTILES, hardware_storetile, 218) {
 property {
  substitute: 0;
  accepted_cargos: [[GOOD, 8], [BDMT, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  hardware_storespritelayout_1;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_hardware_store_1 {
 0, 0: hardware_storetile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, hardware_storecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, hardware_storeavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: hardware_storecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, hardware_storecheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): hardware_storeavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 48 "sprites/nml/industries/hardware_store.pnml" 2

switch (FEAT_INDUSTRIES, SELF, hardware_storepetrol_pump, industry_distance(petrol_pump)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, hardware_storebuilders_yard, industry_distance(builders_yard)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; hardware_storepetrol_pump; }
switch (FEAT_INDUSTRIES, SELF, hardware_storehardware_store, industry_distance(hardware_store)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; hardware_storebuilders_yard; }
switch (FEAT_INDUSTRIES, SELF, hardware_storecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; hardware_storehardware_store; }

item(FEAT_INDUSTRIES, hardware_store, 0x39) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_hardware_store_1
   ];
  name: string(STR_IND_HARDWARE_STORE);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_HARDWARE_STORE));
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;

  prod_cargo_types: [];
  accept_cargo_types: [GOOD, BDMT];

  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;

  life_type: IND_LIFE_TYPE_BLACK_HOLE;
  conflicting_ind_types: [hardware_store];
  prob_random: 24;
  prob_in_game: 12;
  prospect_chance: 0.75;
  fund_cost_multiplier: 6;
  map_colour: 15;
  remove_cost_multiplier: 0;
 }
 graphics {
  construction_probability:hardware_storecheck_availability;
  location_check: hardware_storecheck_location;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 91 "sprites/nml/industries/hardware_store.pnml" 2
# 57 "<stdin>" 2
# 1 "sprites/nml/industries/hotel.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spritelayout hotelspritelayout_1 {
 ground {
  sprite: GROUNDSPRITE_CLEARED;
 }
 building {
  sprite: (terrain_type == TILETYPE_SNOW) ? 4583 : 4475;
 }
}

spritelayout hotelspritelayout_2 {
 ground {
  sprite: GROUNDSPRITE_CLEARED;
 }
 building {
  sprite: (terrain_type == TILETYPE_SNOW) ? 4584 : 4476;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, hotellayout_1, relative_pos) {
 relative_coord(0, 1): hotelspritelayout_2;
 relative_coord(1, 1): hotelspritelayout_2;
 hotelspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, hotellayout, layout_num) {
 1: hotellayout_1;
 hotelspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, hoteltile, 217) {
 property {
  substitute: 0;
  accepted_cargos: [[FOOD, 8], [BEER, 8], [0, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  hotellayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_hotel_1 {
 0, 0: hoteltile;
 0, 1: hoteltile;
 1, 0: hoteltile;
 1, 1: hoteltile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, hotelcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, hotelavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: hotelcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, hotelcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): hotelavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 71 "sprites/nml/industries/hotel.pnml" 2


item(FEAT_INDUSTRIES, hotel, 0x3A) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_hotel_1
   ];
  life_type: IND_LIFE_TYPE_BLACK_HOLE;
  name: string(STR_IND_HOTEL);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_HOTEL));
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  prod_cargo_types: [PASS];
  accept_cargo_types: [FOOD, BEER, PASS];
  prod_multiplier: [20, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;
  conflicting_ind_types: [hotel];
  prob_random: 10;
  prob_in_game: 20;
  prospect_chance: 0.75;
  fund_cost_multiplier: 6;
  map_colour: 190;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_BUILT_NEAR_TOWN); /*use build near town not in town, hotel is large and town locations hard to find */
 }
 graphics {
  construction_probability:hotelcheck_availability;
  build_prod_change: randomise_primary_production_on_build;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 108 "sprites/nml/industries/hotel.pnml" 2
# 58 "<stdin>" 2
# 1 "sprites/nml/industries/iron_works.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/iron_works.pnml" 2



spriteset(iron_worksspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
}

spriteset(iron_worksspriteset_1, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(10, 10, 70, -40) }
spriteset(iron_worksspriteset_2, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(80, 10, 70, -39) }
spriteset(iron_worksspriteset_3, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(150, 10, 70, -39) }
spriteset(iron_worksspriteset_4, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(220, 10, 70, -39) }
spriteset(iron_worksspriteset_5, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(290, 10, 70, -39) }
spriteset(iron_worksspriteset_6, "sprites/graphics/industries/ironworks.png") { tmpl_building_sprite(360, 10, 70, -39) }

spritelayout iron_worksspritelayout_furnace_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 2040 + (animation_frame / 4); xoffset: 0; yoffset: 4; zoffset: 23 + animation_frame; xextent: 11; zextent: 7; hide_sprite: animation_frame > 19; }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout iron_worksspritelayout_large_shed { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout iron_worksspritelayout_large_shed_clerestory_roof { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout iron_worksfenced_spriteset_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
spritelayout iron_worksfenced_spriteset_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
spritelayout iron_worksfenced_spriteset_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: iron_worksspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: iron_worksspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
switch(FEAT_INDUSTRYTILES, SELF, iron_worksspritelayout_metal_pigs_anim, animation_frame) {
 0..60: iron_worksfenced_spriteset_4;
 61..120: iron_worksfenced_spriteset_5;
 iron_worksfenced_spriteset_6;
}

spritelayout iron_worksspritelayout_empty_ground {
 ground {
  sprite: iron_worksspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, iron_workslayout_1, relative_pos) {
 relative_coord(0, 0): iron_worksspritelayout_large_shed_clerestory_roof;
 relative_coord(0, 1): iron_worksspritelayout_furnace_anim;
 relative_coord(0, 2): iron_worksspritelayout_metal_pigs_anim;
 relative_coord(1, 0): iron_worksspritelayout_large_shed_clerestory_roof;
 relative_coord(1, 1): iron_worksspritelayout_furnace_anim;
 relative_coord(1, 2): iron_worksspritelayout_metal_pigs_anim;
 relative_coord(2, 0): iron_worksspritelayout_large_shed;
 iron_worksspritelayout_empty_ground;
}

switch(FEAT_INDUSTRYTILES, SELF, iron_workslayout_2, relative_pos) {
 relative_coord(0, 0): iron_worksspritelayout_large_shed;
 relative_coord(1, 0): iron_worksspritelayout_large_shed_clerestory_roof;
 relative_coord(1, 1): iron_worksspritelayout_furnace_anim;
 iron_worksspritelayout_empty_ground;
}

switch(FEAT_INDUSTRYTILES, PARENT, iron_workstile_layout, layout_num) {
 1: iron_workslayout_1;
 2: iron_workslayout_2;
 iron_workslayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, iron_workstile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { iron_workstile_layout; }
switch (FEAT_INDUSTRYTILES, SELF, iron_workstile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { iron_workstile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, iron_workstile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { iron_workstile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, iron_workstile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, iron_workstile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; iron_workstile_nearby_industry; }

/* Return a random animation frame from the extra_callback_info1 */
switch(FEAT_INDUSTRYTILES, SELF, iron_workstile_anim_control, (extra_callback_info1 & 14)) {
 0: return 0;
 1: return 2;
 2: return 4;
 3: return 6;
 4: return 8;
 5: return 10;
 6: return 12;
 7: return 14;
 8: return 16;
 9: return 18;
 10: return 20;
 11: return 22;
 12: return 24;
 return CB_RESULT_NEXT_FRAME;
}

item(FEAT_INDUSTRYTILES, iron_workstile, 199) {
 property {
  substitute: 0;
  accepted_cargos: [[IORE, 8], [WOOD, 8]];
  land_shape_flags: 0;
 }

 graphics {
  tile_check: iron_workstile_location_check;
  iron_workstile_fences;
 }
}

/* The animated tiles must not build on slopes.  Use a separate tile to achieve that.  Chains to same other checks, graphics etc. */
switch (FEAT_INDUSTRYTILES, SELF, iron_workstile2_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: iron_workstile_location_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, iron_workstile_animated, 211) {
 property {
  substitute: 0;
  accepted_cargos: [[IORE, 8], [WOOD, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
  animation_info: [ANIMATION_LOOPING, 180];
  animation_speed: 2;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  anim_control: iron_workstile_anim_control;
  tile_check: iron_workstile2_location_check;
  iron_workstile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_iron_works_1 {
 0, 0: iron_workstile;
 0, 1: iron_workstile_animated;
 0, 2: iron_workstile_animated;
 1, 0: iron_workstile;
 1, 1: iron_workstile_animated;
 1, 2: iron_workstile_animated;
 2, 0: iron_workstile;
 2, 1: iron_workstile;
 2, 2: iron_workstile;
}
/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 165 "sprites/nml/industries/iron_works.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch(FEAT_INDUSTRIES, SELF, iron_workscolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (iron_workssimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, iron_worksproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 1 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 1 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 iron_workssimple_produce;
}
# 174 "sprites/nml/industries/iron_works.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, iron_worksincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, iron_worksreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, iron_workscheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: iron_worksincrease_closure_counter;
 iron_worksreset_closure_counter;
}
# 175 "sprites/nml/industries/iron_works.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, iron_worksclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, iron_workshad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 iron_worksclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, iron_workscheck_closure, allow_close_secondary) {
 1..255: iron_workshad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 176 "sprites/nml/industries/iron_works.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, iron_worksextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, iron_worksextra_text, [



   show_debug_texts
   ]) {
 1: iron_worksextra_text_debug;
 return string(STR_EXTRA_IRON_WORKS);
}
# 178 "sprites/nml/industries/iron_works.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, iron_workscheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, iron_worksavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: iron_workscheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, iron_workscheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): iron_worksavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 180 "sprites/nml/industries/iron_works.pnml" 2

item(FEAT_INDUSTRIES, iron_works, 0x15) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_iron_works_1
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_IRON_WORKS);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_IRON_WORKS));
  prod_cargo_types: [STEL];
  accept_cargo_types: [IORE, WOOD];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 69;
  map_colour: 194;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: iron_worksproduce;
  construction_probability:iron_workscheck_availability;
  monthly_prod_change: iron_workscheck_production_level;
  random_prod_change: iron_workscheck_closure;
  extra_text_industry: iron_worksextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_UNTIL, string(STR_FUND_AVAILABLE_UNTIL_DATE_IRON_WORKS));
  colour: iron_workscolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 221 "sprites/nml/industries/iron_works.pnml" 2
# 59 "<stdin>" 2

# 1 "sprites/nml/industries/iron_ore_mine.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, iron_ore_minetile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, iron_ore_minetile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; iron_ore_minetile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, iron_ore_minetile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: iron_ore_minetile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, iron_ore_minetile_1, 100) {
 property {
  substitute: 100;
  override: 100;
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_2, 101) {
 property {
  substitute: 101;
  override: 101;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_3, 102) {
 property {
  substitute: 102;
  override: 102;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_4, 103) {
 property {
  substitute: 103;
  override: 103;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_5, 104) {
 property {
  substitute: 104;
  override: 104;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_6, 105) {
 property {
  substitute: 105;
  override: 105;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_7, 106) {
 property {
  substitute: 106;
  override: 106;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_8, 107) {
 property {
  substitute: 107;
  override: 107;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_9, 108) {
 property {
  substitute: 108;
  override: 108;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_10, 109) {
 property {
  substitute: 109;
  override: 109;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_11, 110) {
 property {
  substitute: 110;
  override: 110;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_12, 111) {
 property {
  substitute: 111;
  override: 111;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_13, 112) {
 property {
  substitute: 112;
  override: 112;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_14, 113) {
 property {
  substitute: 113;
  override: 113;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_15, 114) {
 property {
  substitute: 114;
  override: 114;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, iron_ore_minetile_16, 115) {
 property {
  substitute: 115;
  override: 115;
  accepted_cargos: [[ENSP, 8]];
 }
 graphics {
  tile_check: iron_ore_minetile_location_check;
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, iron_ore_mineiron_ore_mine, industry_count(iron_ore_mine) * 2 / 3 / industry_clusters != 0 && ( industry_distance(iron_ore_mine) < 20 || industry_distance(iron_ore_mine) > 70) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, iron_ore_minesteelmill, industry_distance(steelmill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; iron_ore_mineiron_ore_mine; }
switch (FEAT_INDUSTRIES, SELF, iron_ore_minecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; iron_ore_minesteelmill; }

switch(FEAT_INDUSTRIES, SELF, iron_ore_minecolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(iron_ore_mineproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, iron_ore_mineproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 iron_ore_mineproduction;
}
# 206 "sprites/nml/industries/iron_ore_mine.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minecheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minerandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minerandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, iron_ore_minedecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: iron_ore_minerandom_slow_decrease;
 iron_ore_minerandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minecheck_decrease_production, allow_primary_production_decrease) {
 1..255: iron_ore_minedecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minerandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, iron_ore_minecheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: iron_ore_minerandom_increase;
 iron_ore_minecheck_decrease_production;
}
# 207 "sprites/nml/industries/iron_ore_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, iron_ore_mineextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 209 "sprites/nml/industries/iron_ore_mine.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, iron_ore_minecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, iron_ore_mineavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: iron_ore_minecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, iron_ore_minecheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): iron_ore_mineavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 211 "sprites/nml/industries/iron_ore_mine.pnml" 2

item(FEAT_INDUSTRIES, iron_ore_mine, 0x04) {
 property {
  substitute: 18;
  override: 18;
  accept_cargo_types: [ENSP];
  prod_multiplier: [19];
  conflicting_ind_types: [];
  prob_random: 7;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 232;
  map_colour: 55;
 }
 graphics {
  produce_cargo_arrival: iron_ore_mineproduce;
  construction_probability:iron_ore_minecheck_availability;
  monthly_prod_change: iron_ore_minecheck_production_level;
  random_prod_change: iron_ore_minecheck_closure;
  build_prod_change: 4;
  extra_text_industry: iron_ore_mineextra_text;
  colour: iron_ore_minecolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 236 "sprites/nml/industries/iron_ore_mine.pnml" 2
# 61 "<stdin>" 2
# 1 "sprites/nml/industries/junk_yard.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/junk_yard.pnml" 2



spriteset(junk_yardspriteset_ground, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(10, 10) }

spriteset(junk_yardspriteset_1, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(10, 10, 55, -24) }
spriteset(junk_yardspriteset_2, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(80, 10, 55, -24) }
spriteset(junk_yardspriteset_3, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(150, 10, 55, -24) }
spriteset(junk_yardspriteset_4, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(220, 10, 55, -24) }
spriteset(junk_yardspriteset_5, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(290, 10, 55, -24) }
spriteset(junk_yardspriteset_6, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(360, 10, 55, -24) }
spriteset(junk_yardspriteset_7, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(430, 10, 55, -24) }
spriteset(junk_yardspriteset_8, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(500, 10, 55, -24) }
spriteset(junk_yardspriteset_9, "sprites/graphics/industries/junkyard.png") { tmpl_building_sprite(570, 10, 55, -24) }

spritelayout junk_yardspritelayout_1 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_1;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_2 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_2;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_3 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_4 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_4;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_5 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_5;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_6 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_6;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_7 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_8 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_8;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

spritelayout junk_yardspritelayout_9 {
 ground {
  sprite: 2022;
 }
 building {
  sprite: junk_yardspriteset_9;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  zextent: 32;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, junk_yardlayout_1, relative_pos) {
 relative_coord(0, 2): junk_yardspritelayout_2;
 relative_coord(1, 1): junk_yardspritelayout_2;
 relative_coord(2, 1): junk_yardspritelayout_1;
 relative_coord(2, 2): junk_yardspritelayout_8;
 relative_coord(3, 1): junk_yardspritelayout_4;
 relative_coord(3, 2): junk_yardspritelayout_7;
 relative_coord(4, 0): junk_yardspritelayout_5;
 relative_coord(4, 1): junk_yardspritelayout_3;
 relative_coord(4, 2): junk_yardspritelayout_6;
 junk_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, junk_yardlayout_2, relative_pos) {
 relative_coord(0, 1): junk_yardspritelayout_7;
 relative_coord(1, 1): junk_yardspritelayout_1;
 relative_coord(1, 2): junk_yardspritelayout_8;
 relative_coord(2, 0): junk_yardspritelayout_5;
 relative_coord(2, 1): junk_yardspritelayout_3;
 relative_coord(2, 2): junk_yardspritelayout_6;
 junk_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, junk_yardlayout_3, relative_pos) {
 relative_coord(0, 3): junk_yardspritelayout_2;
 relative_coord(1, 1): junk_yardspritelayout_2;
 relative_coord(1, 3): junk_yardspritelayout_9;
 relative_coord(2, 1): junk_yardspritelayout_1;
 relative_coord(2, 3): junk_yardspritelayout_8;
 relative_coord(3, 1): junk_yardspritelayout_4;
 relative_coord(3, 3): junk_yardspritelayout_7;
 relative_coord(4, 0): junk_yardspritelayout_5;
 relative_coord(4, 1): junk_yardspritelayout_3;
 relative_coord(4, 3): junk_yardspritelayout_6;
 junk_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, PARENT, junk_yardtile_spritelayout, layout_num) {
 1: junk_yardlayout_1;
 2: junk_yardlayout_2;
 3: junk_yardlayout_3;
 junk_yardspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, junk_yardtile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, junk_yardtile_slope_check, nearby_tile_slope(0,0) & bitmask(IS_STEEP_SLOPE)) { 0: junk_yardtile_nearby_industry; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, junk_yardtile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; junk_yardtile_slope_check; }

item(FEAT_INDUSTRYTILES, junk_yardtile, 193) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  tile_check: junk_yardtile_location_check;
  junk_yardtile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_junkyard_1 {
 0, 2: junk_yardtile;
 1, 1: junk_yardtile;
 1, 2: junk_yardtile;
 2, 1: junk_yardtile;
 2, 2: junk_yardtile;
 3, 1: junk_yardtile;
 3, 2: junk_yardtile;
 4, 0: junk_yardtile;
 4, 1: junk_yardtile;
 4, 2: junk_yardtile;
}

tilelayout tilelayout_junkyard_2 {
 0, 1: junk_yardtile;
 1, 1: junk_yardtile;
 1, 2: junk_yardtile;
 2, 0: junk_yardtile;
 2, 1: junk_yardtile;
 2, 2: junk_yardtile;
}

tilelayout tilelayout_junkyard_3 {
 0, 3: junk_yardtile;
 1, 1: junk_yardtile;
 1, 3: junk_yardtile;
 2, 1: junk_yardtile;
 2, 3: junk_yardtile;
 3, 1: junk_yardtile;
 3, 3: junk_yardtile;
 4, 0: junk_yardtile;
 4, 1: junk_yardtile;
 4, 3: junk_yardtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */


switch(FEAT_INDUSTRIES, SELF, junk_yardcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(junk_yardproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, junk_yardproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 junk_yardproduction;
}
# 246 "sprites/nml/industries/junk_yard.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, junk_yardcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, junk_yardrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, junk_yardrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, junk_yarddecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: junk_yardrandom_slow_decrease;
 junk_yardrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, junk_yardcheck_decrease_production, allow_primary_production_decrease) {
 1..255: junk_yarddecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, junk_yardrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, junk_yardcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: junk_yardrandom_increase;
 junk_yardcheck_decrease_production;
}
# 247 "sprites/nml/industries/junk_yard.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, junk_yardextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 249 "sprites/nml/industries/junk_yard.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, junk_yardcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, junk_yardavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: junk_yardcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, junk_yardcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): junk_yardavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 251 "sprites/nml/industries/junk_yard.pnml" 2

item(FEAT_INDUSTRIES, junkyard, 0x19) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_junkyard_1,
    tilelayout_junkyard_2,
    tilelayout_junkyard_3
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_JUNKYARD);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_JUNKYARD));
  prod_cargo_types: [SCMT];
  accept_cargo_types: [ENSP];
  prod_multiplier: [12, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 7;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 101;
  map_colour: 36;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: junk_yardproduce;
  construction_probability:junk_yardcheck_availability;
  monthly_prod_change: junk_yardcheck_production_level;
  random_prod_change: junk_yardcheck_closure;
  build_prod_change: 4;
  extra_text_industry: junk_yardextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_JUNKYARD));
  colour: junk_yardcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 295 "sprites/nml/industries/junk_yard.pnml" 2
# 62 "<stdin>" 2
# 1 "sprites/nml/industries/lime_kiln.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/lime_kiln.pnml" 2



spriteset(lime_kilnspriteset_ground) {
 tmpl_building_sprite_filename(360, 10, 64, -33, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(360, 10, 64, -33, "sprites/graphics/industries/limekiln_snow.png")
}

spriteset(lime_kilnspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 110, -70, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(10, 10, 110, -70, "sprites/graphics/industries/limekiln_snow.png")
}

spriteset(lime_kilnspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 110, -70, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(80, 10, 110, -70, "sprites/graphics/industries/limekiln_snow.png")
}

spriteset(lime_kilnspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 64, -31, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(150, 10, 64, -31, "sprites/graphics/industries/limekiln_snow.png")
}

spriteset(lime_kilnspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 92, -60, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(220, 10, 92, -60, "sprites/graphics/industries/limekiln_snow.png")
}

spriteset(lime_kilnspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 64, -31, "sprites/graphics/industries/limekiln.png")
 tmpl_building_sprite_filename(290, 10, 64, -31, "sprites/graphics/industries/limekiln_snow.png")
}

spritelayout lime_kilnspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: lime_kilnspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lime_kilnspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lime_kilnspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: lime_kilnspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lime_kilnspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lime_kilnspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: lime_kilnspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lime_kilnspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lime_kilnspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: lime_kilnspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lime_kilnspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lime_kilnspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: lime_kilnspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lime_kilnspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lime_kilnspritelayout_6 {
 ground {
  sprite: 2022;
 }

 childsprite {
  sprite: lime_kilnspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  hide_sprite: terrain_type != TILETYPE_SNOW;
  always_draw: 1;
 }
 building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
 building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

switch(FEAT_INDUSTRYTILES, SELF, lime_kilnlayout_1, relative_pos) {
 relative_coord(0, 0): lime_kilnspritelayout_2;
 relative_coord(0, 1): lime_kilnspritelayout_1;
 relative_coord(1, 0): lime_kilnspritelayout_4;
 relative_coord(1, 1): lime_kilnspritelayout_5;
 relative_coord(1, 2): lime_kilnspritelayout_3;
 lime_kilnspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, PARENT, lime_kilntile1_spritelayout, layout_num) {
 lime_kilnlayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, lime_kilntile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { lime_kilntile1_spritelayout; }
switch (FEAT_INDUSTRYTILES, SELF, lime_kilntile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { lime_kilntile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, lime_kilntile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { lime_kilntile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, lime_kilnnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, lime_kilnplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; lime_kilnnearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, lime_kilnlocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: lime_kilnplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, lime_kilntile, 191) {
 property {
  substitute: 0;
  accepted_cargos: [[GRVL, 8], [COAL, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: lime_kilnlocation_check;
  lime_kilntile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_lime_kiln_1 {
 0, 0: lime_kilntile;
 0, 1: lime_kilntile;
 0, 2: lime_kilntile;
 1, 0: lime_kilntile;
 1, 1: lime_kilntile;
 1, 2: lime_kilntile;
}

tilelayout tilelayout_lime_kiln_2 {
 0, 0: lime_kilntile;
 0, 1: lime_kilntile;
 1, 0: lime_kilntile;
 1, 1: lime_kilntile;
 2, 0: lime_kilntile;
 2, 1: lime_kilntile;
}

tilelayout tilelayout_lime_kiln_3 {
 0, 0: lime_kilntile;
 0, 1: lime_kilntile;
 0, 2: lime_kilntile;
 0, 3: lime_kilntile;
 1, 0: lime_kilntile;
 1, 1: lime_kilntile;
 1, 2: lime_kilntile;
 1, 3: lime_kilntile;
}


/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 157 "sprites/nml/industries/lime_kiln.pnml"
/* extra text template */




switch (FEAT_INDUSTRIES, SELF, lime_kilnlime_kiln, industry_distance(lime_kiln)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, lime_kilncoal_mine, industry_distance(coal_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; lime_kilnlime_kiln; }
switch (FEAT_INDUSTRIES, SELF, lime_kilnquarry, industry_distance(quarry)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; lime_kilncoal_mine; }
switch (FEAT_INDUSTRIES, SELF, lime_kilncheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; lime_kilnquarry; }

switch(FEAT_INDUSTRIES, SELF, lime_kilncolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (lime_kilnsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, lime_kilnproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 4 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 3 +
               LOAD_TEMP(0) * 4 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 lime_kilnsimple_produce;
}
# 170 "sprites/nml/industries/lime_kiln.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, lime_kilnincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, lime_kilnreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, lime_kilncheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: lime_kilnincrease_closure_counter;
 lime_kilnreset_closure_counter;
}
# 171 "sprites/nml/industries/lime_kiln.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, lime_kilnclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, lime_kilnhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 lime_kilnclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, lime_kilncheck_closure, allow_close_secondary) {
 1..255: lime_kilnhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 172 "sprites/nml/industries/lime_kiln.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, lime_kilnextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, lime_kilnextra_text, [



   show_debug_texts
   ]) {
 1: lime_kilnextra_text_debug;
 return string(STR_EXTRA_LIME_KILN);
}
# 174 "sprites/nml/industries/lime_kiln.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, lime_kilncheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, lime_kilnavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: lime_kilncheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, lime_kilncheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): lime_kilnavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 176 "sprites/nml/industries/lime_kiln.pnml" 2

item(FEAT_INDUSTRIES, lime_kiln, 0x01) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_lime_kiln_1,
    tilelayout_lime_kiln_2,
    tilelayout_lime_kiln_3
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_LIME_KILN);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_LIME_KILN));
  prod_cargo_types: [RFPR, FMSP];
  accept_cargo_types: [GRVL, COAL];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 7;
  prob_in_game: 6;
  prospect_chance: 0.75;
  fund_cost_multiplier: 45;
  map_colour: 209;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: lime_kilnproduce;
  construction_probability:lime_kilncheck_availability;
  monthly_prod_change: lime_kilncheck_production_level;
  random_prod_change: lime_kilncheck_closure;
  extra_text_industry: lime_kilnextra_text;
  colour: lime_kilncolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 218 "sprites/nml/industries/lime_kiln.pnml" 2
# 63 "<stdin>" 2
# 1 "sprites/nml/industries/lumber_yard.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/lumber_yard.pnml" 2



spriteset(lumber_yardspriteset_1, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(80, 10, 64, -40) }
spriteset(lumber_yardspriteset_2, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(150, 10, 64, -34) }
spriteset(lumber_yardspriteset_4, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(290, 10, 64, -35) }
spriteset(lumber_yardspriteset_5, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(10, 10, 64, -26) }
spriteset(lumber_yardspriteset_6, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(150, 90, 31, -4) }
spriteset(lumber_yardspriteset_7, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(220, 90, 31, -4) }
spriteset(lumber_yardspriteset_8, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(290, 90, 31, -4) }
spriteset(lumber_yardspriteset_9, "sprites/graphics/industries/lumberyard.png") { tmpl_building_sprite(360, 10, 64, -24) }

spritelayout lumber_yardspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_large_shed { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; }
 building {
  sprite: lumber_yardspriteset_7;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: lumber_yardspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout lumber_yardspritelayout_9 {
 ground {
  sprite: 2022;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, lumber_yardlayout_1, relative_pos) {
 relative_coord(0, 0): lumber_yardspritelayout_2;
 relative_coord(0, 1): lumber_yardspritelayout_1;
 relative_coord(0, 2): lumber_yardspritelayout_5;
 relative_coord(1, 0): lumber_yardspritelayout_6;
 relative_coord(1, 1): lumber_yardspritelayout_large_shed;
 relative_coord(2, 0): lumber_yardspritelayout_8;
 relative_coord(2, 1): lumber_yardspritelayout_large_shed;
 relative_coord(1, 2): lumber_yardspritelayout_8;
 relative_coord(2, 2): lumber_yardspritelayout_7;
 relative_coord(3, 0): lumber_yardspritelayout_6;
 relative_coord(3, 1): lumber_yardspritelayout_5;
 relative_coord(3, 2): lumber_yardspritelayout_6;
 lumber_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, lumber_yardlayout_2, relative_pos) {
 relative_coord(0, 0): lumber_yardspritelayout_2;
 relative_coord(0, 1): lumber_yardspritelayout_1;
 relative_coord(0, 2): lumber_yardspritelayout_5;
 relative_coord(0, 3): lumber_yardspritelayout_6;
 relative_coord(1, 0): lumber_yardspritelayout_8;
 relative_coord(1, 1): lumber_yardspritelayout_8;
 relative_coord(1, 2): lumber_yardspritelayout_large_shed;
 relative_coord(1, 3): lumber_yardspritelayout_6;
 relative_coord(2, 0): lumber_yardspritelayout_5;
 relative_coord(2, 1): lumber_yardspritelayout_6;
 relative_coord(2, 2): lumber_yardspritelayout_large_shed;
 relative_coord(2, 3): lumber_yardspritelayout_7;
 lumber_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, lumber_yardlayout_3, relative_pos) {
 relative_coord(0, 0): lumber_yardspritelayout_6;
 relative_coord(0, 1): lumber_yardspritelayout_large_shed;
 relative_coord(0, 2): lumber_yardspritelayout_2;
 relative_coord(0, 3): lumber_yardspritelayout_1;
 relative_coord(0, 4): lumber_yardspritelayout_8;
 relative_coord(1, 0): lumber_yardspritelayout_8;
 relative_coord(1, 1): lumber_yardspritelayout_large_shed;
 relative_coord(1, 2): lumber_yardspritelayout_6;
 relative_coord(1, 3): lumber_yardspritelayout_5;
 relative_coord(1, 4): lumber_yardspritelayout_7;
 lumber_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, SELF, lumber_yardlayout_4, relative_pos) {
 relative_coord(0, 0): lumber_yardspritelayout_large_shed;
 relative_coord(0, 1): lumber_yardspritelayout_7;
 relative_coord(1, 0): lumber_yardspritelayout_large_shed;
 relative_coord(1, 1): lumber_yardspritelayout_6;
 relative_coord(2, 0): lumber_yardspritelayout_2;
 relative_coord(2, 1): lumber_yardspritelayout_1;
 relative_coord(3, 0): lumber_yardspritelayout_8;
 relative_coord(3, 1): lumber_yardspritelayout_6;
 relative_coord(4, 0): lumber_yardspritelayout_5;
 relative_coord(4, 1): lumber_yardspritelayout_6;
 lumber_yardspritelayout_9;
}

switch(FEAT_INDUSTRYTILES, PARENT, lumber_yardtile_spritelayout, layout_num) {
 1: lumber_yardlayout_1;
 2: lumber_yardlayout_2;
 3: lumber_yardlayout_3;
 4: lumber_yardlayout_4;
 lumber_yardspritelayout_9;
}

switch (FEAT_INDUSTRYTILES, SELF, lumber_yardtile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { lumber_yardtile_spritelayout; }
switch (FEAT_INDUSTRYTILES, SELF, lumber_yardtile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_INDUSTRY), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_INDUSTRY), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_INDUSTRY), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_INDUSTRY), 12), ]) { lumber_yardtile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, lumber_yardtile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { lumber_yardtile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, lumber_yardtile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, lumber_yardtile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; lumber_yardtile_nearby_industry; }

item(FEAT_INDUSTRYTILES, lumber_yardtile, 187) {
 property {
  substitute: 0;
  accepted_cargos: [[WDPR, 8], [RFPR, 8]];
  land_shape_flags: 0;
 }

 graphics {
  tile_check: lumber_yardtile_location_check;
  lumber_yardtile_fences;
 }
}


/* The kiln building must not build on slopes.  Use a separate tile to achieve that.  Chains to same other checks, graphics etc. */
switch (FEAT_INDUSTRYTILES, SELF, lumber_yardtile2_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: lumber_yardtile_location_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, lumber_yardkiln_building_tile, 210) {
 property {
  substitute: 0;
  accepted_cargos: [[WDPR, 8], [RFPR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: lumber_yardtile2_location_check;
  lumber_yardtile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_lumber_yard_1 {
 0, 0: lumber_yardkiln_building_tile;
 0, 1: lumber_yardkiln_building_tile;
 0, 2: lumber_yardtile;
 1, 0: lumber_yardtile;
 1, 1: lumber_yardtile;
 1, 2: lumber_yardtile;
 2, 0: lumber_yardtile;
 2, 1: lumber_yardtile;
 2, 2: lumber_yardtile;
 3, 0: lumber_yardtile;
 3, 1: lumber_yardtile;
 3, 2: lumber_yardtile;
}

tilelayout tilelayout_lumber_yard_2 {
 0, 0: lumber_yardkiln_building_tile;
 0, 1: lumber_yardkiln_building_tile;
 0, 2: lumber_yardtile;
 0, 3: lumber_yardtile;
 1, 0: lumber_yardtile;
 1, 1: lumber_yardtile;
 1, 2: lumber_yardtile;
 1, 3: lumber_yardtile;
 2, 0: lumber_yardtile;
 2, 1: lumber_yardtile;
 2, 2: lumber_yardtile;
 2, 3: lumber_yardtile;
}

tilelayout tilelayout_lumber_yard_3 {
 0, 0: lumber_yardtile;
 0, 1: lumber_yardtile;
 0, 2: lumber_yardkiln_building_tile;
 0, 3: lumber_yardkiln_building_tile;
 0, 4: lumber_yardtile;
 1, 0: lumber_yardtile;
 1, 1: lumber_yardtile;
 1, 2: lumber_yardtile;
 1, 3: lumber_yardtile;
 1, 4: lumber_yardtile;
}

tilelayout tilelayout_lumber_yard_4 {
 0, 0: lumber_yardtile;
 0, 1: lumber_yardtile;
 1, 0: lumber_yardtile;
 1, 1: lumber_yardtile;
 2, 0: lumber_yardkiln_building_tile;
 2, 1: lumber_yardkiln_building_tile;
 3, 0: lumber_yardtile;
 3, 1: lumber_yardtile;
 4, 0: lumber_yardtile;
 4, 1: lumber_yardtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 231 "sprites/nml/industries/lumber_yard.pnml"
/* extra text template */




switch (FEAT_INDUSTRIES, SELF, lumber_yardlumber_yard, industry_distance(lumber_yard)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, lumber_yardcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; lumber_yardlumber_yard; }

switch(FEAT_INDUSTRIES, SELF, lumber_yardcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (lumber_yardsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, lumber_yardproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 6 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 lumber_yardsimple_produce;
}
# 242 "sprites/nml/industries/lumber_yard.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, lumber_yardincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, lumber_yardreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, lumber_yardcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: lumber_yardincrease_closure_counter;
 lumber_yardreset_closure_counter;
}
# 243 "sprites/nml/industries/lumber_yard.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, lumber_yardclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, lumber_yardhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 lumber_yardclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, lumber_yardcheck_closure, allow_close_secondary) {
 1..255: lumber_yardhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 244 "sprites/nml/industries/lumber_yard.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, lumber_yardextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, lumber_yardextra_text, [



   show_debug_texts
   ]) {
 1: lumber_yardextra_text_debug;
 return string(STR_EXTRA_LUMBER_YARD);
}
# 246 "sprites/nml/industries/lumber_yard.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, lumber_yardcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, lumber_yardavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: lumber_yardcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, lumber_yardcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): lumber_yardavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 248 "sprites/nml/industries/lumber_yard.pnml" 2

item(FEAT_INDUSTRIES, lumber_yard, 0x29) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_lumber_yard_1,
    tilelayout_lumber_yard_2,
    tilelayout_lumber_yard_3,
    tilelayout_lumber_yard_4
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_LUMBER_YARD);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_LUMBER_YARD));
  prod_cargo_types: [ENSP, BDMT];
  accept_cargo_types: [WDPR, RFPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 35;
  map_colour: 42;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: lumber_yardproduce;
  construction_probability:lumber_yardcheck_availability;
  monthly_prod_change: lumber_yardcheck_production_level;
  random_prod_change: lumber_yardcheck_closure;
  extra_text_industry: lumber_yardextra_text;
  colour: lumber_yardcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 291 "sprites/nml/industries/lumber_yard.pnml" 2
# 64 "<stdin>" 2

# 1 "sprites/nml/industries/machine_shop.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(machine_shopspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(machine_shopspriteset_1) {
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/machineshop.png"]
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_2) {
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/machineshop.png"]
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_3) {
 [150, 10, 64, 78, -25, -12, "sprites/graphics/industries/machineshop.png"]
 [150, 10, 64, 78, -25, -12, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_4) {
 [220, 10, 64, 78, -48, -28, "sprites/graphics/industries/machineshop.png"]
 [220, 10, 64, 78, -48, -28, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_5) {
 [290, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop.png"]
 [290, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_6) {
 [360, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop.png"]
 [360, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_7) {
 [430, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop.png"]
 [430, 10, 64, 78, -31, -47, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_8) {
 [500, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop.png"]
 [500, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_9) {
 [570, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop.png"]
 [570, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_10) {
 [640, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop.png"]
 [640, 10, 64, 85, -31, -54, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_11) {
 [780, 10, 64, 31, -35, 2, "sprites/graphics/industries/machineshop.png"]
 [780, 10, 64, 31, -35, 2, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_12) {
 [850, 10, 64, 31, -35, 2, "sprites/graphics/industries/machineshop.png"]
 [850, 10, 64, 31, -35, 2, "sprites/graphics/industries/machineshop_snow.png"]
}

spriteset(machine_shopspriteset_13) {
 [920, 10, 64, 49, -39, -15, "sprites/graphics/industries/machineshop.png"]
 [920, 10, 64, 49, -39, -15, "sprites/graphics/industries/machineshop_snow.png"]
}

spritelayout machine_shopspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_8_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_8(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 2040 + (animation_frame / 4); xoffset: 13; yoffset: 0; zoffset: 73 + animation_frame; xextent: 11; zextent: 7; hide_sprite: animation_frame > 19; }
building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_9 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_9(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_10 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_10(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_11 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_11(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_12 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_12(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_13 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: machine_shopspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: machine_shopspriteset_13(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout machine_shopspritelayout_14 {
 ground {
  sprite: machine_shopspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, machine_shoplayout_1, relative_pos) {
 relative_coord(0, 1): machine_shopspritelayout_7;
 relative_coord(0, 2): machine_shopspritelayout_14;
 relative_coord(1, 0): machine_shopspritelayout_6;
 relative_coord(1, 1): machine_shopspritelayout_5;
 relative_coord(1, 2): machine_shopspritelayout_13;
 relative_coord(2, 1): machine_shopspritelayout_10;
 relative_coord(2, 2): machine_shopspritelayout_12;
 relative_coord(3, 0): machine_shopspritelayout_9;
 relative_coord(3, 1): machine_shopspritelayout_8_anim;
 relative_coord(3, 2): machine_shopspritelayout_11;
 relative_coord(4, 0): machine_shopspritelayout_3;
 relative_coord(4, 1): machine_shopspritelayout_4;
 relative_coord(4, 2): machine_shopspritelayout_13;
 relative_coord(5, 0): machine_shopspritelayout_2;
 relative_coord(5, 1): machine_shopspritelayout_1;
 machine_shopspritelayout_2;
}

switch(FEAT_INDUSTRYTILES, SELF, machine_shoplayout_2, relative_pos) {
 relative_coord(0, 4): machine_shopspritelayout_12;
 relative_coord(0, 1): machine_shopspritelayout_7;
 relative_coord(0, 3): machine_shopspritelayout_7;
 relative_coord(1, 0): machine_shopspritelayout_6;
 relative_coord(1, 1): machine_shopspritelayout_5;
 relative_coord(1, 2): machine_shopspritelayout_6;
 relative_coord(1, 3): machine_shopspritelayout_5;
 relative_coord(1, 4): machine_shopspritelayout_11;
 relative_coord(2, 1): machine_shopspritelayout_10;
 relative_coord(2, 2): machine_shopspritelayout_14;
 relative_coord(2, 3): machine_shopspritelayout_3;
 relative_coord(2, 4): machine_shopspritelayout_4;
 relative_coord(3, 0): machine_shopspritelayout_9;
 relative_coord(3, 1): machine_shopspritelayout_8_anim;
 relative_coord(3, 2): machine_shopspritelayout_13;
 relative_coord(3, 3): machine_shopspritelayout_2;
 machine_shopspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, machine_shoplayout_3, relative_pos) {
 relative_coord(0, 1): machine_shopspritelayout_7;
 relative_coord(0, 3): machine_shopspritelayout_7;
 relative_coord(0, 4): machine_shopspritelayout_14;
 relative_coord(1, 0): machine_shopspritelayout_6;
 relative_coord(1, 1): machine_shopspritelayout_5;
 relative_coord(1, 2): machine_shopspritelayout_6;
 relative_coord(1, 3): machine_shopspritelayout_5;
 relative_coord(1, 4): machine_shopspritelayout_12;
 relative_coord(2, 0): machine_shopspritelayout_3;
 relative_coord(2, 1): machine_shopspritelayout_4;
 relative_coord(2, 3): machine_shopspritelayout_10;
 relative_coord(2, 4): machine_shopspritelayout_11;
 relative_coord(3, 0): machine_shopspritelayout_2;
 relative_coord(3, 2): machine_shopspritelayout_9;
 relative_coord(3, 3): machine_shopspritelayout_8_anim;
 relative_coord(3, 4): machine_shopspritelayout_13;
 machine_shopspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, machine_shoplayout_4, relative_pos) {
 relative_coord(0, 1): machine_shopspritelayout_7;
 relative_coord(0, 2): machine_shopspritelayout_13;
 relative_coord(0, 3): machine_shopspritelayout_3;
 relative_coord(0, 4): machine_shopspritelayout_4;
 relative_coord(1, 0): machine_shopspritelayout_6;
 relative_coord(1, 1): machine_shopspritelayout_5;
 relative_coord(1, 2): machine_shopspritelayout_2;
 relative_coord(1, 3): machine_shopspritelayout_1;
 relative_coord(1, 4): machine_shopspritelayout_12;
 relative_coord(2, 1): machine_shopspritelayout_7;
 relative_coord(2, 3): machine_shopspritelayout_10;
 relative_coord(2, 4): machine_shopspritelayout_11;
 relative_coord(3, 0): machine_shopspritelayout_6;
 relative_coord(3, 1): machine_shopspritelayout_5;
 relative_coord(3, 2): machine_shopspritelayout_9;
 relative_coord(3, 3): machine_shopspritelayout_8_anim;
 relative_coord(3, 4): machine_shopspritelayout_13;
 machine_shopspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, machine_shoplayout_5, relative_pos) {
 relative_coord(0, 0): machine_shopspritelayout_3;
 relative_coord(0, 1): machine_shopspritelayout_4;
 relative_coord(0, 2): machine_shopspritelayout_1;
 relative_coord(0, 3): machine_shopspritelayout_7;
 relative_coord(0, 5): machine_shopspritelayout_10;
 relative_coord(1, 2): machine_shopspritelayout_6;
 relative_coord(1, 3): machine_shopspritelayout_5;
 relative_coord(1, 4): machine_shopspritelayout_9;
 relative_coord(1, 5): machine_shopspritelayout_8_anim;
 relative_coord(1, 0): machine_shopspritelayout_12;
 relative_coord(1, 1): machine_shopspritelayout_11;
 relative_coord(2, 0): machine_shopspritelayout_13;
 relative_coord(2, 1): machine_shopspritelayout_13;
 relative_coord(2, 2): machine_shopspritelayout_14;
 relative_coord(2, 3): machine_shopspritelayout_2;
 relative_coord(2, 4): machine_shopspritelayout_1;
 machine_shopspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, machine_shoplayout, layout_num) {
 1: machine_shoplayout_1;
 2: machine_shoplayout_2;
 3: machine_shoplayout_3;
 4: machine_shoplayout_4;
 5: machine_shoplayout_5;
 machine_shoplayout_1;
}

switch (FEAT_INDUSTRYTILES, SELF, machine_shoptile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { machine_shoplayout; }
switch (FEAT_INDUSTRYTILES, SELF, machine_shoptile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { machine_shoptile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, machine_shoptile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { machine_shoptile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, machine_shoptile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, machine_shoptile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; machine_shoptile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, machine_shoptile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: machine_shoptile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

switch(FEAT_INDUSTRYTILES, SELF, machine_shoptile1_anim_control, (extra_callback_info1 & 14)) {
 0: return 0;
 1: return 2;
 2: return 4;
 3: return 6;
 4: return 8;
 5: return 10;
 6: return 12;
 7: return 14;
 8: return 16;
 9: return 18;
 10: return 20;
 11: return 22;
 12: return 24;
 return CB_RESULT_START_ANIMATION;
}

item(FEAT_INDUSTRYTILES, machine_shoptile, 186) {
 property {
  substitute: 0;
  accepted_cargos: [[STEL, 8], [PETR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 47];
  animation_speed: 2;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }
 graphics {
  anim_control: machine_shoptile1_anim_control;
  tile_check: machine_shoptile1_location_check;
  machine_shoptile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_machine_shop_1 {
 0, 0: machine_shoptile;
 0, 1: machine_shoptile;
 0, 2: machine_shoptile;
 1, 0: machine_shoptile;
 1, 1: machine_shoptile;
 1, 2: machine_shoptile;
 2, 0: machine_shoptile;
 2, 1: machine_shoptile;
 2, 2: machine_shoptile;
 3, 0: machine_shoptile;
 3, 1: machine_shoptile;
 3, 2: machine_shoptile;
 4, 0: machine_shoptile;
 4, 1: machine_shoptile;
 4, 2: machine_shoptile;
 5, 0: machine_shoptile;
 5, 1: machine_shoptile;
 5, 2: machine_shoptile;
}

tilelayout tilelayout_machine_shop_2 {
 0, 0: machine_shoptile;
 0, 1: machine_shoptile;
 0, 2: machine_shoptile;
 0, 3: machine_shoptile;
 0, 4: machine_shoptile;
 1, 0: machine_shoptile;
 1, 1: machine_shoptile;
 1, 2: machine_shoptile;
 1, 3: machine_shoptile;
 1, 4: machine_shoptile;
 2, 0: machine_shoptile;
 2, 1: machine_shoptile;
 2, 2: machine_shoptile;
 2, 3: machine_shoptile;
 2, 4: machine_shoptile;
 3, 0: machine_shoptile;
 3, 1: machine_shoptile;
 3, 2: machine_shoptile;
 3, 3: machine_shoptile;
 3, 4: machine_shoptile;
}

tilelayout tilelayout_machine_shop_3 {
 0, 0: machine_shoptile;
 0, 1: machine_shoptile;
 0, 2: machine_shoptile;
 0, 3: machine_shoptile;
 0, 4: machine_shoptile;
 1, 0: machine_shoptile;
 1, 1: machine_shoptile;
 1, 2: machine_shoptile;
 1, 3: machine_shoptile;
 1, 4: machine_shoptile;
 2, 0: machine_shoptile;
 2, 1: machine_shoptile;
 2, 2: machine_shoptile;
 2, 3: machine_shoptile;
 2, 4: machine_shoptile;
 3, 0: machine_shoptile;
 3, 1: machine_shoptile;
 3, 2: machine_shoptile;
 3, 3: machine_shoptile;
 3, 4: machine_shoptile;
}

tilelayout tilelayout_machine_shop_4 {
 0, 0: machine_shoptile;
 0, 1: machine_shoptile;
 0, 2: machine_shoptile;
 0, 3: machine_shoptile;
 0, 4: machine_shoptile;
 1, 0: machine_shoptile;
 1, 1: machine_shoptile;
 1, 2: machine_shoptile;
 1, 3: machine_shoptile;
 1, 4: machine_shoptile;
 2, 0: machine_shoptile;
 2, 1: machine_shoptile;
 2, 2: machine_shoptile;
 2, 3: machine_shoptile;
 2, 4: machine_shoptile;
 3, 0: machine_shoptile;
 3, 1: machine_shoptile;
 3, 2: machine_shoptile;
 3, 3: machine_shoptile;
 3, 4: machine_shoptile;
}

tilelayout tilelayout_machine_shop_5 {
 0, 0: machine_shoptile;
 0, 1: machine_shoptile;
 0, 2: machine_shoptile;
 0, 3: machine_shoptile;
 0, 4: machine_shoptile;
 0, 5: machine_shoptile;
 1, 0: machine_shoptile;
 1, 1: machine_shoptile;
 1, 2: machine_shoptile;
 1, 3: machine_shoptile;
 1, 4: machine_shoptile;
 1, 5: machine_shoptile;
 2, 0: machine_shoptile;
 2, 1: machine_shoptile;
 2, 2: machine_shoptile;
 2, 3: machine_shoptile;
 2, 4: machine_shoptile;
 2, 5: machine_shoptile;
}


/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 401 "sprites/nml/industries/machine_shop.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, machine_shopmachine_shop, industry_distance(machine_shop)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, machine_shopcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; machine_shopmachine_shop; }

switch(FEAT_INDUSTRIES, SELF, machine_shopcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (machine_shopsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, machine_shopproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 8 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 8 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 machine_shopsimple_produce;
}
# 413 "sprites/nml/industries/machine_shop.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, machine_shopincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, machine_shopreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, machine_shopcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: machine_shopincrease_closure_counter;
 machine_shopreset_closure_counter;
}
# 414 "sprites/nml/industries/machine_shop.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, machine_shopclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, machine_shophad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 machine_shopclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, machine_shopcheck_closure, allow_close_secondary) {
 1..255: machine_shophad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 415 "sprites/nml/industries/machine_shop.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, machine_shopextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, machine_shopextra_text, [



   show_debug_texts
   ]) {
 1: machine_shopextra_text_debug;
 return string(STR_EXTRA_MACHINE_SHOP);
}
# 417 "sprites/nml/industries/machine_shop.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, machine_shopcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, machine_shopavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: machine_shopcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, machine_shopcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): machine_shopavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 419 "sprites/nml/industries/machine_shop.pnml" 2

item(FEAT_INDUSTRIES, machine_shop, 0x26) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_machine_shop_1,
    tilelayout_machine_shop_2,
    tilelayout_machine_shop_3,
    tilelayout_machine_shop_4,tilelayout_machine_shop_5
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_MACHINE_SHOP);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_MACHINE_SHOP));
  prod_cargo_types: [FMSP, ENSP];
  accept_cargo_types: [STEL, PETR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 145;
  map_colour: 48;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: machine_shopproduce;
  construction_probability:machine_shopcheck_availability;
  monthly_prod_change: machine_shopcheck_production_level;
  random_prod_change: machine_shopcheck_closure;
  extra_text_industry: machine_shopextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_MACHINE_SHOP));
  colour: machine_shopcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 463 "sprites/nml/industries/machine_shop.pnml" 2
# 66 "<stdin>" 2
# 1 "sprites/nml/industries/metal_fabrication_plant.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(metal_fabrication_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(metal_fabrication_plantspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 70, -35, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(10, 60, 70, -35, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 70, -35, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(80, 60, 70, -35, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_3) {
 tmpl_building_sprite_filename(150, 60, 51, -20, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(150, 60, 51, -20, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_4) {
 tmpl_building_sprite_filename(220, 60, 51, -23, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(220, 60, 51, -23, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_5) {
 tmpl_building_sprite_filename(290, 60, 51, -20, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(290, 60, 51, -20, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_6) {
 tmpl_building_sprite_filename(360, 60, 31, 0, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(360, 60, 31, 0, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spriteset(metal_fabrication_plantspriteset_7) {
 tmpl_building_sprite_filename(430, 60, 31, 0, "sprites/graphics/industries/metalfabricationplant.png")
 tmpl_building_sprite_filename(430, 60, 31, 0, "sprites/graphics/industries/metalfabricationplant_snow.png")
}

spritelayout metal_fabrication_plantspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantsmall_workshop { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantboilerhouse { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantmetal_store { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantgreeble_tile_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_fabrication_plantgreeble_tile_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_fabrication_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_fabrication_plantspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

switch(FEAT_INDUSTRYTILES, SELF, metal_fabrication_plantlayout_1, relative_pos) {
 relative_coord(0, 0): metal_fabrication_plantsmall_workshop;
 relative_coord(0, 1): metal_fabrication_plantsmall_workshop;
 relative_coord(0, 2): metal_fabrication_plantboilerhouse;
 relative_coord(0, 3): metal_fabrication_plantgreeble_tile_1;
 relative_coord(1, 0): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 1): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 2): metal_fabrication_plantgreeble_tile_2;
 relative_coord(1, 3): metal_fabrication_plantgreeble_tile_1;
 relative_coord(2, 0): metal_fabrication_plantsmall_workshop;
 relative_coord(2, 1): metal_fabrication_plantspritelayout_1;
 relative_coord(2, 2): metal_fabrication_plantspritelayout_2;
 relative_coord(2, 3): metal_fabrication_plantgreeble_tile_2;
 relative_coord(2, 4): metal_fabrication_plantgreeble_tile_1;
 metal_fabrication_plantmetal_store;
}

switch(FEAT_INDUSTRYTILES, SELF, metal_fabrication_plantlayout_2, relative_pos) {
 relative_coord(0, 2): metal_fabrication_plantsmall_workshop;
 relative_coord(0, 3): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 0): metal_fabrication_plantspritelayout_1;
 relative_coord(1, 1): metal_fabrication_plantspritelayout_2;
 relative_coord(1, 2): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 3): metal_fabrication_plantsmall_workshop;
 relative_coord(2, 0): metal_fabrication_plantgreeble_tile_2;
 relative_coord(2, 1): metal_fabrication_plantgreeble_tile_2;
 relative_coord(2, 2): metal_fabrication_plantgreeble_tile_1;
 relative_coord(2, 3): metal_fabrication_plantgreeble_tile_1;
 relative_coord(3, 0): metal_fabrication_plantboilerhouse;
 relative_coord(3, 2): metal_fabrication_plantmetal_store;
 relative_coord(3, 3): metal_fabrication_plantmetal_store;
 metal_fabrication_plantmetal_store;
}

switch(FEAT_INDUSTRYTILES, SELF, metal_fabrication_plantlayout_3, relative_pos) {
 relative_coord(0, 0): metal_fabrication_plantsmall_workshop;
 relative_coord(0, 1): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 0): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 1): metal_fabrication_plantsmall_workshop;
 relative_coord(1, 2): metal_fabrication_plantboilerhouse;
 relative_coord(3, 0): metal_fabrication_plantmetal_store;
 relative_coord(3, 1): metal_fabrication_plantspritelayout_1;
 relative_coord(3, 2): metal_fabrication_plantspritelayout_2;
 relative_coord(3, 3): metal_fabrication_plantgreeble_tile_2;
 relative_coord(4, 0): metal_fabrication_plantmetal_store;
 relative_coord(4, 1): metal_fabrication_plantboilerhouse;
 relative_coord(4, 2): metal_fabrication_plantgreeble_tile_2;
 relative_coord(4, 3): metal_fabrication_plantgreeble_tile_1;
 metal_fabrication_plantmetal_store;
}

switch(FEAT_INDUSTRYTILES, PARENT, metal_fabrication_plantlayout, layout_num) {
 1: metal_fabrication_plantlayout_1;
 2: metal_fabrication_plantlayout_2;
 3: metal_fabrication_plantlayout_3;
 metal_fabrication_plantlayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, metal_fabrication_planttile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, metal_fabrication_planttile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; metal_fabrication_planttile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, metal_fabrication_planttile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: metal_fabrication_planttile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, metal_fabrication_planttile, 200) {
 property {
  substitute: 0;
  accepted_cargos: [[STEL, 8], [RFPR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 47];
  animation_speed: 2;
 }

 graphics {
  tile_check: metal_fabrication_planttile1_location_check;
  metal_fabrication_plantlayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_metal_fabrication_plant_1 {
 0, 0: metal_fabrication_planttile;
 0, 1: metal_fabrication_planttile;
 0, 2: metal_fabrication_planttile;
 0, 3: metal_fabrication_planttile;
 0, 4: metal_fabrication_planttile;
 1, 0: metal_fabrication_planttile;
 1, 1: metal_fabrication_planttile;
 1, 2: metal_fabrication_planttile;
 1, 3: metal_fabrication_planttile;
 2, 0: metal_fabrication_planttile;
 2, 1: metal_fabrication_planttile;
 2, 2: metal_fabrication_planttile;
 1, 4: metal_fabrication_planttile;
 2, 3: metal_fabrication_planttile;
 2, 4: metal_fabrication_planttile;
}

tilelayout tilelayout_metal_fabrication_plant_2 {
 0, 2: metal_fabrication_planttile;
 0, 3: metal_fabrication_planttile;
 1, 0: metal_fabrication_planttile;
 1, 1: metal_fabrication_planttile;
 1, 2: metal_fabrication_planttile;
 1, 3: metal_fabrication_planttile;
 2, 0: metal_fabrication_planttile;
 2, 3: metal_fabrication_planttile;
 3, 0: metal_fabrication_planttile;
 3, 1: metal_fabrication_planttile;
 3, 2: metal_fabrication_planttile;
 3, 3: metal_fabrication_planttile;
 2, 1: metal_fabrication_planttile;
 2, 2: metal_fabrication_planttile;
}

tilelayout tilelayout_metal_fabrication_plant_3 {
 0, 0: metal_fabrication_planttile;
 0, 1: metal_fabrication_planttile;
 1, 0: metal_fabrication_planttile;
 1, 1: metal_fabrication_planttile;
 1, 2: metal_fabrication_planttile;
 3, 0: metal_fabrication_planttile;
 3, 1: metal_fabrication_planttile;
 3, 2: metal_fabrication_planttile;
 3, 3: metal_fabrication_planttile;
 4, 0: metal_fabrication_planttile;
 4, 1: metal_fabrication_planttile;
 4, 2: metal_fabrication_planttile;
 4, 3: metal_fabrication_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 215 "sprites/nml/industries/metal_fabrication_plant.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */



switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantmetal_fabrication_plant, industry_distance(metal_fabrication_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; metal_fabrication_plantmetal_fabrication_plant; }

switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (metal_fabrication_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 6 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 metal_fabrication_plantsimple_produce;
}
# 228 "sprites/nml/industries/metal_fabrication_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: metal_fabrication_plantincrease_closure_counter;
 metal_fabrication_plantreset_closure_counter;
}
# 229 "sprites/nml/industries/metal_fabrication_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 metal_fabrication_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantcheck_closure, allow_close_secondary) {
 1..255: metal_fabrication_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 230 "sprites/nml/industries/metal_fabrication_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantextra_text, [



   show_debug_texts
   ]) {
 1: metal_fabrication_plantextra_text_debug;
 return string(STR_EXTRA_METAL_FABRICATION_PLANT);
}
# 232 "sprites/nml/industries/metal_fabrication_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, metal_fabrication_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: metal_fabrication_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, metal_fabrication_plantcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): metal_fabrication_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 234 "sprites/nml/industries/metal_fabrication_plant.pnml" 2


item(FEAT_INDUSTRIES, metal_fabrication_plant, 0x02) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_metal_fabrication_plant_1,
    tilelayout_metal_fabrication_plant_2,
    tilelayout_metal_fabrication_plant_3
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_METAL_FABRICATION_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_METAL_FABRICATION_PLANT));
  prod_cargo_types: [BDMT];
  accept_cargo_types: [STEL, RFPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 120;
  map_colour: 191;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: metal_fabrication_plantproduce;
  construction_probability:metal_fabrication_plantcheck_availability;
  monthly_prod_change: metal_fabrication_plantcheck_production_level;
  random_prod_change: metal_fabrication_plantcheck_closure;
  extra_text_industry: metal_fabrication_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_METAL_FABRICATION_PLANT));
  colour: metal_fabrication_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 278 "sprites/nml/industries/metal_fabrication_plant.pnml" 2
# 67 "<stdin>" 2
# 1 "sprites/nml/industries/metal_workshop.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(metal_foundryspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(metal_foundryspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 70, -39, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(10, 60, 70, -39, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 70, -39, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(80, 60, 70, -39, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_3) {
 tmpl_building_sprite_filename(150, 60, 51, -20, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(150, 60, 51, -20, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_4) {
 tmpl_building_sprite_filename(220, 60, 51, -20, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(220, 60, 51, -20, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_5) {
 tmpl_building_sprite_filename(290, 60, 51, -20, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(290, 60, 51, -20, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_6) {
 tmpl_building_sprite_filename(360, 60, 31, 0, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(360, 60, 31, 0, "sprites/graphics/industries/metalworkshop_snow.png")
}

spriteset(metal_foundryspriteset_7) {
 tmpl_building_sprite_filename(430, 60, 31, 0, "sprites/graphics/industries/metalworkshop.png")
 tmpl_building_sprite_filename(430, 60, 31, 0, "sprites/graphics/industries/metalworkshop_snow.png")
}

spritelayout metal_foundryspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout metal_foundryspritelayout_1_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: metal_foundryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: metal_foundryspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 2040 + (animation_frame / 4); xoffset: 0; yoffset: 8; zoffset: 53 + animation_frame; xextent: 11; zextent: 7; hide_sprite: animation_frame > 19; }
}

switch(FEAT_INDUSTRYTILES, SELF, metal_foundrylayout_1, relative_pos) {
 relative_coord(0, 0): metal_foundryspritelayout_3;
 relative_coord(2, 0): metal_foundryspritelayout_3;
 relative_coord(0, 1): metal_foundryspritelayout_3;
 relative_coord(1, 1): metal_foundryspritelayout_3;
 relative_coord(1, 0): metal_foundryspritelayout_3;
 relative_coord(0, 3): metal_foundryspritelayout_4;
 relative_coord(1, 3): metal_foundryspritelayout_4;
 relative_coord(1, 4): metal_foundryspritelayout_6;
 relative_coord(2, 1): metal_foundryspritelayout_1_anim;
 relative_coord(2, 2): metal_foundryspritelayout_2;
 relative_coord(2, 3): metal_foundryspritelayout_7;
 relative_coord(2, 4): metal_foundryspritelayout_7;
 metal_foundryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, metal_foundrylayout_2, relative_pos) {
 relative_coord(1, 0): metal_foundryspritelayout_1_anim;
 relative_coord(1, 1): metal_foundryspritelayout_2;
 relative_coord(0, 2): metal_foundryspritelayout_3;
 relative_coord(1, 2): metal_foundryspritelayout_3;
 relative_coord(1, 3): metal_foundryspritelayout_3;
 relative_coord(2, 1): metal_foundryspritelayout_7;
 relative_coord(2, 2): metal_foundryspritelayout_6;
 relative_coord(2, 3): metal_foundryspritelayout_6;
 relative_coord(2, 0): metal_foundryspritelayout_4;
 relative_coord(3, 0): metal_foundryspritelayout_4;
 relative_coord(3, 2): metal_foundryspritelayout_4;
 relative_coord(0, 3): metal_foundryspritelayout_3;
 relative_coord(3, 3): metal_foundryspritelayout_3;
 metal_foundryspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, PARENT, metal_foundrylayout, layout_num) {
 1: metal_foundrylayout_1;
 2: metal_foundrylayout_2;
 metal_foundrylayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, metal_foundrytile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, metal_foundrytile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; metal_foundrytile1_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, metal_foundrytile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: metal_foundrytile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, metal_foundrytile, 188) {
 property {
  substitute: 0;
  accepted_cargos: [[STEL, 8],[RFPR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 47];
  animation_speed: 2;
 }

 graphics {
  tile_check: metal_foundrytile1_location_check;
  metal_foundrylayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_metal_foundry_1 {
 0, 0: metal_foundrytile;
 0, 1: metal_foundrytile;
 0, 2: metal_foundrytile;
 0, 3: metal_foundrytile;
 0, 4: metal_foundrytile;
 1, 0: metal_foundrytile;
 1, 1: metal_foundrytile;
 1, 2: metal_foundrytile;
 1, 3: metal_foundrytile;
 2, 0: metal_foundrytile;
 2, 1: metal_foundrytile;
 2, 2: metal_foundrytile;
 1, 4: metal_foundrytile;
 2, 3: metal_foundrytile;
 2, 4: metal_foundrytile;
}

tilelayout tilelayout_metal_foundry_2 {
 0, 2: metal_foundrytile;
 0, 3: metal_foundrytile;
 1, 0: metal_foundrytile;
 1, 1: metal_foundrytile;
 1, 2: metal_foundrytile;
 1, 3: metal_foundrytile;
 2, 0: metal_foundrytile;
 2, 3: metal_foundrytile;
 3, 0: metal_foundrytile;
 3, 1: metal_foundrytile;
 3, 2: metal_foundrytile;
 3, 3: metal_foundrytile;
 2, 1: metal_foundrytile;
 2, 2: metal_foundrytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 182 "sprites/nml/industries/metal_workshop.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, metal_foundrymetal_foundry, industry_distance(metal_foundry)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, metal_foundrycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; metal_foundrymetal_foundry; }

switch(FEAT_INDUSTRIES, SELF, metal_foundrycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (metal_foundrysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, metal_foundryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 6 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 metal_foundrysimple_produce;
}
# 194 "sprites/nml/industries/metal_workshop.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, metal_foundryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, metal_foundryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, metal_foundrycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: metal_foundryincrease_closure_counter;
 metal_foundryreset_closure_counter;
}
# 195 "sprites/nml/industries/metal_workshop.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, metal_foundryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, metal_foundryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 metal_foundryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, metal_foundrycheck_closure, allow_close_secondary) {
 1..255: metal_foundryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 196 "sprites/nml/industries/metal_workshop.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, metal_foundryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, metal_foundryextra_text, [



   show_debug_texts
   ]) {
 1: metal_foundryextra_text_debug;
 return string(STR_EXTRA_METAL_FOUNDRY);
}
# 198 "sprites/nml/industries/metal_workshop.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, metal_foundrycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, metal_foundryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: metal_foundrycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, metal_foundrycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): metal_foundryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 200 "sprites/nml/industries/metal_workshop.pnml" 2


item(FEAT_INDUSTRIES, metal_foundry, 0x09) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_metal_foundry_1,
    tilelayout_metal_foundry_2
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_METAL_FOUNDRY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_METAL_FOUNDRY));
  prod_cargo_types: [GOOD, MNSP];
  accept_cargo_types: [STEL, RFPR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 120;
  map_colour: 123;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: metal_foundryproduce;
  construction_probability:metal_foundrycheck_availability;
  monthly_prod_change: metal_foundrycheck_production_level;
  random_prod_change: metal_foundrycheck_closure;
  extra_text_industry: metal_foundryextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_METAL_FOUNDRY));
  colour: metal_foundrycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 243 "sprites/nml/industries/metal_workshop.pnml" 2
# 68 "<stdin>" 2
# 1 "sprites/nml/industries/mixed_farm.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/mixed_farm.pnml" 2



spriteset(mixed_farmspriteset_1, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(10, 10, 52, -21) }
spriteset(mixed_farmspriteset_2, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(80, 10, 52, -21) }
spriteset(mixed_farmspriteset_3, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(150, 10, 52, -21) }
spriteset(mixed_farmspriteset_4, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(220, 10, 52, -21) }
spriteset(mixed_farmspriteset_5, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(290, 10, 52, -21) }
spriteset(mixed_farmspriteset_6, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(360, 10, 52, -21) }
spriteset(mixed_farmspriteset_7, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(430, 10, 52, -21) }
spriteset(mixed_farmspriteset_8, "sprites/graphics/industries/mixedfarm.png") { tmpl_building_sprite(500, 10, 52, -21) }

spritelayout mixed_farmspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CLEARED; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout mixed_farmspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CLEARED; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CLEARED; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout mixed_farmspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: mixed_farmspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

switch(FEAT_INDUSTRYTILES, SELF, mixed_farmlayout_1, relative_pos) {
 relative_coord(2, 0): mixed_farmspritelayout_1;
 relative_coord(1, 0): mixed_farmspritelayout_2;
 relative_coord(0, 3): mixed_farmspritelayout_3;
 relative_coord(3, 3): mixed_farmspritelayout_4;
 relative_coord(2, 2): mixed_farmspritelayout_5;
 relative_coord(3, 2): mixed_farmspritelayout_6;
 relative_coord(2, 3): mixed_farmspritelayout_7;
 mixed_farmspritelayout_8;
}

switch(FEAT_INDUSTRYTILES, SELF, mixed_farmlayout_2, relative_pos) {
 relative_coord(1, 3): mixed_farmspritelayout_1;
 relative_coord(2, 2): mixed_farmspritelayout_2;
 relative_coord(2, 1): mixed_farmspritelayout_3;
 relative_coord(0, 0): mixed_farmspritelayout_4;
 relative_coord(1, 0): mixed_farmspritelayout_5;
 relative_coord(0, 3): mixed_farmspritelayout_6;
 relative_coord(0, 2): mixed_farmspritelayout_7;
 mixed_farmspritelayout_8;
}

switch(FEAT_INDUSTRYTILES, SELF, mixed_farmlayout_3, relative_pos) {
 relative_coord(0, 1): mixed_farmspritelayout_1;
 relative_coord(1, 2): mixed_farmspritelayout_2;
 relative_coord(1, 0): mixed_farmspritelayout_3;
 relative_coord(3, 0): mixed_farmspritelayout_4;
 relative_coord(0, 2): mixed_farmspritelayout_5;
 relative_coord(3, 2): mixed_farmspritelayout_6;
 relative_coord(2, 0): mixed_farmspritelayout_7;
 mixed_farmspritelayout_8;
}

switch(FEAT_INDUSTRYTILES, PARENT, mixed_farmtile_spritelayout, layout_num) {
 1: mixed_farmlayout_1;
 2: mixed_farmlayout_2;
 3: mixed_farmlayout_3;
 mixed_farmspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* Allow players to build it also on snow and in the desert */
switch(FEAT_INDUSTRYTILES, SELF, mixed_farmtile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, mixed_farmtile_slope_check, nearby_tile_slope(0,0) & bitmask(IS_STEEP_SLOPE)) { 0: mixed_farmtile_nearby_industry; return string(STR_ERR_LOCATION_NOT_ON_STEEP_SLOPE); }
switch (FEAT_INDUSTRYTILES, PARENT, mixed_farmtile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; mixed_farmtile_slope_check; }
switch(FEAT_INDUSTRYTILES, SELF, mixed_farmtile_height_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) { 0..1: mixed_farmtile_player_check; return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE); }
switch(FEAT_INDUSTRYTILES, SELF, mixed_farmtile_desert_check, (nearby_tile_terrain_type( 1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 1, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, -1) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) == TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 1) == TILETYPE_DESERT) ) { 1: return string(STR_ERR_LOCATION_NOT_IN_DESERT); mixed_farmtile_height_check; }
switch(FEAT_INDUSTRYTILES, SELF, mixed_farmtile_location_check, nearby_tile_is_water(0, 0)) { 1: string(STR_ERR_LOCATION_NOT_ON_WATER); mixed_farmtile_desert_check; }

item(FEAT_INDUSTRYTILES, mixed_farmtile, 190) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }

 graphics {
  tile_check: mixed_farmtile_location_check;
  mixed_farmtile_spritelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_mixed_farm_1 {
 0, 2: mixed_farmtile;
 0, 3: mixed_farmtile;
 1, 0: mixed_farmtile;
 2, 0: mixed_farmtile;
 2, 2: mixed_farmtile;
 2, 3: mixed_farmtile;
 3, 2: mixed_farmtile;
 3, 3: mixed_farmtile;
}

tilelayout tilelayout_mixed_farm_2 {
 0, 0: mixed_farmtile;
 0, 2: mixed_farmtile;
 0, 3: mixed_farmtile;
 1, 0: mixed_farmtile;
 1, 3: mixed_farmtile;
 2, 0: mixed_farmtile;
 2, 1: mixed_farmtile;
 2, 2: mixed_farmtile;
}

tilelayout tilelayout_mixed_farm_3 {
 0, 0: mixed_farmtile;
 0, 1: mixed_farmtile;
 0, 2: mixed_farmtile;
 1, 0: mixed_farmtile;
 1, 2: mixed_farmtile;
 2, 0: mixed_farmtile;
 3, 0: mixed_farmtile;
 3, 2: mixed_farmtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, mixed_farmmixed_farm, industry_count(mixed_farm) * 1 / 2 / industry_clusters != 0 && ( industry_distance(mixed_farm) < 10 || industry_distance(mixed_farm) > 36) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, mixed_farmstockyard, industry_distance(stockyard)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; mixed_farmmixed_farm; }
switch (FEAT_INDUSTRIES, SELF, mixed_farmtextile_mill, industry_distance(textile_mill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; mixed_farmstockyard; }
switch (FEAT_INDUSTRIES, SELF, mixed_farmplastics_plant, industry_distance(plastics_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; mixed_farmtextile_mill; }
switch (FEAT_INDUSTRIES, SELF, mixed_farmcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; mixed_farmplastics_plant; }

switch(FEAT_INDUSTRIES, SELF, mixed_farmcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(mixed_farmproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, mixed_farmproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 mixed_farmproduction;
}
# 154 "sprites/nml/industries/mixed_farm.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, mixed_farmcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, mixed_farmrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, mixed_farmrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, mixed_farmdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: mixed_farmrandom_slow_decrease;
 mixed_farmrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, mixed_farmcheck_decrease_production, allow_primary_production_decrease) {
 1..255: mixed_farmdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, mixed_farmrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, mixed_farmcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: mixed_farmrandom_increase;
 mixed_farmcheck_decrease_production;
}
# 155 "sprites/nml/industries/mixed_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, mixed_farmextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 157 "sprites/nml/industries/mixed_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, mixed_farmcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, mixed_farmavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: mixed_farmcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, mixed_farmcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): mixed_farmavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 159 "sprites/nml/industries/mixed_farm.pnml" 2

item(FEAT_INDUSTRIES, mixed_farm, 0x1D) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_mixed_farm_1,
    tilelayout_mixed_farm_2,
    tilelayout_mixed_farm_3
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_FARM;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_MIXEDFARM);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_MIXEDFARM));
  prod_cargo_types: [LVST, FICR];
  accept_cargo_types: [FMSP];
  prod_multiplier: [7, 7];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 1;
  conflicting_ind_types: [];
  prob_random: 18;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 49;
  map_colour: 7;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY,
                                  IND_FLAG_PLANT_FIELDS_WHEN_BUILT
                                 );
 }
 graphics {
  produce_cargo_arrival: mixed_farmproduce;
  construction_probability:mixed_farmcheck_availability;
  monthly_prod_change: mixed_farmcheck_production_level;
  random_prod_change: mixed_farmcheck_closure;
  build_prod_change: 4;
  extra_text_fund: return string(STR_FUND_MIXED_FARM);
  extra_text_industry: mixed_farmextra_text;
  colour: mixed_farmcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 205 "sprites/nml/industries/mixed_farm.pnml" 2
# 69 "<stdin>" 2

# 1 "sprites/nml/industries/oil_rig.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

item(FEAT_INDUSTRYTILES, oil_rigtile_1, 25) {
 property {
  substitute: 25;
  override: 25;
  accepted_cargos: [[ENSP, 8], [PASS, 8]];
 }
}

item(FEAT_INDUSTRYTILES, oil_rigtile_2, 26) {
 property {
  substitute: 26;
  override: 26;
  accepted_cargos: [[ENSP, 8], [PASS, 8]];
 }
}

item(FEAT_INDUSTRYTILES, oil_rigtile_3, 27) {
 property {
  substitute: 27;
  override: 27;
  accepted_cargos: [[ENSP, 8], [PASS, 8]];
 }
}

item(FEAT_INDUSTRYTILES, oil_rigtile_4, 28) {
 property {
  substitute: 28;
  override: 28;
  accepted_cargos: [[ENSP, 8], [PASS, 8]];
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, oil_rigcoastal_distance, water_distance) { 0 .. param_max_coastal_distance: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRIES, SELF, oil_rigoil_refinery, industry_distance(oil_refinery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; oil_rigcoastal_distance; }
switch (FEAT_INDUSTRIES, SELF, oil_rigcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; oil_rigoil_refinery; }

switch(FEAT_INDUSTRIES, SELF, oil_rigcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(oil_rigproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, oil_rigproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 oil_rigproduction;
}
# 61 "sprites/nml/industries/oil_rig.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, oil_rigcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, oil_rigrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, oil_rigrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, oil_rigdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: oil_rigrandom_slow_decrease;
 oil_rigrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, oil_rigcheck_decrease_production, allow_primary_production_decrease) {
 1..255: oil_rigdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, oil_rigrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, oil_rigcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: oil_rigrandom_increase;
 oil_rigcheck_decrease_production;
}
# 62 "sprites/nml/industries/oil_rig.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, oil_rigextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 64 "sprites/nml/industries/oil_rig.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, oil_rigcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, oil_rigavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: oil_rigcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, oil_rigcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): oil_rigavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 66 "sprites/nml/industries/oil_rig.pnml" 2

item(FEAT_INDUSTRIES, oil_rig, 0x10) {
 property {
  substitute: 5;
  override: 5;
  name: 18439;
  prod_cargo_types: [OIL_, PASS];
  accept_cargo_types: [ENSP];
  prod_multiplier: [29, 4];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  conflicting_ind_types: [];
  prob_random: 6;
  prob_in_game: 6;
  prospect_chance: 0.75;
  fund_cost_multiplier: 255;
  map_colour: 152;
 }
 graphics {
  produce_cargo_arrival: oil_rigproduce;
  construction_probability:oil_rigcheck_availability;
  monthly_prod_change: oil_rigcheck_production_level;
  random_prod_change: oil_rigcheck_closure;
  build_prod_change: 4;
  extra_text_industry: oil_rigextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_OILRIG));
  colour: oil_rigcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 97 "sprites/nml/industries/oil_rig.pnml" 2
# 71 "<stdin>" 2
# 1 "sprites/nml/industries/oil_wells.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/oil_wells.pnml" 2



spritelayout oil_wellsspritelayout_oil_well {
 ground {
  sprite: 2173;
 }
 building {
  sprite: 2174 + (((animation_frame % 11) < 6) ? (animation_frame % 11) : 10 - (animation_frame % 11));
  xoffset: 1;
  yoffset: 2;
  xextent: 15;
  yextent: 14;
 }
}

spriteset(spriteset_building, "sprites/graphics/industries/oilwell.png") { tmpl_building_sprite(10, 10, 38, -9) }

spritelayout oil_wellsspritelayout_building {
 ground {
  sprite: 2022;
 }
 building {
  sprite: spriteset_building;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
  xoffset: 1;
  yoffset: 2;
  xextent: 15;
  yextent: 14;
 }
}

/* ***************************************************
 * Definition of the industry tiles and their callbacks
 * ***************************************************/

switch(FEAT_INDUSTRYTILES, SELF, oil_wellstile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, oil_wellstile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; oil_wellstile_nearby_industry; }


switch (FEAT_INDUSTRYTILES, SELF, oil_wellstile_oil_well_stop_anim, animation_frame) {
 1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
 2: return 12;
 3: return 13;
 4: return 14;
 5: return 15;
 6: return 16;
 7: return 17;
 8: return 18;
 9: return 19;
 10: return 20;
 return CB_RESULT_DO_NOTHING;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wellstile_oil_well_start_anim, animation_frame) {
 11: return 1;
 12: return 2;
 13: return 3;
 14: return 4;
 15: return 5;
 16: return 6;
 17: return 7;
 18: return 8;
 19: return 9;
 20: return 10;
 return CB_RESULT_START_ANIMATION;
}


random_switch (FEAT_INDUSTRYTILES, SELF, oil_wellstile_oil_well_random_trigger, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
 1: return oil_wellstile_oil_well_stop_anim;
 1: return oil_wellstile_oil_well_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wellstile_oil_well_anim_next_frame, animation_frame) {
 10: return 1;
 11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over.
 20: return 11;
 return CB_RESULT_NEXT_FRAME;
}

item(FEAT_INDUSTRYTILES, oil_wellstile_oil_well, 215) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: 0;
  /* Animation. */
  animation_info: [ANIMATION_LOOPING, 20];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
  special_flags: bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
 }
 graphics {
  tile_check: oil_wellstile_location_check;
  anim_control: oil_wellstile_oil_well_random_trigger;
  anim_next_frame: oil_wellstile_oil_well_anim_next_frame;
  random_trigger: oil_wellstile_oil_well_random_trigger;
  oil_wellsspritelayout_oil_well;
 }
}

item(FEAT_INDUSTRYTILES, oil_wellstile_building, 216) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: 0;
 }
 graphics {
  tile_check: oil_wellstile_location_check;
  oil_wellsspritelayout_building;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_7594_1 {
 0, 0: oil_wellstile_oil_well;
 0, 7: oil_wellstile_oil_well;
 1, 4: oil_wellstile_oil_well;
 2, 1: oil_wellstile_oil_well;
 3, 5: oil_wellstile_building;
 4, 8: oil_wellstile_oil_well;
 5, 1: oil_wellstile_oil_well;
 5, 4: oil_wellstile_oil_well;
}

tilelayout tilelayout_7594_2 {
 0, 0: oil_wellstile_oil_well;
 0, 4: oil_wellstile_oil_well;
 1, 4: oil_wellstile_oil_well;
 2, 8: oil_wellstile_oil_well;
 4, 4: oil_wellstile_building;
 4, 8: oil_wellstile_oil_well;
 5, 2: oil_wellstile_oil_well;
 6, 2: oil_wellstile_oil_well;
 6, 4: oil_wellstile_oil_well;
}

tilelayout tilelayout_7594_3 {
 0, 0: oil_wellstile_oil_well;
 0, 2: oil_wellstile_oil_well;
 1, 4: oil_wellstile_oil_well;
 1, 6: oil_wellstile_oil_well;
 2, 0: oil_wellstile_building;
 3, 2: oil_wellstile_oil_well;
 3, 4: oil_wellstile_oil_well;
}

tilelayout tilelayout_7594_4 {
 0, 0: oil_wellstile_oil_well;
 0, 4: oil_wellstile_oil_well;
 0, 6: oil_wellstile_oil_well;
 1, 2: oil_wellstile_oil_well;
 1, 8: oil_wellstile_building;
 2, 0: oil_wellstile_oil_well;
 2, 2: oil_wellstile_oil_well;
 3, 1: oil_wellstile_oil_well;
 5, 0: oil_wellstile_oil_well;
 5, 2: oil_wellstile_oil_well;
 6, 0: oil_wellstile_oil_well;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, oil_wellsoil_refinery, industry_distance(oil_refinery)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, oil_wellscheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; oil_wellsoil_refinery; }

switch(FEAT_INDUSTRIES, SELF, oil_wellscolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(oil_wellsproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, oil_wellsproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 oil_wellsproduction;
}
# 187 "sprites/nml/industries/oil_wells.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, oil_wellscheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, oil_wellsrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, oil_wellsrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, oil_wellsdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: oil_wellsrandom_slow_decrease;
 oil_wellsrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, oil_wellscheck_decrease_production, allow_primary_production_decrease) {
 1..255: oil_wellsdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, oil_wellsrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, oil_wellscheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: oil_wellsrandom_increase;
 oil_wellscheck_decrease_production;
}
# 188 "sprites/nml/industries/oil_wells.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, oil_wellsextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 190 "sprites/nml/industries/oil_wells.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, oil_wellscheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, oil_wellsavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: oil_wellscheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, oil_wellscheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): oil_wellsavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 192 "sprites/nml/industries/oil_wells.pnml" 2

item(FEAT_INDUSTRIES, oil_wells, 0x0F) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_7594_1,
    tilelayout_7594_2,
    tilelayout_7594_3,
    tilelayout_7594_4
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: 18445;
  prod_cargo_types: [OIL_];
  accept_cargo_types: [ENSP];
  prod_multiplier: [28];
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 230;
  map_colour: 152;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: oil_wellsproduce;
  construction_probability:oil_wellscheck_availability;
  monthly_prod_change: oil_wellscheck_production_level;
  random_prod_change: oil_wellscheck_closure;
  build_prod_change: 4;
  extra_text_industry: oil_wellsextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_OILWELLS));
  colour: oil_wellscolour;
 }
}
# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 230 "sprites/nml/industries/oil_wells.pnml" 2
# 72 "<stdin>" 2
# 1 "sprites/nml/industries/oil_refinery.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, oil_refinerytile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, oil_refinerytile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; oil_refinerytile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, oil_refinerytile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: oil_refinerytile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, oil_refinerytile_1, 18) {
 property {
  substitute: 18;
  override: 18;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, oil_refinerytile_2, 19) {
 property {
  substitute: 19;
  override: 19;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, oil_refinerytile_3, 20) {
 property {
  substitute: 20;
  override: 20;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, oil_refinerytile_4, 21) {
 property {
  substitute: 21;
  override: 21;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, oil_refinerytile_5, 22) {
 property {
  substitute: 22;
  override: 22;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, oil_refinerytile_6, 23) {
 property {
  substitute: 23;
  override: 23;
  accepted_cargos: [[OIL_, 8]];
 }
 graphics {
  tile_check: oil_refinerytile_location_check;
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 99 "sprites/nml/industries/oil_refinery.pnml"
/* extra text template */

/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, oil_refineryoil_refinery, industry_distance(oil_refinery)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, oil_refineryoil_wells, industry_distance(oil_wells)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; oil_refineryoil_refinery; }
switch (FEAT_INDUSTRIES, SELF, oil_refineryoil_rig, industry_distance(oil_rig)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; oil_refineryoil_wells; }
switch (FEAT_INDUSTRIES, SELF, oil_refinerycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; oil_refineryoil_rig; }

switch(FEAT_INDUSTRIES, SELF, oil_refinerycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (oil_refinerysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, oil_refineryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 oil_refinerysimple_produce;
}
# 111 "sprites/nml/industries/oil_refinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, oil_refineryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, oil_refineryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, oil_refinerycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: oil_refineryincrease_closure_counter;
 oil_refineryreset_closure_counter;
}
# 112 "sprites/nml/industries/oil_refinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, oil_refineryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, oil_refineryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 oil_refineryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, oil_refinerycheck_closure, allow_close_secondary) {
 1..255: oil_refineryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 113 "sprites/nml/industries/oil_refinery.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, oil_refineryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, oil_refineryextra_text, [



   show_debug_texts
   ]) {
 1: oil_refineryextra_text_debug;
 return string(STR_EXTRA_OIL_REFINERY);
}
# 115 "sprites/nml/industries/oil_refinery.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, oil_refinerycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, oil_refineryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: oil_refinerycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, oil_refinerycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): oil_refineryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 117 "sprites/nml/industries/oil_refinery.pnml" 2

item(FEAT_INDUSTRIES, oil_refinery, 0x11) {
 property {
  substitute: 4;
  override: 4;
  prod_cargo_types: [RFPR, PETR];
  accept_cargo_types: [OIL_];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  conflicting_ind_types: [];
  prob_random: 4;
  prob_in_game: 2;
  fund_cost_multiplier: 200;
  map_colour: 191;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: oil_refineryproduce;
  construction_probability:oil_refinerycheck_availability;
  monthly_prod_change: oil_refinerycheck_production_level;
  random_prod_change: oil_refinerycheck_closure;
  extra_text_industry: oil_refineryextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_OILREFINERY));
  colour: oil_refinerycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 146 "sprites/nml/industries/oil_refinery.pnml" 2
# 73 "<stdin>" 2

# 1 "sprites/nml/industries/paper_mill.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, paper_milltile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, paper_milltile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; paper_milltile_nearby_industry; }

item(FEAT_INDUSTRYTILES, paper_milltile_1, 64) {
 property {
  substitute: 64;
  override: 64;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_2, 65) {
 property {
  substitute: 65;
  override: 65;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_3, 66) {
 property {
  substitute: 66;
  override: 66;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_4, 67) {
 property {
  substitute: 67;
  override: 67;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_5, 68) {
 property {
  substitute: 68;
  override: 68;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_6, 69) {
 property {
  substitute: 69;
  override: 69;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_7, 70) {
 property {
  substitute: 70;
  override: 70;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, paper_milltile_8, 71) {
 property {
  substitute: 71;
  override: 71;
  accepted_cargos: [[WOOD, 8], [CLAY, 8], [RFPR, 8]];
 }
 graphics {
  tile_check: paper_milltile_location_check;
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 120 "sprites/nml/industries/paper_mill.pnml"
/* extra text template */

/* availability years - also update available from strings if changing these */

switch (FEAT_INDUSTRIES, SELF, paper_millpaper_mill, industry_distance(paper_mill)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, paper_millforest, industry_distance(forest)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; paper_millpaper_mill; }
switch (FEAT_INDUSTRIES, SELF, paper_millclay_pit, industry_distance(clay_pit)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; paper_millforest; }
switch (FEAT_INDUSTRIES, SELF, paper_millcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; paper_millclay_pit; }

switch(FEAT_INDUSTRIES, SELF, paper_millcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (paper_millsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, paper_millproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 4 +
               LOAD_TEMP(2) * 2,
       1
   ),
   STORE_PERM( 4 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(2) * 2,
       2
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 4,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 paper_millsimple_produce;
}
# 132 "sprites/nml/industries/paper_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, paper_millincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, paper_millreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, paper_millcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: paper_millincrease_closure_counter;
 paper_millreset_closure_counter;
}
# 133 "sprites/nml/industries/paper_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, paper_millclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, paper_millhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 paper_millclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, paper_millcheck_closure, allow_close_secondary) {
 1..255: paper_millhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 134 "sprites/nml/industries/paper_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, paper_millextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, paper_millextra_text, [



   show_debug_texts
   ]) {
 1: paper_millextra_text_debug;
 return string(STR_EXTRA_PAPER_MILL);
}
# 136 "sprites/nml/industries/paper_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, paper_millcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, paper_millavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: paper_millcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, paper_millcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): paper_millavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 138 "sprites/nml/industries/paper_mill.pnml" 2

item(FEAT_INDUSTRIES, paper_mill, 0x0E) {
 property {
  substitute: 14;
  override: 14;
  prod_cargo_types: [GOOD, MNSP];
  accept_cargo_types: [CLAY, WOOD, RFPR];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 2;
  fund_cost_multiplier: 120;
  map_colour: 184;
 }
 graphics {
  produce_cargo_arrival: paper_millproduce;
  construction_probability:paper_millcheck_availability;
  monthly_prod_change: paper_millcheck_production_level;
  random_prod_change: paper_millcheck_closure;
  extra_text_industry: paper_millextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_PAPERMILL));
  colour: paper_millcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 165 "sprites/nml/industries/paper_mill.pnml" 2
# 75 "<stdin>" 2
# 1 "sprites/nml/industries/petrol_pump.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/petrol_pump.pnml" 2



spriteset(petrol_pumpspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(petrol_pumpspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 59, -28, "sprites/graphics/industries/petrolpump.png")
 tmpl_building_sprite_filename(10, 60, 59, -28, "sprites/graphics/industries/petrolpump_snow.png")
}

spriteset(petrol_pumpspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 59, -28, "sprites/graphics/industries/petrolpump.png")
 tmpl_building_sprite_filename(80, 60, 59, -28, "sprites/graphics/industries/petrolpump_snow.png")
}

spritelayout petrol_pumpspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: petrol_pumpspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

spritelayout petrol_pumpspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: petrol_pumpspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } }

switch(FEAT_INDUSTRYTILES, SELF, petrol_pumplayout_1, relative_pos) {
 relative_coord(0, 1): petrol_pumpspritelayout_2;
 petrol_pumpspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, petrol_pumplayout_2, relative_pos) {
 relative_coord(1, 0): petrol_pumpspritelayout_2;
 petrol_pumpspritelayout_1;
}

switch(FEAT_INDUSTRYTILES, PARENT, petrol_pumplayout, layout_num) {
 1: petrol_pumplayout_1;
 2: petrol_pumplayout_2;
 petrol_pumpspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* Petrol station uses special road check, tailored for each layout separately
 * when called by the game engine
 */
switch(FEAT_INDUSTRYTILES, SELF, petrol_pumptile1_layout1_road_check,
   (
   nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
   nearby_tile_class( 0, 2) == TILE_CLASS_ROAD ||
   nearby_tile_class(-1, 0) == TILE_CLASS_ROAD ||
   nearby_tile_class(-1, 1) == TILE_CLASS_ROAD ||
   nearby_tile_class( 1, 0) == TILE_CLASS_ROAD ||
   nearby_tile_class( 1, 1) == TILE_CLASS_ROAD
   ) ) {
 1: return CB_RESULT_LOCATION_ALLOW;
 return CB_RESULT_LOCATION_ALLOW;
}
switch(FEAT_INDUSTRYTILES, SELF, petrol_pumptile1_layout2_road_check,
   (
   nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
   nearby_tile_class( 0, 1) == TILE_CLASS_ROAD ||
   nearby_tile_class( 1, -1) == TILE_CLASS_ROAD ||
   nearby_tile_class( 1, 1) == TILE_CLASS_ROAD ||
   nearby_tile_class(-1, 0) == TILE_CLASS_ROAD ||
   nearby_tile_class( 2, 0) == TILE_CLASS_ROAD
   ) ) {
 1: return CB_RESULT_LOCATION_ALLOW;
 return CB_RESULT_LOCATION_ALLOW;
}
switch(FEAT_INDUSTRYTILES, SELF, petrol_pumptile1_layout_check, (extra_callback_info2 & 255)) {
 0: petrol_pumptile1_layout1_road_check;
 1: petrol_pumptile1_layout2_road_check;
 return CB_RESULT_LOCATION_ALLOW;
}

switch (FEAT_INDUSTRYTILES, PARENT, petrol_pumptile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; petrol_pumptile1_layout_check; }
switch (FEAT_INDUSTRYTILES, SELF, petrol_pumptile1_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: petrol_pumptile1_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, petrol_pumptile, 203) {
 property {
  substitute: 0;
  accepted_cargos: [[FOOD, 8], [GOOD, 8], [PETR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: petrol_pumptile1_location_check;
  petrol_pumplayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_petrol_pump_1 {
 0, 0: petrol_pumptile;
 0, 1: petrol_pumptile;
}

tilelayout tilelayout_petrol_pump_2 {
 0, 0: petrol_pumptile;
 1, 0: petrol_pumptile;
}
/* *************************************************
 * Definition of the industry
 * *************************************************/
/* availability years - also update available from strings if changing these  */

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, petrol_pumpcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, petrol_pumpavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: petrol_pumpcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, petrol_pumpcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): petrol_pumpavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 118 "sprites/nml/industries/petrol_pump.pnml" 2


item(FEAT_INDUSTRIES, petrol_pump, 0x3C) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_petrol_pump_1,
    tilelayout_petrol_pump_2
   ];
  life_type: IND_LIFE_TYPE_BLACK_HOLE;
  name: string(STR_IND_PETROLPUMP);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_PETROLPUMP));
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;

  prod_cargo_types: [];
  accept_cargo_types: [FOOD, GOOD, PETR];

  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;

  conflicting_ind_types: [];
  spec_flags: 0;
  prob_random: 14;
  prob_in_game: 14;
  prospect_chance: 0.75;
  fund_cost_multiplier: 8;
  remove_cost_multiplier: 0;
  map_colour: 15;
 }
 graphics {
  construction_probability:petrol_pumpcheck_availability;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_PETROL_PUMP));
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 159 "sprites/nml/industries/petrol_pump.pnml" 2
# 76 "<stdin>" 2
# 1 "sprites/nml/industries/plastics_plant.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* common ground sprite */
spriteset(plastics_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

/* *************************************************
 * (general) tile
 * *************************************************/

spriteset(plastics_plantspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 62, -31, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(10, 10, 62, -31, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 62, -31, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(80, 10, 62, -31, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 55, -24, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(150, 10, 55, -24, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 55, -24, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(220, 10, 55, -24, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 55, -24, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(290, 10, 55, -24, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_6) {
 tmpl_building_sprite_filename(360, 10, 87, -56, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(360, 10, 87, -56, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_7) {
 tmpl_building_sprite_filename(430, 10, 87, -56, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(430, 10, 87, -56, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_8) {
 tmpl_building_sprite_filename(500, 10, 87, -56, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(500, 10, 87, -56, "sprites/graphics/industries/plasticsplant_snow.png")
}

spriteset(plastics_plantspriteset_9) {
 tmpl_building_sprite_filename(570, 10, 55, -24, "sprites/graphics/industries/plasticsplant.png")
 tmpl_building_sprite_filename(570, 10, 55, -24, "sprites/graphics/industries/plasticsplant_snow.png")
}

spritelayout plastics_plantspritelayout_store_front { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_store_rear { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_pipes { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_tanks_front { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_tanks_rear { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_large_building_centre { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 52; } }

spritelayout plastics_plantspritelayout_large_building_right { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 52; } }

spritelayout plastics_plantspritelayout_large_building_left { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_8(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 52; } }

spritelayout plastics_plantspritelayout_silos { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: plastics_plantspriteset_9(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout plastics_plantspritelayout_concrete { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: plastics_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } }

switch(FEAT_INDUSTRYTILES, SELF, plastics_plantlayout_1, relative_pos) {
 relative_coord(0, 0): plastics_plantspritelayout_store_rear;
 relative_coord(0, 1): plastics_plantspritelayout_store_front;
 relative_coord(0, 2): plastics_plantspritelayout_concrete;
 relative_coord(1, 0): plastics_plantspritelayout_store_rear;
 relative_coord(1, 1): plastics_plantspritelayout_store_front;
 relative_coord(1, 2): plastics_plantspritelayout_concrete;
 relative_coord(2, 0): plastics_plantspritelayout_concrete;
 relative_coord(2, 1): plastics_plantspritelayout_large_building_right;
 relative_coord(2, 2): plastics_plantspritelayout_silos;
 relative_coord(3, 1): plastics_plantspritelayout_large_building_centre;
 relative_coord(3, 2): plastics_plantspritelayout_concrete;
 relative_coord(4, 0): plastics_plantspritelayout_tanks_rear;
 relative_coord(4, 1): plastics_plantspritelayout_tanks_front;
 relative_coord(4, 2): plastics_plantspritelayout_pipes;
 plastics_plantspritelayout_large_building_left;
}

switch(FEAT_INDUSTRYTILES, SELF, plastics_plantlayout_2, relative_pos) {
 relative_coord(0, 1): plastics_plantspritelayout_large_building_right;
 relative_coord(0, 2): plastics_plantspritelayout_silos;
 relative_coord(1, 0): plastics_plantspritelayout_large_building_left;
 relative_coord(1, 1): plastics_plantspritelayout_large_building_centre;
 relative_coord(1, 2): plastics_plantspritelayout_concrete;
 relative_coord(2, 0): plastics_plantspritelayout_tanks_rear;
 relative_coord(2, 1): plastics_plantspritelayout_tanks_front;
 relative_coord(2, 2): plastics_plantspritelayout_pipes;
 relative_coord(3, 0): plastics_plantspritelayout_store_rear;
 relative_coord(3, 1): plastics_plantspritelayout_store_front;
 relative_coord(3, 2): plastics_plantspritelayout_concrete;
 plastics_plantspritelayout_large_building_left;
}

switch(FEAT_INDUSTRYTILES, SELF, plastics_plantlayout_3, relative_pos) {
 relative_coord(0, 0): plastics_plantspritelayout_store_rear;
 relative_coord(0, 1): plastics_plantspritelayout_store_front;
 relative_coord(0, 2): plastics_plantspritelayout_concrete;
 relative_coord(0, 3): plastics_plantspritelayout_large_building_right;
 relative_coord(0, 4): plastics_plantspritelayout_silos;
 relative_coord(1, 0): plastics_plantspritelayout_store_rear;
 relative_coord(1, 1): plastics_plantspritelayout_store_front;
 relative_coord(1, 2): plastics_plantspritelayout_large_building_left;
 relative_coord(1, 3): plastics_plantspritelayout_large_building_centre;
 relative_coord(1, 4): plastics_plantspritelayout_concrete;
 relative_coord(2, 0): plastics_plantspritelayout_store_rear;
 relative_coord(2, 1): plastics_plantspritelayout_store_front;
 relative_coord(2, 2): plastics_plantspritelayout_tanks_rear;
 relative_coord(2, 3): plastics_plantspritelayout_tanks_front;
 relative_coord(2, 4): plastics_plantspritelayout_pipes;
 plastics_plantspritelayout_large_building_left;
}

switch(FEAT_INDUSTRYTILES, PARENT, plastics_plantlayout, layout_num) {
 1: plastics_plantlayout_1;
 2: plastics_plantlayout_2;
 3: plastics_plantlayout_3;
 plastics_plantspritelayout_store_front;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, plastics_planttile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, plastics_planttile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; plastics_planttile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, plastics_planttile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: plastics_planttile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

/* general tile */

item(FEAT_INDUSTRYTILES, plastics_planttile, 176) {
 property {
  substitute: 0;
  accepted_cargos: [[RFPR, 8], [FICR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: plastics_planttile_location_check;
  plastics_plantlayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_plastics_plant_1 {
 0, 0: plastics_planttile;
 0, 1: plastics_planttile;
 0, 2: plastics_planttile;
 1, 0: plastics_planttile;
 1, 1: plastics_planttile;
 1, 2: plastics_planttile;
 2, 0: plastics_planttile;
 2, 1: plastics_planttile;
 2, 2: plastics_planttile;
 3, 0: plastics_planttile;
 3, 1: plastics_planttile;
 3, 2: plastics_planttile;
 4, 0: plastics_planttile;
 4, 1: plastics_planttile;
 4, 2: plastics_planttile;
}

tilelayout tilelayout_plastics_plant_2 {
 0, 0: plastics_planttile;
 0, 1: plastics_planttile;
 0, 2: plastics_planttile;
 1, 0: plastics_planttile;
 1, 1: plastics_planttile;
 1, 2: plastics_planttile;
 2, 0: plastics_planttile;
 2, 1: plastics_planttile;
 2, 2: plastics_planttile;
 3, 0: plastics_planttile;
 3, 1: plastics_planttile;
 3, 2: plastics_planttile;
}

tilelayout tilelayout_plastics_plant_3 {
 0, 0: plastics_planttile;
 0, 1: plastics_planttile;
 0, 2: plastics_planttile;
 0, 3: plastics_planttile;
 0, 4: plastics_planttile;
 1, 0: plastics_planttile;
 1, 1: plastics_planttile;
 1, 2: plastics_planttile;
 1, 3: plastics_planttile;
 1, 4: plastics_planttile;
 2, 0: plastics_planttile;
 2, 1: plastics_planttile;
 2, 2: plastics_planttile;
 2, 3: plastics_planttile;
 2, 4: plastics_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 237 "sprites/nml/industries/plastics_plant.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, plastics_plantplastics_plant, industry_distance(plastics_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, plastics_plantmixed_farm, industry_distance(mixed_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; plastics_plantplastics_plant; }
switch (FEAT_INDUSTRIES, SELF, plastics_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; plastics_plantmixed_farm; }

switch(FEAT_INDUSTRIES, SELF, plastics_plantcolour, colour) { 0: return 5; 1: return 1; 2: return 2; 3: return 3; 4: return 2; 5: return 5; 6: return 1; 7: return 7; 8: return 5; 9: return 14; 10: return 10; 11: return 10; 12: return 3; 13: return 13; 14: return 14; 15: return 15; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (plastics_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, plastics_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 6 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 plastics_plantsimple_produce;
}
# 250 "sprites/nml/industries/plastics_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, plastics_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, plastics_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, plastics_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: plastics_plantincrease_closure_counter;
 plastics_plantreset_closure_counter;
}
# 251 "sprites/nml/industries/plastics_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, plastics_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, plastics_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 plastics_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, plastics_plantcheck_closure, allow_close_secondary) {
 1..255: plastics_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 252 "sprites/nml/industries/plastics_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, plastics_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, plastics_plantextra_text, [



   show_debug_texts
   ]) {
 1: plastics_plantextra_text_debug;
 return string(STR_EXTRA_PLASTICS_PLANT);
}
# 254 "sprites/nml/industries/plastics_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, plastics_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, plastics_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: plastics_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, plastics_plantcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): plastics_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 256 "sprites/nml/industries/plastics_plant.pnml" 2


item(FEAT_INDUSTRIES, plastics_plant, 0x12) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_plastics_plant_1,
    tilelayout_plastics_plant_2,
    tilelayout_plastics_plant_3
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_PLASTICS_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_PLASTICS_PLANT));
  prod_cargo_types: [GOOD, MNSP];
  accept_cargo_types: [RFPR, FICR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 125;
  map_colour: 208;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: plastics_plantproduce;
  construction_probability:plastics_plantcheck_availability;
  monthly_prod_change: plastics_plantcheck_production_level;
  random_prod_change: plastics_plantcheck_closure;
  extra_text_industry: plastics_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_PLASTICS_PLANT));
  colour: plastics_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 300 "sprites/nml/industries/plastics_plant.pnml" 2
# 77 "<stdin>" 2
# 1 "sprites/nml/industries/quarry.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(quarryspriteset_1) {
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [10, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_2) {
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [80, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_3) {
 [150, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [150, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_4) {
 [220, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [220, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_5) {
 [290, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [290, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_6) {
 [360, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [360, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_7) {
 [10, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [10, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_8) {
 [80, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [80, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_9) {
 [150, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [150, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_10) {
 [220, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [220, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_11) {
 [290, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [290, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_12) {
 [360, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [360, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_13) {
 [10, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [10, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_14) {
 [80, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [80, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_15) {
 [150, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [150, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_16) {
 [220, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [220, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_17) {
 [290, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [290, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_18) {
 [360, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [360, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_19) {
 [10, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [10, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_20) {
 [80, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [80, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_21) {
 [150, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [150, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_22) {
 [220, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [220, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_23) {
 [290, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [290, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_24) {
 [360, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [360, 130, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_25) {
 [440, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [440, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_26) {
 [510, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [510, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_27) {
 [580, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [580, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_28) {
 [650, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [650, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_29) {
 [440, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [440, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_30) {
 [510, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [510, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_31) {
 [580, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [580, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_32) {
 [650, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [650, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_33) {
 [580, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [580, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_34) {
 [650, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [650, 90, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_35) {
 [730, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [730, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_36) {
 [800, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [800, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_37) {
 [870, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [870, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_38) {
 [940, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [940, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_39) {
 [1010, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [1010, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_40) {
 [1080, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [1080, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_41) {
 [1150, 10, 64, 34, -31, -3, "sprites/graphics/industries/quarry_waterpit.png"]
 [1150, 10, 64, 34, -31, -3, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_42) {
 [1220, 10, 64, 33, -31, -2, "sprites/graphics/industries/quarry_waterpit.png"]
 [1220, 10, 64, 33, -31, -2, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_43) {
 [1290, 10, 64, 34, -31, -3, "sprites/graphics/industries/quarry_waterpit.png"]
 [1290, 10, 64, 34, -31, -3, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_44) {
 [1360, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [1360, 10, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_45) {
 [800, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [800, 50, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_46) {
 [870, 50, 64, 51, -31, -20, "sprites/graphics/industries/quarry_waterpit.png"]
 [870, 50, 64, 51, -31, -20, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_47) {
 [1010, 50, 64, 64, -31, -35, "sprites/graphics/industries/quarry_waterpit.png"]
 [1010, 50, 64, 64, -31, -35, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_48) {
 [1080, 50, 64, 49, -31, -18, "sprites/graphics/industries/quarry_waterpit.png"]
 [1080, 50, 64, 49, -31, -18, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_49) {
 [1150, 50, 64, 57, -31, -26, "sprites/graphics/industries/quarry_waterpit.png"]
 [1150, 50, 64, 57, -31, -26, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_50) {
 [730, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [730, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_51) {
 [800, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [800, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_52) {
 [940, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [940, 140, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_53) {
 [730, 80, 64, 51, -31, -20, "sprites/graphics/industries/quarry_waterpit.png"]
 [730, 80, 64, 51, -31, -20, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_54) {
 [800, 100, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
 [800, 100, 64, 31, -31, 0, "sprites/graphics/industries/quarry_waterpit.png"]
}

spriteset(quarryspriteset_55) {
 [940, 90, 64, 47, -31, -16, "sprites/graphics/industries/quarry_waterpit.png"]
 [940, 90, 64, 47, -31, -16, "sprites/graphics/industries/quarry_waterpit.png"]
}

spritelayout quarryspritelayout_1 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_1(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: quarryspriteset_25(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout quarryspritelayout_2 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_2(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: quarryspriteset_26(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout quarryspritelayout_3 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_3(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: quarryspriteset_27(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 12;
 }
}

spritelayout quarryspritelayout_4 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_4(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: quarryspriteset_28(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  xextent: 11;
  zextent: 42;
 }
}

spritelayout quarryspritelayout_5 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_5(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_6 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_6(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_7 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_7(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 32;
 }
 building {
  sprite: quarryspriteset_29(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_8 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_8(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  xextent: 8;
  yextent: 8;
  zextent: 12;
 }
 building {
  sprite: quarryspriteset_30(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_9 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_9(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_10 {
 ground {
  sprite: quarryspriteset_10(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_31;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_11 {
 ground {
  sprite: quarryspriteset_11(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_32(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_12 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_12(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_13 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_13(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_14 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_14(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_15 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_15(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_16 {
 ground {
  sprite: quarryspriteset_16(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_33(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_17 {
 ground {
  sprite: quarryspriteset_17(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_34(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_18 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_18(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_19 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_19(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_20 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_20(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_21 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_21(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_22 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_22(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_23 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_23(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_24 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_24(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 6;
 }
}

spritelayout quarryspritelayout_35 {
 ground {
  sprite: quarryspriteset_35(terrain_type == TILETYPE_SNOW);
 }
}

spritelayout quarryspritelayout_36 {
 ground {
  sprite: quarryspriteset_36(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_45(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
}

spritelayout quarryspritelayout_37 {
 ground {
  sprite: quarryspriteset_37(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_46(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_38 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_38(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_39 {
 ground {
  sprite: quarryspriteset_39(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_47(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 48;
 }
}

spritelayout quarryspritelayout_40 {
 ground {
  sprite: quarryspriteset_40(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_48(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_41 {
 ground {
  sprite: quarryspriteset_41(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_49(terrain_type == TILETYPE_SNOW);
  zextent: 48;
 }
}

spritelayout quarryspritelayout_42 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_42(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_43 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_43(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_44 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_44(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 4;
 }
}

spritelayout quarryspritelayout_50 {
 ground {
  sprite: quarryspriteset_50(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_53(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

spritelayout quarryspritelayout_51 {
 ground {
  sprite: (terrain_type != TILETYPE_SNOW) ? GROUNDSPRITE_NORMAL : GROUNDSPRITE_SNOW;
 }
 building {
  sprite: quarryspriteset_51(terrain_type == TILETYPE_SNOW);
  always_draw: 1;
  zextent: 8;
 }
 building {
  sprite: quarryspriteset_54(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 8;
 }
}

spritelayout quarryspritelayout_52 {
 ground {
  sprite: quarryspriteset_52(terrain_type == TILETYPE_SNOW);
 }
 building {
  sprite: quarryspriteset_55(terrain_type == TILETYPE_SNOW);
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  zextent: 32;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, quarrylayout_1, relative_pos) {
 relative_coord(5, 3): quarryspritelayout_1;
 relative_coord(4, 3): quarryspritelayout_2;
 relative_coord(3, 3): quarryspritelayout_3;
 relative_coord(2, 3): quarryspritelayout_4;
 relative_coord(1, 3): quarryspritelayout_5;
 relative_coord(0, 3): quarryspritelayout_6;
 relative_coord(5, 2): quarryspritelayout_7;
 relative_coord(4, 2): quarryspritelayout_8;
 relative_coord(3, 2): quarryspritelayout_9;
 relative_coord(2, 2): quarryspritelayout_10;
 relative_coord(1, 2): quarryspritelayout_11;
 relative_coord(0, 2): quarryspritelayout_12;
 relative_coord(5, 1): quarryspritelayout_13;
 relative_coord(4, 1): quarryspritelayout_14;
 relative_coord(3, 1): quarryspritelayout_15;
 relative_coord(2, 1): quarryspritelayout_16;
 relative_coord(1, 1): quarryspritelayout_17;
 relative_coord(0, 1): quarryspritelayout_18;
 relative_coord(5, 0): quarryspritelayout_19;
 relative_coord(4, 0): quarryspritelayout_20;
 relative_coord(3, 0): quarryspritelayout_21;
 relative_coord(2, 0): quarryspritelayout_22;
 relative_coord(1, 0): quarryspritelayout_23;
 relative_coord(0, 0): quarryspritelayout_24;
 relative_coord(8, 2): quarryspritelayout_35;
 relative_coord(7, 2): quarryspritelayout_36;
 relative_coord(6, 2): quarryspritelayout_37;
 relative_coord(6, 3): quarryspritelayout_38;
 relative_coord(8, 1): quarryspritelayout_39;
 relative_coord(7, 1): quarryspritelayout_40;
 relative_coord(6, 1): quarryspritelayout_41;
 relative_coord(7, 0): quarryspritelayout_42;
 relative_coord(8, 0): quarryspritelayout_43;
 quarryspritelayout_44;
}

switch(FEAT_INDUSTRYTILES, SELF, quarrylayout_2, relative_pos) {
 relative_coord(5, 4): quarryspritelayout_1;
 relative_coord(4, 4): quarryspritelayout_2;
 relative_coord(3, 4): quarryspritelayout_3;
 relative_coord(2, 4): quarryspritelayout_4;
 relative_coord(1, 4): quarryspritelayout_5;
 relative_coord(0, 4): quarryspritelayout_6;
 relative_coord(5, 3): quarryspritelayout_7;
 relative_coord(4, 3): quarryspritelayout_8;
 relative_coord(3, 3): quarryspritelayout_9;
 relative_coord(2, 3): quarryspritelayout_10;
 relative_coord(1, 3): quarryspritelayout_11;
 relative_coord(0, 3): quarryspritelayout_12;
 relative_coord(5, 2): quarryspritelayout_13;
 relative_coord(4, 2): quarryspritelayout_14;
 relative_coord(3, 2): quarryspritelayout_15;
 relative_coord(2, 2): quarryspritelayout_16;
 relative_coord(1, 2): quarryspritelayout_17;
 relative_coord(0, 2): quarryspritelayout_18;
 relative_coord(5, 1): quarryspritelayout_19;
 relative_coord(4, 1): quarryspritelayout_20;
 relative_coord(3, 1): quarryspritelayout_21;
 relative_coord(2, 1): quarryspritelayout_22;
 relative_coord(1, 1): quarryspritelayout_23;
 relative_coord(0, 1): quarryspritelayout_24;
 relative_coord(6, 0): quarryspritelayout_39;
 relative_coord(6, 1): quarryspritelayout_52;
 relative_coord(6, 2): quarryspritelayout_41;
 relative_coord(6, 3): quarryspritelayout_50;
 quarryspritelayout_51;
}

switch(FEAT_INDUSTRYTILES, PARENT, quarrylayout, layout_num) {
 1: quarrylayout_1;
 2: quarrylayout_2;
 quarryspritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* tile_check is disabled; if it's enabled OpenTTD won't terraform for this industry, which makes it unlikely to be built on steep maps.
// This means that this industry will locate adjacent to others, blocking routes.  It's the lesser of two evils.
TILE_DISALLOW_NEARBY_CLASS(tile1_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile1_player_check,                                                            THIS_ID(tile1_nearby_industry))
TILE_DISALLOW_TERRAIN     (tile1_terrain_check, TILETYPE_DESERT,       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_player_check))
TILE_DISALLOW_SLOPES      (tile1_location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_terrain_check))
*/
item(FEAT_INDUSTRYTILES, quarrytile, 177) {
 property {
  substitute: 0;
  accepted_cargos: [[ENSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  foundations: return CB_RESULT_NO_FOUNDATIONS;
  autoslope: return CB_RESULT_NO_AUTOSLOPE;
  /*tile_check:   THIS_ID(tile1_location_check); // disabled to permit terraforming, see note above*/
  quarrylayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_quarry_1 {
 0, 0: quarrytile;
 1, 0: quarrytile;
 2, 0: quarrytile;
 3, 0: quarrytile;
 4, 0: quarrytile;
 5, 0: quarrytile;
 6, 0: quarrytile;
 7, 0: quarrytile;
 8, 0: quarrytile;
 0, 1: quarrytile;
 1, 1: quarrytile;
 2, 1: quarrytile;
 3, 1: quarrytile;
 4, 1: quarrytile;
 5, 1: quarrytile;
 6, 1: quarrytile;
 7, 1: quarrytile;
 8, 1: quarrytile;
 0, 2: quarrytile;
 1, 2: quarrytile;
 2, 2: quarrytile;
 3, 2: quarrytile;
 4, 2: quarrytile;
 5, 2: quarrytile;
 6, 2: quarrytile;
 7, 2: quarrytile;
 8, 2: quarrytile;
 0, 3: quarrytile;
 1, 3: quarrytile;
 2, 3: quarrytile;
 3, 3: quarrytile;
 4, 3: quarrytile;
 5, 3: quarrytile;
 6, 3: quarrytile;
}

tilelayout tilelayout_quarry_2 {
 6, 0: quarrytile;
 0, 1: quarrytile;
 1, 1: quarrytile;
 2, 1: quarrytile;
 3, 1: quarrytile;
 4, 1: quarrytile;
 5, 1: quarrytile;
 6, 1: quarrytile;
 0, 2: quarrytile;
 1, 2: quarrytile;
 2, 2: quarrytile;
 3, 2: quarrytile;
 4, 2: quarrytile;
 5, 2: quarrytile;
 6, 2: quarrytile;
 0, 3: quarrytile;
 1, 3: quarrytile;
 2, 3: quarrytile;
 3, 3: quarrytile;
 4, 3: quarrytile;
 5, 3: quarrytile;
 6, 3: quarrytile;
 0, 4: quarrytile;
 1, 4: quarrytile;
 2, 4: quarrytile;
 3, 4: quarrytile;
 4, 4: quarrytile;
 5, 4: quarrytile;
 6, 4: quarrytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, quarrylime_kiln, industry_distance(lime_kiln)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, quarryglass_works, industry_distance(glass_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; quarrylime_kiln; }
switch (FEAT_INDUSTRIES, SELF, quarrycement_plant, industry_distance(cement_plant)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; quarryglass_works; }
switch (FEAT_INDUSTRIES, SELF, quarrybrick_works, industry_distance(brick_works)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; quarrycement_plant; }
switch (FEAT_INDUSTRIES, SELF, quarrycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; quarrybrick_works; }

switch(FEAT_INDUSTRIES, SELF, quarrycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(quarryproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, quarryproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 quarryproduction;
}
# 936 "sprites/nml/industries/quarry.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, quarrycheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, quarryrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, quarryrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, quarrydecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: quarryrandom_slow_decrease;
 quarryrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, quarrycheck_decrease_production, allow_primary_production_decrease) {
 1..255: quarrydecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, quarryrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, quarrycheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: quarryrandom_increase;
 quarrycheck_decrease_production;
}
# 937 "sprites/nml/industries/quarry.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, quarryextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_ENGINEERING_SUPPLIES);
}
# 939 "sprites/nml/industries/quarry.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, quarrycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, quarryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: quarrycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, quarrycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): quarryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 941 "sprites/nml/industries/quarry.pnml" 2

item(FEAT_INDUSTRIES, quarry, 0x0A) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_quarry_1,
    tilelayout_quarry_2
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_QUARRY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_QUARRY));
  prod_cargo_types: [SAND, GRVL];
  accept_cargo_types: [ENSP];
  prod_multiplier: [14, 14];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 210;
  map_colour: 195;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: quarryproduce;
  construction_probability:quarrycheck_availability;
  monthly_prod_change: quarrycheck_production_level;
  random_prod_change: quarrycheck_closure;
  build_prod_change: 4;
  extra_text_industry: quarryextra_text;
  colour: quarrycolour;
 }
}
# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 983 "sprites/nml/industries/quarry.pnml" 2
# 78 "<stdin>" 2

# 1 "sprites/nml/industries/recycling_plant.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */



spriteset(recycling_plantspriteset_ground, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) }

spriteset(recycling_plantspriteset_1, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(10, 10, 76, -45) }
spriteset(recycling_plantspriteset_2, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(80, 10, 76, -45) }
spriteset(recycling_plantspriteset_3, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(150, 10, 63, -32) }
spriteset(recycling_plantspriteset_4, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(220, 10, 63, -32) }
spriteset(recycling_plantspriteset_5, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(290, 10, 63, -32) }
spriteset(recycling_plantspriteset_6, "sprites/graphics/industries/recyclingplant.png") { tmpl_building_sprite(360, 10, 63, -32) }

//large building LH section
spritelayout recycling_plantspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
//large building RH section
spritelayout recycling_plantspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
//conveyor + crusher
spritelayout recycling_plantspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
//fenced area
spritelayout recycling_plantspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
//small office
spritelayout recycling_plantspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }
//material handler
spritelayout recycling_plantspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: recycling_plantspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_plantspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout recycling_plantspritelayout_0 {
 ground {
  sprite: recycling_plantspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: 0;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, recycling_plantlayout, relative_pos) {
 relative_coord(0, 0): recycling_plantspritelayout_2;
 relative_coord(0, 1): recycling_plantspritelayout_3;
 relative_coord(1, 0): recycling_plantspritelayout_1;
 relative_coord(1, 1): recycling_plantspritelayout_4;
 relative_coord(2, 0): recycling_plantspritelayout_5;
 relative_coord(2, 1): recycling_plantspritelayout_6;
 recycling_plantspritelayout_0;
}

switch (FEAT_INDUSTRYTILES, SELF, recycling_planttile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { recycling_plantlayout; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_planttile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { recycling_planttile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_planttile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { recycling_planttile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, recycling_planttile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, recycling_planttile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; recycling_planttile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_planttile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: recycling_planttile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, recycling_planttile, 201) {
 property {
  substitute: 0;
  accepted_cargos: [[RCYC, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: recycling_planttile_location_check;
  recycling_planttile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_recycling_plant_1 {
 0, 0: recycling_planttile;
 0, 1: recycling_planttile;
 1, 0: recycling_planttile;
 1, 1: recycling_planttile;
 2, 0: recycling_planttile;
 2, 1: recycling_planttile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 102 "sprites/nml/industries/recycling_plant.pnml"
/* extra text template */




switch (FEAT_INDUSTRIES, SELF, recycling_plantrecycling_plant, industry_distance(recycling_plant)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, recycling_plantrecycling_depot, industry_distance(recycling_depot)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; recycling_plantrecycling_plant; }
switch (FEAT_INDUSTRIES, SELF, recycling_plantcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; recycling_plantrecycling_depot; }

switch(FEAT_INDUSTRIES, SELF, recycling_plantcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (recycling_plantsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, recycling_plantproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 recycling_plantsimple_produce;
}
# 114 "sprites/nml/industries/recycling_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, recycling_plantincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, recycling_plantreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, recycling_plantcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: recycling_plantincrease_closure_counter;
 recycling_plantreset_closure_counter;
}
# 115 "sprites/nml/industries/recycling_plant.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, recycling_plantclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, recycling_planthad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 recycling_plantclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, recycling_plantcheck_closure, allow_close_secondary) {
 1..255: recycling_planthad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 116 "sprites/nml/industries/recycling_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, recycling_plantextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, recycling_plantextra_text, [



   show_debug_texts
   ]) {
 1: recycling_plantextra_text_debug;
 return string(STR_EXTRA_RECYCLING_PLANT);
}
# 118 "sprites/nml/industries/recycling_plant.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, recycling_plantcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, recycling_plantavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: recycling_plantcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, recycling_plantcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): recycling_plantavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 120 "sprites/nml/industries/recycling_plant.pnml" 2

/* Decide randomly on cargo output:
 * First cargo is always MNSP, 2nd is randomly a choice of 4,
 * 3rd cargo is not allowed nor defined */
random_switch (FEAT_INDUSTRIES, SELF, recycling_plantrandom_output_cargo) {
 1: return SCMT; // scrap metal
 1: return RFPR; // chemicals
 1: return BDMT; // building materials
 1: return FMSP; // farm supplies
}
switch(FEAT_INDUSTRIES, SELF, recycling_plantcargo_output, (extra_callback_info1 & 255)) {
 0: return MNSP; // first output cargo
 1: recycling_plantrandom_output_cargo; // 2nd output cargo: randomly
 return 0xFF; // terminate callback
}

item(FEAT_INDUSTRIES, recycling_plant, 0x17) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_recycling_plant_1
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_FARM;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_RECYCLING_PLANT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_RECYCLING_PLANT));
  prod_cargo_types: [SCMT, MNSP];
  accept_cargo_types: [RCYC];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 7;
  prob_in_game: 7;
  prospect_chance: 0.75;
  fund_cost_multiplier: 118;
  map_colour: 164;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: recycling_plantproduce;
  cargo_output: recycling_plantcargo_output;
  construction_probability:recycling_plantcheck_availability;
  monthly_prod_change: recycling_plantcheck_production_level;
  random_prod_change: recycling_plantcheck_closure;
  extra_text_industry: recycling_plantextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_RECYCLING_PLANT));
  colour: recycling_plantcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 177 "sprites/nml/industries/recycling_plant.pnml" 2
# 80 "<stdin>" 2
# 1 "sprites/nml/industries/recycling_depot.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/recycling_depot.pnml" 2



spriteset(recycling_depotspriteset_1, "sprites/graphics/industries/recyclingdepot.png") { tmpl_ground_tile(10, 10) }
spriteset(recycling_depotspriteset_2, "sprites/graphics/industries/recyclingdepot.png") { tmpl_ground_tile(80, 10) }

spritelayout recycling_depotspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_depotspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

spritelayout recycling_depotspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_CONCRETE; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: 1302 + LOAD_TEMP(1); hide_sprite: (LOAD_TEMP(9) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(5) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1301 + LOAD_TEMP(2); hide_sprite: (LOAD_TEMP(10) == 0); xoffset: 0; yoffset: 0; zoffset: LOAD_TEMP(6) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: recycling_depotspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 16; } building { sprite: 1301 + LOAD_TEMP(3); hide_sprite: (LOAD_TEMP(11) == 0); xoffset: 0; yoffset: 16; zoffset: LOAD_TEMP(7) * 8; xextent: 16; yextent: 1; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } building { sprite: 1302 + LOAD_TEMP(4); hide_sprite: (LOAD_TEMP(12) == 0); xoffset: 16; yoffset: 0; zoffset: LOAD_TEMP(8) * 8; xextent: 1; yextent: 16; zextent: 6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } }

switch(FEAT_INDUSTRYTILES, SELF, recycling_depotlayout, relative_pos) {
 0: recycling_depotspritelayout_1;
 recycling_depotspritelayout_2;
}

switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_fence_station, [ STORE_TEMP( LOAD_TEMP(9) * (nearby_tile_class(-1, 0) != TILE_CLASS_STATION), 9), STORE_TEMP( LOAD_TEMP(10) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), 10), STORE_TEMP( LOAD_TEMP(11) * (nearby_tile_class( 0, 1) != TILE_CLASS_STATION), 11), STORE_TEMP( LOAD_TEMP(12) * (nearby_tile_class( 1, 0) != TILE_CLASS_STATION), 12), ]) { recycling_depotlayout; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_fence_industry, [ STORE_TEMP( LOAD_TEMP(9) * !nearby_tile_is_same_industry(-1, 0), 9), STORE_TEMP( LOAD_TEMP(10) * !nearby_tile_is_same_industry( 0, -1), 10), STORE_TEMP( LOAD_TEMP(11) * !nearby_tile_is_same_industry( 0, 1), 11), STORE_TEMP( LOAD_TEMP(12) * !nearby_tile_is_same_industry( 1, 0), 12), ]) { recycling_depottile_fence_station; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_fences, [ STORE_TEMP( 0, 1), STORE_TEMP( 0, 2), STORE_TEMP( 0, 3), STORE_TEMP( 0, 4), STORE_TEMP( 1, 9), STORE_TEMP( 1, 10), STORE_TEMP( 1, 11), STORE_TEMP( 1, 12), STORE_TEMP( 0, 5), STORE_TEMP( 0, 6), STORE_TEMP( 0, 7), STORE_TEMP( 0, 8), ]) { recycling_depottile_fence_industry; }

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_15, nearby_tile_class(-4, -4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_14, nearby_tile_class(-4, 4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_15; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_13, nearby_tile_class(4, -4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_14; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_12, nearby_tile_class(4, 4)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_13; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_11, nearby_tile_class(-3, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_12; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_10, nearby_tile_class(-3, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_11; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_9, nearby_tile_class(3, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_10; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_8, nearby_tile_class(3, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_9; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_7, nearby_tile_class(-2, 2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_8; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_6, nearby_tile_class(2, -2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_7; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_5, nearby_tile_class(2, 2)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_6; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_4, nearby_tile_class(-3, 0)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_5; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_3, nearby_tile_class(0, -3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_4; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_2, nearby_tile_class(3, 0)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_3; }
switch (FEAT_INDUSTRYTILES, SELF, recycling_depottile_houses_1, nearby_tile_class(0, 3)) { TILE_CLASS_HOUSE: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_houses_2; }
switch(FEAT_INDUSTRYTILES, SELF, recycling_depottile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; recycling_depottile_houses_1; }
switch (FEAT_INDUSTRYTILES, PARENT, recycling_depottile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; recycling_depottile_nearby_industry; }

item(FEAT_INDUSTRYTILES, recycling_depottile, 202) {
 property {
  substitute: 0;
  accepted_cargos: [];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }
 graphics {
  tile_check: recycling_depottile_location_check;
  recycling_depottile_fences;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_recycling_depot_1 {
 0, 0: recycling_depottile;
 0, 1: recycling_depottile;
 1, 0: recycling_depottile;
 1, 1: recycling_depottile;
}


/* *************************************************
 * Definition of the industry
 * *************************************************/


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, recycling_depotrecycling_plant, industry_distance(recycling_plant)) { 0 .. 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, recycling_depotrecycling_depot, industry_distance(recycling_depot)) { 0 .. 20: return CB_RESULT_LOCATION_DISALLOW; recycling_depotrecycling_plant; }
switch (FEAT_INDUSTRIES, SELF, recycling_depotcheck_location, industry_town_count(recycling_depot)) { 0 .. 0: recycling_depotrecycling_depot; return string(STR_ERR_LOCATION_LIMIT_1_PER_TOWN); }
/* Don't use founder check for this industry, there is a hard limit of 1 per town irrespective of funding type */

switch(FEAT_INDUSTRIES, SELF, recycling_depotcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

/* Production template not used. We have our separate one, see below */
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, recycling_depotcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, recycling_depotrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, recycling_depotrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, recycling_depotdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: recycling_depotrandom_slow_decrease;
 recycling_depotrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, recycling_depotcheck_decrease_production, allow_primary_production_decrease) {
 1..255: recycling_depotdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, recycling_depotrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, recycling_depotcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: recycling_depotrandom_increase;
 recycling_depotcheck_decrease_production;
}
# 91 "sprites/nml/industries/recycling_depot.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, recycling_depotcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, recycling_depotavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: recycling_depotcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, recycling_depotcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): recycling_depotavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 93 "sprites/nml/industries/recycling_depot.pnml" 2


/* We have a special production code here:
 * Production depends on the town population: population / 12 is output
 */
produce(recycling_depotproduction,
  waiting_cargo_1, // should be 0
  waiting_cargo_2, // should be 0
  waiting_cargo_3, // should be 0
  LOAD_TEMP(1), // we stored output here
  0, // no 2nd output
  0 // don't repeat
  );
/* Parent scope is towns. var 0x82 is the population
 * TODO: use nicer variable names when towns are implemented
 * in NML */
switch(FEAT_INDUSTRIES, PARENT, recycling_depotproduce, [STORE_TEMP(((var[0x82, 3, 8191] + 11) / 12), 1)]) {
 0: recycling_depotproduction;
 recycling_depotproduction;
}

item(FEAT_INDUSTRIES, recycling_depot, 0x18) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_recycling_depot_1
   ];
  life_type: IND_LIFE_TYPE_EXTRACTIVE;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_RECYCLING_DEPOT);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_RECYCLING_DEPOT));
  prod_cargo_types: [RCYC];
  accept_cargo_types: [];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 2;
  conflicting_ind_types: [];
  prob_random: 20;
  prob_in_game: 20;
  prospect_chance: 0.75;
  fund_cost_multiplier: 118;
  map_colour: 191;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_256_ticks: recycling_depotproduce;
  construction_probability:recycling_depotcheck_availability;
  monthly_prod_change: recycling_depotcheck_production_level;
  random_prod_change: recycling_depotcheck_closure;
  extra_text_industry: return string(STR_EXTRA_RECYCLING_DEPOT);
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_RECYCLING_DEPOT));
  colour: recycling_depotcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 154 "sprites/nml/industries/recycling_depot.pnml" 2
# 81 "<stdin>" 2
# 1 "sprites/nml/industries/sheep_farm.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/sheep_farm.pnml" 2



spriteset(sheep_farmspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 52, -21, "sprites/graphics/industries/sheepfarm.png")
 tmpl_building_sprite_filename(10, 10, 52, -21, "sprites/graphics/industries/sheepfarm_snow.png")
}

spriteset(sheep_farmspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 52, -19, "sprites/graphics/industries/sheepfarm.png")
 tmpl_building_sprite_filename(80, 10, 52, -19, "sprites/graphics/industries/sheepfarm_snow.png")
}

spriteset(sheep_farmspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 52, -21, "sprites/graphics/industries/sheepfarm.png")
 tmpl_building_sprite_filename(150, 10, 52, -21, "sprites/graphics/industries/sheepfarm_snow.png")
}

spriteset(sheep_farmspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 52, -21, "sprites/graphics/industries/sheepfarm.png")
 tmpl_building_sprite_filename(220, 10, 52, -21, "sprites/graphics/industries/sheepfarm_snow.png")
}

spriteset(sheep_farmspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 52, -21, "sprites/graphics/industries/sheepfarm.png")
 tmpl_building_sprite_filename(290, 10, 52, -21, "sprites/graphics/industries/sheepfarm_snow.png")
}

spritelayout sheep_farmspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: sheep_farmspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } }

spritelayout sheep_farmspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: sheep_farmspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } }

spritelayout sheep_farmspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: sheep_farmspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 24; } }

spritelayout sheep_farmspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: sheep_farmspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } }

spritelayout sheep_farmspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: sheep_farmspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } }

switch(FEAT_INDUSTRYTILES, SELF, sheep_farmlayout_1, relative_pos) {
 relative_coord(0, 0): sheep_farmspritelayout_3;
 relative_coord(1, 0): sheep_farmspritelayout_2;
 relative_coord(1, 2): sheep_farmspritelayout_4;
 relative_coord(3, 0): sheep_farmspritelayout_1;
 sheep_farmspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, SELF, sheep_farmlayout_2, relative_pos) {
 relative_coord(0, 0): sheep_farmspritelayout_2;
 relative_coord(0, 1): sheep_farmspritelayout_1;
 relative_coord(0, 2): sheep_farmspritelayout_4;
 relative_coord(2, 0): sheep_farmspritelayout_3;
 sheep_farmspritelayout_5;
}

switch(FEAT_INDUSTRYTILES, PARENT, sheep_farmlayout, layout_num) {
 2: sheep_farmlayout_2;
 sheep_farmlayout_1;
}

switch(FEAT_INDUSTRYTILES, SELF, sheep_farmtile1_layout, STORE_TEMP((var[0x7E, 0, 255, 161] + var[0x7E, 0, 255, 65]), 16)) {
 sheep_farmlayout;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, sheep_farmtile1_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, sheep_farmtile1_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sheep_farmtile1_nearby_industry; }
switch(FEAT_INDUSTRYTILES, SELF, sheep_farmtile1_location_check, nearby_tile_is_water(0, 0)) { 1: return CB_RESULT_LOCATION_DISALLOW; sheep_farmtile1_player_check; }

item(FEAT_INDUSTRYTILES, sheep_farmtile, 192) {
 property {
  substitute: 0;
  accepted_cargos: [[FMSP, 8]];
  land_shape_flags: 0;
 }

 graphics {
  tile_check: sheep_farmtile1_location_check;
  sheep_farmtile1_layout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_sheep_farm_1 {
 0, 0: sheep_farmtile;
 1, 0: sheep_farmtile;
 3, 0: sheep_farmtile;
 3, 1: sheep_farmtile;
 1, 2: sheep_farmtile;
}

tilelayout tilelayout_sheep_farm_2 {
 0, 0: sheep_farmtile;
 0, 1: sheep_farmtile;
 0, 2: sheep_farmtile;
 2, 0: sheep_farmtile;
 2, 2: sheep_farmtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/



switch (FEAT_INDUSTRIES, SELF, sheep_farmsheep_farm, industry_count(sheep_farm) * 1 / 2 / industry_clusters != 0 && ( industry_distance(sheep_farm) < 10 || industry_distance(sheep_farm) > 36) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, sheep_farmstockyard, industry_distance(stockyard)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; sheep_farmsheep_farm; }
switch (FEAT_INDUSTRIES, SELF, sheep_farmtextile_mill, industry_distance(textile_mill)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; sheep_farmstockyard; }
switch (FEAT_INDUSTRIES, SELF, sheep_farmcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sheep_farmtextile_mill; }

switch(FEAT_INDUSTRIES, SELF, sheep_farmcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Primary production which is boosted by supplies */

produce(sheep_farmproduction, 9999, 9999, 0, 0, 0, 0);

switch(FEAT_INDUSTRIES, SELF, sheep_farmproduce, STORE_PERM(waiting_cargo_1 + LOAD_PERM(0), 0)) {
 sheep_farmproduction;
}
# 127 "sprites/nml/industries/sheep_farm.pnml" 2
# 1 "sprites/nml/industries/../templates/check_primary_production_level.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template is for use with primary industries which support supply usage
 * - Production will increase in 1/4 when supplies are delivered
 * - Production will decrease in 1/32 when no supplies are delivered and prod. level <= 32
 * - Production will decrease in 1/4 when no supplies are delivered and prod. level > 32
 *
 * Used permanent storage: var_num_supplies_delivered
 *
 * Usage in the industry's pnml:
 * random callback:  THIS_ID(check_closure)
 * monthly callback: THIS_ID(check_production_level)
 *
 */

/* Needed temporary variable */


/* =================================== */
/* Closure check for random callback   */
/* =================================== */
switch(FEAT_INDUSTRIES, SELF, sheep_farmcheck_closure, (production_level <= 4) * (allow_close_primary > 0)) {
 1: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* =================================== */
/* Production change evaluated monthly */
/* =================================== */

/* Decrease production in one of 32 cases */
switch(FEAT_INDUSTRIES, SELF, sheep_farmrandom_slow_decrease, (extra_callback_info2 & 31)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* decrease production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, sheep_farmrandom_decrease, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_DECREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, sheep_farmdecrease_production, production_level) {
 0..4: return CB_RESULT_IND_PROD_NO_CHANGE; // if we're here, we close in the random production change CB
 5..32: sheep_farmrandom_slow_decrease;
 sheep_farmrandom_decrease;
}

/* Don't even consider to decrease production, if turned off */
switch(FEAT_INDUSTRIES, SELF, sheep_farmcheck_decrease_production, allow_primary_production_decrease) {
 1..255: sheep_farmdecrease_production;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* increase production in one of four cases */
switch(FEAT_INDUSTRIES, SELF, sheep_farmrandom_increase, (extra_callback_info2 & 3)) {
 0: return CB_RESULT_IND_PROD_INCREMENT_BY_1;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, sheep_farmcheck_production_level, [
   STORE_TEMP(LOAD_PERM(0), 0),
   STORE_PERM(0, 0),
   LOAD_TEMP(0) > 0
   ]) {
 1: sheep_farmrandom_increase;
 sheep_farmcheck_decrease_production;
}
# 128 "sprites/nml/industries/sheep_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_primary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Template to handle display of extra text for primary industries
 *
 * No debug texts. Show extra text about influence of supplies
 *
 * Required defines in the industry's pnml file:
 * THIS_STR_EXTRA_SUPPLIES         string shown when supplies can increase production
 */

switch(FEAT_INDUSTRIES, SELF, sheep_farmextra_text, [STORE_TEMP(LOAD_PERM(0), 256), production_level]) {
 128: return string(STR_EXTRA_MAX_PRODUCTION);
 return string(STR_EXTRA_FARM_SUPPLIES);
}
# 130 "sprites/nml/industries/sheep_farm.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, sheep_farmcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, sheep_farmavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: sheep_farmcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, sheep_farmcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): sheep_farmavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 132 "sprites/nml/industries/sheep_farm.pnml" 2

item(FEAT_INDUSTRIES, sheep_farm, 0x1B) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_sheep_farm_1,
    tilelayout_sheep_farm_2
   ];
  life_type: IND_LIFE_TYPE_ORGANIC;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_FARM;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_SHEEPFARM);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_SHEEPFARM));
  prod_cargo_types: [LVST, WOOL];
  accept_cargo_types: [FMSP];
  prod_multiplier: [4, 4];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 1;
  conflicting_ind_types: [];
  prob_random: 6;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 45;
  map_colour: 14;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: sheep_farmproduce;
  construction_probability:sheep_farmcheck_availability;
  monthly_prod_change: sheep_farmcheck_production_level;
  random_prod_change: sheep_farmcheck_closure;
  build_prod_change: 8;
  extra_text_industry: sheep_farmextra_text;
  colour: sheep_farmcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 175 "sprites/nml/industries/sheep_farm.pnml" 2
# 82 "<stdin>" 2
# 1 "sprites/nml/industries/smithy_forge.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/smithy_forge.pnml" 2



spriteset(smithy_forgespriteset_1) {
 tmpl_building_sprite_filename(10, 10, 80, -49, "sprites/graphics/industries/forge.png")
 tmpl_building_sprite_filename(10, 10, 80, -49, "sprites/graphics/industries/forge_snow.png")
}

spriteset(smithy_forgespriteset_2) {
 tmpl_building_sprite_filename(80, 10, 80, -49, "sprites/graphics/industries/forge.png")
 tmpl_building_sprite_filename(80, 10, 80, -49, "sprites/graphics/industries/forge_snow.png")
}

spriteset(smithy_forgespriteset_3) {
 tmpl_building_sprite_filename(150, 10, 60, -29, "sprites/graphics/industries/forge.png")
 tmpl_building_sprite_filename(150, 10, 60, -29, "sprites/graphics/industries/forge_snow.png")
}

spritelayout smithy_forgespritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: smithy_forgespriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; }
 building {
  sprite: smithy_forgespriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  hide_sprite: terrain_type != TILETYPE_SNOW;
 }
}

spritelayout smithy_forgespritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: 2022; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: smithy_forgespriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; }
 building {
  sprite: smithy_forgespriteset_3;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
  hide_sprite: terrain_type != TILETYPE_SNOW;
 }
}


switch(FEAT_INDUSTRYTILES, SELF, smithy_forgelayout, relative_pos) {
 relative_coord(0, 0): smithy_forgespritelayout_2;
 smithy_forgespritelayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, smithy_forgetile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, smithy_forgetile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; smithy_forgetile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, smithy_forgetile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: smithy_forgetile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, smithy_forgetile, 209) {
 property {
  substitute: 0;
  accepted_cargos: [[STEL, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: smithy_forgetile_location_check;
  smithy_forgelayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_smithy_forge_1 {
 0, 0: smithy_forgetile;
 1, 0: smithy_forgetile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 96 "sprites/nml/industries/smithy_forge.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */



switch (FEAT_INDUSTRIES, SELF, smithy_forgesmithy_forge, industry_distance(smithy_forge)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, smithy_forgecheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; smithy_forgesmithy_forge; }

switch(FEAT_INDUSTRIES, SELF, smithy_forgecolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (smithy_forgesimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 2 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 2 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 2 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 2), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 2), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 2), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, smithy_forgeproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 5 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 smithy_forgesimple_produce;
}
# 109 "sprites/nml/industries/smithy_forge.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, smithy_forgeincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, smithy_forgereset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, smithy_forgecheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: smithy_forgeincrease_closure_counter;
 smithy_forgereset_closure_counter;
}
# 110 "sprites/nml/industries/smithy_forge.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, smithy_forgeclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, smithy_forgehad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 smithy_forgeclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, smithy_forgecheck_closure, allow_close_secondary) {
 1..255: smithy_forgehad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 111 "sprites/nml/industries/smithy_forge.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, smithy_forgeextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, smithy_forgeextra_text, [



   show_debug_texts
   ]) {
 1: smithy_forgeextra_text_debug;
 return string(STR_EXTRA_SMITHY_FORGE);
}
# 113 "sprites/nml/industries/smithy_forge.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, smithy_forgecheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, smithy_forgeavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: smithy_forgecheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, smithy_forgecheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): smithy_forgeavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 115 "sprites/nml/industries/smithy_forge.pnml" 2

item(FEAT_INDUSTRIES, smithy_forge, 0x06) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_smithy_forge_1
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_SMITHY_FORGE);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_SMITHY_FORGE));
  prod_cargo_types: [ENSP, FMSP];
  accept_cargo_types: [STEL];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 2;
  prospect_chance: 0.75;
  fund_cost_multiplier: 63;
  map_colour: 133;
  remove_cost_multiplier: 0;
 }
 graphics {
  produce_cargo_arrival: smithy_forgeproduce;
  construction_probability:smithy_forgecheck_availability;
  monthly_prod_change: smithy_forgecheck_production_level;
  random_prod_change: smithy_forgecheck_closure;
  extra_text_industry: smithy_forgeextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_UNTIL, string(STR_FUND_AVAILABLE_UNTIL_DATE_SMITHY_FORGE));
  colour: smithy_forgecolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 155 "sprites/nml/industries/smithy_forge.pnml" 2
# 83 "<stdin>" 2
# 1 "sprites/nml/industries/steelmill.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, steelmilltile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, steelmilltile_player_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; steelmilltile_nearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, steelmilltile_location_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: steelmilltile_player_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, steelmilltile_1, 52) {
 property {
  substitute: 52;
  override: 52;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, steelmilltile_2, 53) {
 property {
  substitute: 53;
  override: 53;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, steelmilltile_3, 54) {
 property {
  substitute: 54;
  override: 54;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, steelmilltile_4, 55) {
 property {
  substitute: 55;
  override: 55;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, steelmilltile_5, 56) {
 property {
  substitute: 56;
  override: 56;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, steelmilltile_6, 57) {
 property {
  substitute: 57;
  override: 57;
  accepted_cargos: [[IORE, 8], [SCMT, 8], [COAL, 8]];
 }
 graphics {
  tile_check: steelmilltile_location_check;
 }
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 99 "sprites/nml/industries/steelmill.pnml"
/* extra text template */

/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, steelmillsteelmill, industry_distance(steelmill)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, steelmillcoal_mine, industry_distance(coal_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; steelmillsteelmill; }
switch (FEAT_INDUSTRIES, SELF, steelmilliron_ore_mine, industry_distance(iron_ore_mine)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; steelmillcoal_mine; }
switch (FEAT_INDUSTRIES, SELF, steelmilljunkyard, industry_distance(junkyard)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; steelmilliron_ore_mine; }
switch (FEAT_INDUSTRIES, SELF, steelmillcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; steelmilljunkyard; }

switch(FEAT_INDUSTRIES, SELF, steelmillcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (steelmillsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, steelmillproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 2 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 4,
       1
   ),
   STORE_PERM( 2 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(2) * 4,
       2
   ),
   STORE_PERM( 4 +
               LOAD_TEMP(0) * 2 +
               LOAD_TEMP(1) * 2,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 steelmillsimple_produce;
}
# 113 "sprites/nml/industries/steelmill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, steelmillincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, steelmillreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, steelmillcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: steelmillincrease_closure_counter;
 steelmillreset_closure_counter;
}
# 114 "sprites/nml/industries/steelmill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, steelmillclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, steelmillhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 steelmillclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, steelmillcheck_closure, allow_close_secondary) {
 1..255: steelmillhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 115 "sprites/nml/industries/steelmill.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, steelmillextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, steelmillextra_text, [



   show_debug_texts
   ]) {
 1: steelmillextra_text_debug;
 return string(STR_EXTRA_STEELMILL);
}
# 117 "sprites/nml/industries/steelmill.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, steelmillcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, steelmillavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: steelmillcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, steelmillcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): steelmillavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 119 "sprites/nml/industries/steelmill.pnml" 2

item(FEAT_INDUSTRIES, steelmill, 0x07) {
 property {
  substitute: 8;
  override: 8;
  accept_cargo_types: [IORE, COAL, SCMT];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 2;
  fund_cost_multiplier: 200;
  map_colour: 9;
 }
 graphics {
  produce_cargo_arrival: steelmillproduce;
  construction_probability:steelmillcheck_availability;
  monthly_prod_change: steelmillcheck_production_level;
  random_prod_change: steelmillcheck_closure;
  extra_text_industry: steelmillextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_STEELMILL));
  colour: steelmillcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 145 "sprites/nml/industries/steelmill.pnml" 2
# 84 "<stdin>" 2
# 1 "sprites/nml/industries/stockyard.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/stockyard.pnml" 2



spriteset(stockyardspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(80, 10)
 tmpl_ground_tile(80, 10)
}

spriteset(stockyardspriteset_1) {
 tmpl_building_sprite_filename(10, 10, 44, -13, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(10, 10, 44, -13, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_2) {
 tmpl_building_sprite_filename(80, 10, 74, -43, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(80, 10, 74, -43, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_3) {
 tmpl_building_sprite_filename(150, 10, 88, -57, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(150, 10, 88, -57, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_4) {
 tmpl_building_sprite_filename(220, 10, 85, -54, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(220, 10, 85, -54, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_5) {
 tmpl_building_sprite_filename(290, 10, 104, -73, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(290, 10, 104, -73, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_6) {
 tmpl_building_sprite_filename(360, 10, 91, -60, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(360, 10, 91, -60, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_7) {
 tmpl_building_sprite_filename(430, 10, 98, -67, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(430, 10, 98, -67, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_8) {
 tmpl_building_sprite_filename(500, 10, 54, -23, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(500, 10, 54, -23, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_9) {
 tmpl_building_sprite_filename(570, 10, 76, -45, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(570, 10, 76, -45, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_10) {
 tmpl_building_sprite_filename(640, 10, 32, -1, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(640, 10, 32, -1, "sprites/graphics/industries/stockyard_snow.png")
}

spriteset(stockyardspriteset_11) {
 tmpl_building_sprite_filename(710, 10, 49, -18, "sprites/graphics/industries/stockyard.png")
 tmpl_building_sprite_filename(710, 10, 49, -18, "sprites/graphics/industries/stockyard_snow.png")
}

spritelayout stockyardspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout stockyardspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout stockyardspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout stockyardspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 32; } }

spritelayout stockyardspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 96; } }

spritelayout stockyardspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_6(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout stockyardspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_7(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout stockyardspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_8(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout stockyardspritelayout_9 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_9(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout stockyardspritelayout_10 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_10(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout stockyardspritelayout_11 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: stockyardspriteset_11(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 8; } }

spritelayout stockyardspritelayout_concrete { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: stockyardspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } }

switch(FEAT_INDUSTRYTILES, SELF, stockyardlayout_1, relative_pos) {
 relative_coord(0, 0): stockyardspritelayout_concrete;
 relative_coord(0, 1): stockyardspritelayout_concrete;
 relative_coord(0, 3): stockyardspritelayout_concrete;
 relative_coord(1, 0): stockyardspritelayout_concrete;
 relative_coord(1, 1): stockyardspritelayout_8;
 relative_coord(1, 2): stockyardspritelayout_9;
 relative_coord(1, 3): stockyardspritelayout_10;
 relative_coord(4, 0): stockyardspritelayout_1;
 relative_coord(4, 1): stockyardspritelayout_2;
 relative_coord(4, 2): stockyardspritelayout_3;
 relative_coord(4, 3): stockyardspritelayout_4;
 relative_coord(3, 0): stockyardspritelayout_concrete;
 relative_coord(3, 1): stockyardspritelayout_5;
 relative_coord(3, 2): stockyardspritelayout_6;
 relative_coord(3, 3): stockyardspritelayout_7;
 stockyardspritelayout_11;
}

switch(FEAT_INDUSTRYTILES, PARENT, stockyardlayout, layout_num) {
 stockyardlayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, stockyardnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, stockyardplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; stockyardnearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, stockyardlocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: stockyardplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, stockyardtile, 179) {
 property {
  substitute: 0;
  accepted_cargos: [[LVST, 8], [MNSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 graphics {
  tile_check: stockyardlocation_check;
  stockyardlayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_stockyard_1 {
 0, 1: stockyardtile;
 0, 2: stockyardtile;
 0, 3: stockyardtile;
 1, 1: stockyardtile;
 1, 2: stockyardtile;
 1, 3: stockyardtile;
 3, 0: stockyardtile;
 3, 1: stockyardtile;
 3, 2: stockyardtile;
 3, 3: stockyardtile;
 4, 0: stockyardtile;
 4, 1: stockyardtile;
 4, 2: stockyardtile;
 4, 3: stockyardtile;
 0, 0: stockyardtile;
 1, 0: stockyardtile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 178 "sprites/nml/industries/stockyard.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, stockyardstockyard, industry_distance(stockyard)) { 0 .. 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, stockyarddairy_farm, industry_distance(dairy_farm)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; stockyardstockyard; }
switch (FEAT_INDUSTRIES, SELF, stockyardsheep_farm, industry_distance(sheep_farm)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; stockyarddairy_farm; }
switch (FEAT_INDUSTRIES, SELF, stockyardmixed_farm, industry_distance(mixed_farm)) { 0 .. 0: return CB_RESULT_LOCATION_DISALLOW; stockyardsheep_farm; }
switch (FEAT_INDUSTRIES, SELF, stockyardcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; stockyardmixed_farm; }

switch(FEAT_INDUSTRIES, SELF, stockyardcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (stockyardsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, stockyardproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 5 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 stockyardsimple_produce;
}
# 193 "sprites/nml/industries/stockyard.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, stockyardincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, stockyardreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, stockyardcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: stockyardincrease_closure_counter;
 stockyardreset_closure_counter;
}
# 194 "sprites/nml/industries/stockyard.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, stockyardclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, stockyardhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 stockyardclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, stockyardcheck_closure, allow_close_secondary) {
 1..255: stockyardhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 195 "sprites/nml/industries/stockyard.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, stockyardextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, stockyardextra_text, [



   show_debug_texts
   ]) {
 1: stockyardextra_text_debug;
 return string(STR_EXTRA_MEAT_PACKER);
}
# 197 "sprites/nml/industries/stockyard.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, stockyardcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, stockyardavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: stockyardcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, stockyardcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): stockyardavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 199 "sprites/nml/industries/stockyard.pnml" 2

item(FEAT_INDUSTRIES, stockyard, 0x25) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_stockyard_1
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_STOCKYARD);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_STOCKYARD));
  prod_cargo_types: [FOOD];
  accept_cargo_types: [MNSP, LVST];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 145;
  map_colour: 176;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_HELICOPTER_CAN_EXPLODE);
 }
 graphics {
  produce_cargo_arrival: stockyardproduce;
  construction_probability:stockyardcheck_availability;
  monthly_prod_change: stockyardcheck_production_level;
  random_prod_change: stockyardcheck_closure;
  extra_text_industry: stockyardextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_STOCKYARD));
  colour: stockyardcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 240 "sprites/nml/industries/stockyard.pnml" 2
# 85 "<stdin>" 2

# 1 "sprites/nml/industries/sugar_refinery.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/sugar_refinery.pnml" 2



spriteset(sugar_refineryspriteset_ground, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) }
//large round tank
spriteset(sugar_refineryspriteset_1, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(10, 10, 50, -23) }
//cone silo
spriteset(sugar_refineryspriteset_2, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(80, 10, 50, -25) }
//large rectangular building
spriteset(sugar_refineryspriteset_3, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(150, 10, 88, -56) }
//4 large silos
spriteset(sugar_refineryspriteset_4, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(220, 10, 88, -58) }
//small brick gatehouse
spriteset(sugar_refineryspriteset_5, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(290, 10, 88, -58) }
//brick warehouse with 2 large chimneys
spriteset(sugar_refineryspriteset_6, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(360, 10, 88, -58) }
//brick storage yard
spriteset(sugar_refineryspriteset_7, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(430, 10, 88, -58) }
//lime processor stack
spriteset(sugar_refineryspriteset_8, "sprites/graphics/industries/sugarrefinery.png") { tmpl_building_sprite(500, 10, 88, -58) }

spritelayout sugar_refineryspritelayout_1 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_1; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_3; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_5; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_6 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_6; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_7 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_7; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_8 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: sugar_refineryspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; always_draw: 1; } building { sprite: sugar_refineryspriteset_8; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 48; } }

spritelayout sugar_refineryspritelayout_0 {
 ground {
  sprite: sugar_refineryspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, sugar_refinerylayout_1, relative_pos) {
 relative_coord(0, 0): sugar_refineryspritelayout_4;
 relative_coord(0, 1): sugar_refineryspritelayout_4;
 relative_coord(0, 2): sugar_refineryspritelayout_4;
 relative_coord(1, 0): sugar_refineryspritelayout_8;
 relative_coord(1, 1): sugar_refineryspritelayout_3;
 relative_coord(1, 2): sugar_refineryspritelayout_1;
 relative_coord(2, 0): sugar_refineryspritelayout_6;
 relative_coord(2, 1): sugar_refineryspritelayout_0;
 relative_coord(2, 2): sugar_refineryspritelayout_2;
 relative_coord(3, 0): sugar_refineryspritelayout_7;
 relative_coord(3, 1): sugar_refineryspritelayout_7;
 relative_coord(3, 2): sugar_refineryspritelayout_5;
 sugar_refineryspritelayout_0;
}

switch(FEAT_INDUSTRYTILES, PARENT, sugar_refinerylayout, layout_num) {
 1: sugar_refinerylayout_1;
 sugar_refineryspritelayout_5;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, sugar_refinerynearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, sugar_refineryplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sugar_refinerynearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, sugar_refinerylocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: sugar_refineryplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, sugar_refinerytile, 214) {
 property {
  substitute: 0;
  accepted_cargos: [[SGBT, 8], [MNSP, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
 }

 /* Economy specific tile acceptance */
 if ((climate == CLIMATE_TROPICAL) && 1) { property { accepted_cargos: [[SGCN, 8], [MNSP, 8]]; } }

 graphics {
  tile_check: sugar_refinerylocation_check;
  sugar_refinerylayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_sugar_refinery_1 {
 0, 0: sugar_refinerytile;
 0, 1: sugar_refinerytile;
 0, 2: sugar_refinerytile;
 1, 0: sugar_refinerytile;
 1, 1: sugar_refinerytile;
 1, 2: sugar_refinerytile;
 2, 0: sugar_refinerytile;
 2, 1: sugar_refinerytile;
 2, 2: sugar_refinerytile;
 3, 0: sugar_refinerytile;
 3, 1: sugar_refinerytile;
 3, 2: sugar_refinerytile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 133 "sprites/nml/industries/sugar_refinery.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, sugar_refinerysugar_refinery, industry_distance(sugar_refinery)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, sugar_refineryarable_farm, industry_distance(arable_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; sugar_refinerysugar_refinery; }
switch (FEAT_INDUSTRIES, SELF, sugar_refinerycheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sugar_refineryarable_farm; }

switch(FEAT_INDUSTRIES, SELF, sugar_refinerycolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (sugar_refinerysimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, sugar_refineryproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 5 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 sugar_refinerysimple_produce;
}
# 146 "sprites/nml/industries/sugar_refinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, sugar_refineryincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, sugar_refineryreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, sugar_refinerycheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: sugar_refineryincrease_closure_counter;
 sugar_refineryreset_closure_counter;
}
# 147 "sprites/nml/industries/sugar_refinery.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, sugar_refineryclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, sugar_refineryhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 sugar_refineryclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, sugar_refinerycheck_closure, allow_close_secondary) {
 1..255: sugar_refineryhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 148 "sprites/nml/industries/sugar_refinery.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, sugar_refineryextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, sugar_refineryextra_text, [



   show_debug_texts
   ]) {
 1: sugar_refineryextra_text_debug;
 return string(STR_EXTRA_SUGAR_REFINERY);
}
# 150 "sprites/nml/industries/sugar_refinery.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, sugar_refinerycheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, sugar_refineryavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: sugar_refinerycheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, sugar_refinerycheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): sugar_refineryavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 152 "sprites/nml/industries/sugar_refinery.pnml" 2


item(FEAT_INDUSTRIES, sugar_refinery, 0x13) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_sugar_refinery_1,
   ];
  life_type: 4;
  name: string(STR_IND_SUGAR_REFINERY);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_SUGAR_REFINERY));
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  prod_cargo_types: [FOOD];
  accept_cargo_types: [MNSP, SGBT];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 3;
  prospect_chance: 0.75;
  fund_cost_multiplier: 140;
  map_colour: 83;
  remove_cost_multiplier: 0;
  spec_flags: bitmask(IND_FLAG_MILITARY_AIRPLANE_CAN_EXPLODE);
 }

 /* Economy specific cargo */
 if ((climate == CLIMATE_TROPICAL) && 1) { property { accept_cargo_types: [MNSP, SGCN]; } }

 graphics {
  produce_cargo_arrival: sugar_refineryproduce;
  construction_probability:sugar_refinerycheck_availability;
  monthly_prod_change: sugar_refinerycheck_production_level;
  random_prod_change: sugar_refinerycheck_closure;
  extra_text_industry: sugar_refineryextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_SUGAR_REFINERY));
  colour: sugar_refinerycolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 198 "sprites/nml/industries/sugar_refinery.pnml" 2
# 87 "<stdin>" 2
# 1 "sprites/nml/industries/sawmill.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */



item(FEAT_INDUSTRYTILES, sawmilltile_1, 11) {
 property {
  substitute: 11;
  override: 11;
  accepted_cargos: [[WOOD, 8]];
  land_shape_flags: 0;
 }
}

item(FEAT_INDUSTRYTILES, sawmilltile_2, 12) {
 property {
  substitute: 12;
  override: 12;
  accepted_cargos: [[WOOD, 8]];
  land_shape_flags: 0;
 }
}

item(FEAT_INDUSTRYTILES, sawmilltile_3, 13) {
 property {
  substitute: 13;
  override: 13;
  accepted_cargos: [[WOOD, 8]];
  land_shape_flags: 0;
 }
}

item(FEAT_INDUSTRYTILES, sawmilltile_4, 14) {
 property {
  substitute: 14;
  override: 14;
  accepted_cargos: [[WOOD, 8]];
  land_shape_flags: 0;
 }
}

item(FEAT_INDUSTRYTILES, sawmilltile_5, 15) {
 property {
  substitute: 15;
  override: 15;
  accepted_cargos: [[WOOD, 8]];
  land_shape_flags: 0;
 }
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, sawmilltile_nearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, sawmilltile_location_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sawmilltile_nearby_industry; }

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_11, 11) {
 graphics {
  tile_check: sawmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_12, 12) {
 graphics {
  tile_check: sawmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_13, 13) {
 graphics {
  tile_check: sawmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_14, 14) {
 graphics {
  tile_check: sawmilltile_location_check;
 }
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_15, 15) {
 graphics {
  tile_check: sawmilltile_location_check;
 }
}
/* *************************************************
 * Definition of the industry layouts:
 *    not needed, default used
 * *************************************************/

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 112 "sprites/nml/industries/sawmill.pnml"
/* extra text template */




switch (FEAT_INDUSTRIES, SELF, sawmillforest, industry_count(forest) * 5 / 4 / industry_clusters != 0 && ( industry_distance(forest) < 16 || industry_distance(forest) > 60) ) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, sawmillcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; sawmillforest; }

switch(FEAT_INDUSTRIES, SELF, sawmillcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (sawmillsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, sawmillproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 6 +
               LOAD_TEMP(1) * 0 +
               LOAD_TEMP(2) * 0,
       1
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 0 +
               LOAD_TEMP(0) * 0 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 sawmillsimple_produce;
}
# 123 "sprites/nml/industries/sawmill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, sawmillincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, sawmillreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, sawmillcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: sawmillincrease_closure_counter;
 sawmillreset_closure_counter;
}
# 124 "sprites/nml/industries/sawmill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, sawmillclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, sawmillhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 sawmillclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, sawmillcheck_closure, allow_close_secondary) {
 1..255: sawmillhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 125 "sprites/nml/industries/sawmill.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, sawmillextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, sawmillextra_text, [



   show_debug_texts
   ]) {
 1: sawmillextra_text_debug;
 return string(STR_EXTRA_SAWMILL);
}
# 127 "sprites/nml/industries/sawmill.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, sawmillcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, sawmillavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: sawmillcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, sawmillcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): sawmillavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 129 "sprites/nml/industries/sawmill.pnml" 2

item(FEAT_INDUSTRIES, sawmill, 0x0C) {
 property {
  substitute: 2;
  override: 2;
  prod_cargo_types: [WDPR];
  accept_cargo_types: [WOOD];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  conflicting_ind_types: [];
  prob_random: 5;
  prob_in_game: 2;
  fund_cost_multiplier: 97;
  map_colour: 194;
 }
 graphics {
  produce_cargo_arrival: sawmillproduce;
  construction_probability:sawmillcheck_availability;
  monthly_prod_change: sawmillcheck_production_level;
  random_prod_change: sawmillcheck_closure;
  extra_text_industry: sawmillextra_text;
  colour: sawmillcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 156 "sprites/nml/industries/sawmill.pnml" 2
# 88 "<stdin>" 2
# 1 "sprites/nml/industries/textile_mill.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

# 1 "sprites/nml/industries/../templates/spritelayout_templates.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


/* NOTE: The use of these templates is deprecated. Use the templates defined in spritelayouts_groundaware.pnml instead. */

/* Template used to close SPRITELAYOUT_..._BEGIN blocks. */



/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 68 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 112 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 156 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 189 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 224 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/**********************************************************
 * All the same templates, but now with fences included
 **********************************************************/




/* Template used to close SPRITELAYOUT_FENCES_..._BEGIN blocks. */






/* Defines a spritelayout for an industry tile with normal, desert and snow sprites.
 * This template requires that the spriteset defines all three sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 294 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 340 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for an industry tile with normal and desert sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_desert Ground sprite(desert).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 386 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a spritelayout for a industry tile with only normal sprites.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * building_spriteset   Spriteset for the building sprites.
 * building_zextent     Size of the bounding box of the building sprite in the z direction. By default it is 16.
 */
# 422 "sprites/nml/industries/../templates/spritelayout_templates.pnml"
/* Defines a ground tile spritelayout for an industry tile with normal and snow sprites.
 * This template requires that the spriteset defines the sprites in the specified order.
 * 
 * spritelayout_name    Name for the spritelayout block.
 * ground_sprite_normal Ground sprite(normal).
 * ground_sprite_snow   Ground sprite(snow).
 */
# 9 "sprites/nml/industries/textile_mill.pnml" 2



spriteset(textile_millspriteset_ground, "sprites/graphics/industries/groundtiles.png") {
 tmpl_ground_tile(150, 10)
 tmpl_ground_tile(150, 10)
}

spriteset(textile_millspriteset_1) {
 tmpl_building_sprite_filename(10, 60, 103, -74, "sprites/graphics/industries/textilemill.png")
 tmpl_building_sprite_filename(10, 60, 103, -74, "sprites/graphics/industries/textilemill_snow.png")
}

spriteset(textile_millspriteset_2) {
 tmpl_building_sprite_filename(80, 60, 103, -72, "sprites/graphics/industries/textilemill.png")
 tmpl_building_sprite_filename(80, 60, 103, -72, "sprites/graphics/industries/textilemill_snow.png")
}

spriteset(textile_millspriteset_3) {
 tmpl_building_sprite_filename(150, 60, 103, -72, "sprites/graphics/industries/textilemill.png")
 tmpl_building_sprite_filename(150, 60, 103, -72, "sprites/graphics/industries/textilemill_snow.png")
}

spriteset(textile_millspriteset_4) {
 tmpl_building_sprite_filename(220, 60, 103, -72, "sprites/graphics/industries/textilemill.png")
 tmpl_building_sprite_filename(220, 60, 103, -72, "sprites/graphics/industries/textilemill_snow.png")
}

spriteset(textile_millspriteset_5) {
 tmpl_building_sprite_filename(290, 60, 103, -72, "sprites/graphics/industries/textilemill.png")
 tmpl_building_sprite_filename(290, 60, 103, -72, "sprites/graphics/industries/textilemill_snow.png")
}

spritelayout textile_millspritelayout_1_anim { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: textile_millspriteset_1(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 7; }
 building { sprite: 3701 + animation_frame; xoffset: 0; yoffset: 9; zoffset: 78; xextent: 15; yextent: 7; zextent: 7; }
}

spritelayout textile_millspritelayout_2 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: textile_millspriteset_2(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout textile_millspritelayout_3 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: textile_millspriteset_3(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout textile_millspritelayout_4 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: textile_millspriteset_4(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout textile_millspritelayout_5 { ground { sprite: LOAD_TEMP(0) != 0 ? LOAD_TEMP(0) : GROUNDSPRITE_NORMAL; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type == TILETYPE_SNOW; always_draw: 1; } childsprite { sprite: textile_millspriteset_ground; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; hide_sprite: terrain_type != TILETYPE_SNOW; always_draw: 1; } building { sprite: textile_millspriteset_5(terrain_type == TILETYPE_SNOW); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; zextent: 64; } }

spritelayout textile_millspritelayout_6 {
 ground {
  sprite: textile_millspriteset_ground;
  recolour_mode: RECOLOUR_REMAP;
  palette: PALETTE_USE_DEFAULT;
 }
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_1, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_3;
 relative_coord(0, 1): textile_millspritelayout_1_anim;
 relative_coord(1, 0): textile_millspritelayout_2;
 relative_coord(1, 1): textile_millspritelayout_5;
 relative_coord(2, 0): textile_millspritelayout_3;
 relative_coord(2, 1): textile_millspritelayout_3;
 relative_coord(3, 0): textile_millspritelayout_2;
 relative_coord(3, 1): textile_millspritelayout_2;
 relative_coord(4, 0): textile_millspritelayout_5;
 relative_coord(4, 1): textile_millspritelayout_4;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_2, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_3;
 relative_coord(0, 1): textile_millspritelayout_4;
 relative_coord(0, 2): textile_millspritelayout_1_anim;
 relative_coord(1, 0): textile_millspritelayout_2;
 relative_coord(1, 1): textile_millspritelayout_6;
 relative_coord(1, 2): textile_millspritelayout_5;
 relative_coord(2, 0): textile_millspritelayout_5;
 relative_coord(2, 1): textile_millspritelayout_6;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_3, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_3;
 relative_coord(0, 1): textile_millspritelayout_5;
 relative_coord(1, 0): textile_millspritelayout_2;
 relative_coord(1, 1): textile_millspritelayout_4;
 relative_coord(2, 0): textile_millspritelayout_1_anim;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_4, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_3;
 relative_coord(0, 1): textile_millspritelayout_3;
 relative_coord(1, 0): textile_millspritelayout_2;
 relative_coord(1, 1): textile_millspritelayout_2;
 relative_coord(2, 0): textile_millspritelayout_5;
 relative_coord(2, 1): textile_millspritelayout_4;
 relative_coord(3, 0): textile_millspritelayout_3;
 relative_coord(3, 1): textile_millspritelayout_5;
 relative_coord(4, 0): textile_millspritelayout_2;
 relative_coord(4, 1): textile_millspritelayout_1_anim;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_5, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_3;
 relative_coord(0, 1): textile_millspritelayout_3;
 relative_coord(0, 2): textile_millspritelayout_5;
 relative_coord(0, 3): textile_millspritelayout_5;
 relative_coord(1, 0): textile_millspritelayout_2;
 relative_coord(1, 1): textile_millspritelayout_2;
 relative_coord(1, 2): textile_millspritelayout_4;
 relative_coord(1, 3): textile_millspritelayout_1_anim;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, SELF, textile_milllayout_6, relative_pos) {
 relative_coord(0, 0): textile_millspritelayout_5;
 relative_coord(0, 1): textile_millspritelayout_3;
 relative_coord(0, 2): textile_millspritelayout_3;
 relative_coord(1, 0): textile_millspritelayout_5;
 relative_coord(1, 1): textile_millspritelayout_2;
 relative_coord(1, 2): textile_millspritelayout_2;
 relative_coord(2, 0): textile_millspritelayout_5;
 relative_coord(2, 1): textile_millspritelayout_1_anim;
 relative_coord(2, 2): textile_millspritelayout_4;
 textile_millspritelayout_6;
}

switch(FEAT_INDUSTRYTILES, PARENT, textile_milllayout, layout_num) {
 1: textile_milllayout_1;
 2: textile_milllayout_2;
 3: textile_milllayout_3;
 4: textile_milllayout_4;
 5: textile_milllayout_5;
 6: textile_milllayout_6;
 textile_milllayout_1;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

switch(FEAT_INDUSTRYTILES, SELF, textile_millnearby_industry, (nearby_tile_class( 1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, -1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 0) == TILE_CLASS_INDUSTRY) | (nearby_tile_class(-1, 1) == TILE_CLASS_INDUSTRY) | (nearby_tile_class( 0, 1) == TILE_CLASS_INDUSTRY)) { 1: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRYTILES, PARENT, textile_millplayer_check, ( (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_FUND) || (((extra_callback_info2 & 0xFF00) >> 8) == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; textile_millnearby_industry; }
switch (FEAT_INDUSTRYTILES, SELF, textile_milllocation_check, nearby_tile_slope(0,0) == SLOPE_FLAT) { 1: textile_millplayer_check; return CB_RESULT_LOCATION_DISALLOW; }

item(FEAT_INDUSTRYTILES, textile_milltile, 183) {
 property {
  substitute: 0;
  accepted_cargos: [[MNSP, 8], [WOOL, 8], [FICR, 8]];
  land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
  animation_info: [ANIMATION_LOOPING, 7];
  animation_speed: 3;
  animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
 }

 graphics {
  tile_check: textile_milllocation_check;
  textile_milllayout;
 }
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_textile_mill_1 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 2, 0: textile_milltile;
 2, 1: textile_milltile;
 3, 0: textile_milltile;
 3, 1: textile_milltile;
 4, 0: textile_milltile;
 4, 1: textile_milltile;
}

tilelayout tilelayout_textile_mill_2 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 0, 2: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 1, 2: textile_milltile;
 2, 0: textile_milltile;
 2, 1: textile_milltile;
 2, 2: textile_milltile;
}

tilelayout tilelayout_textile_mill_3 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 2, 0: textile_milltile;
 2, 1: textile_milltile;
}

tilelayout tilelayout_textile_mill_4 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 2, 0: textile_milltile;
 2, 1: textile_milltile;
 3, 0: textile_milltile;
 3, 1: textile_milltile;
 4, 0: textile_milltile;
 4, 1: textile_milltile;
}

tilelayout tilelayout_textile_mill_5 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 0, 2: textile_milltile;
 0, 3: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 1, 2: textile_milltile;
 1, 3: textile_milltile;
}

tilelayout tilelayout_textile_mill_6 {
 0, 0: textile_milltile;
 0, 1: textile_milltile;
 0, 2: textile_milltile;
 1, 0: textile_milltile;
 1, 1: textile_milltile;
 1, 2: textile_milltile;
 2, 0: textile_milltile;
 2, 1: textile_milltile;
 2, 2: textile_milltile;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
# 259 "sprites/nml/industries/textile_mill.pnml"
/* extra text template */


/* availability years - also update available from strings if changing these */


switch (FEAT_INDUSTRIES, SELF, textile_milltextile_mill, industry_distance(textile_mill)) { 0 .. 56: return CB_RESULT_LOCATION_DISALLOW; return CB_RESULT_LOCATION_ALLOW; }
switch (FEAT_INDUSTRIES, SELF, textile_millmixed_farm, industry_distance(mixed_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; textile_milltextile_mill; }
switch (FEAT_INDUSTRIES, SELF, textile_millsheep_farm, industry_distance(sheep_farm)) { 0 .. 16: return CB_RESULT_LOCATION_DISALLOW; textile_millmixed_farm; }
switch (FEAT_INDUSTRIES, SELF, textile_millcheck_location, ( (extra_callback_info2 == IND_CREATION_FUND) || (extra_callback_info2 == IND_CREATION_PROSPECT) ) ) { 1: return CB_RESULT_LOCATION_ALLOW; textile_millsheep_farm; }

switch(FEAT_INDUSTRIES, SELF, textile_millcolour, colour) { 0: return 0; 1: return 1; 2: return 2; 3: return 13; 4: return 2; 5: return 5; 6: return 1; 7: return 1; 8: return 0; 9: return 14; 10: return 10; 11: return 11; 12: return 13; 13: return 13; 14: return 14; 15: return 14; return 0; }

# 1 "sprites/nml/industries/../templates/produce_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* Production template for secondary industries with equal output to all output cargos
 *
 * Delivery period to consider a cargo for production ratios is the the last var_production_span days
 *
 * It accepts up to three input cargos and produes up to two output cargos
 * It uses the following permanent storages:
 *
 * var_date_received_1, var_date_received_2, var_date_received_3
 * var_input_cargo_1, var_input_cargo_2, var_input_cargo_3
 * var_ratio_cargo_1, var_ratio_cargo_2, var_ratio_cargo_3
 * var_production_span
 *
 * Needed defines in the industry's pnml which uses this template.
 * THIS_NUM_OUTPUT_CARGOS             number of output cargos
 *
 * The sum of the following should not exceed MAX_SUM_PROD_RATIO (see below):
 * THIS_PROD_RATIO_CARGO1         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO2         output per MAX_SUM_PROD_RATIO units input
 * THIS_PROD_RATIO_CARGO3         output per MAX_SUM_PROD_RATIO units input
 *
 * How cargos boost eachother (give in units of 1/MAX_SUM_PROD_RATIO)
 * It should be noted that THIS_PROD_RATIO_CARGO1 + THIS_BOOST_21 + THIS_BOOST_31 never should exceed MAX_SUM_PROD_RATIO
 * and similar for the other two cargos
 * THIS_BOOST_12
 * THIS_BOOST_13
 * THIS_BOOST_21
 * THIS_BOOST_23
 * THIS_BOOST_31
 * THIS_BOOST_32
 *
 * PRODUCTION_SPAN           time span which is considered for production ratios
 *
 */

/* granularity of production. That amount of input (per cargo) is needed in order to be processed */


/* Temporary variables used within this template */




produce (textile_millsimple_produce, waiting_cargo_1, waiting_cargo_2, waiting_cargo_3,
   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),

   LOAD_PERM(4) / 8 / 1 * LOAD_PERM(1) +
   LOAD_PERM(5) / 8 / 1 * LOAD_PERM(2) +
   LOAD_PERM(6) / 8 / 1 * LOAD_PERM(3),
   [
   /* Remove any remainder */
   STORE_PERM( LOAD_PERM(4) % (8 * 1), 4),
   STORE_PERM( LOAD_PERM(5) % (8 * 1), 5),
   STORE_PERM( LOAD_PERM(6) % (8 * 1), 6),
   0
   ]
);

switch (FEAT_INDUSTRIES, SELF, textile_millproduce,
   [
   /* Update the 'last delivery date' for the three input cargos */
   STORE_PERM( max(LOAD_PERM(10),(waiting_cargo_1 > 0) * current_date), 10),
   STORE_PERM( max(LOAD_PERM(11),(waiting_cargo_2 > 0) * current_date), 11),
   STORE_PERM( max(LOAD_PERM(12),(waiting_cargo_3 > 0) * current_date), 12),
   /* Reset the closure countdown */
   STORE_PERM( (waiting_cargo_1 == 0 && waiting_cargo_1 == 0 && waiting_cargo_3 == 0) * LOAD_PERM(15), 15),

   /* Store the delivered cargo permanently (for debugging purposes only, reset at beginning of month) */
   STORE_PERM( LOAD_PERM(7) + waiting_cargo_1, 7),
   STORE_PERM( LOAD_PERM(8) + waiting_cargo_2, 8),
   STORE_PERM( LOAD_PERM(9) + waiting_cargo_3, 9),

   /* Check whether the cargos were delivered within the time frame to be considered delivered concurrently */
   STORE_TEMP( (current_date - LOAD_PERM(10)) <= 30, 0),
   STORE_TEMP( (current_date - LOAD_PERM(11)) <= 30, 1),
   STORE_TEMP( (current_date - LOAD_PERM(12)) <= 30, 2),

   /* Calculate current production ratios for the individual cargos */
   STORE_PERM( 3 +
               LOAD_TEMP(1) * 2 +
               LOAD_TEMP(2) * 2,
       1
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(2) * 0,
       2
   ),
   STORE_PERM( 5 +
               LOAD_TEMP(0) * 3 +
               LOAD_TEMP(1) * 0,
       3
   ),

   /* Add the remainder to the current leftover cargos */
   STORE_PERM( LOAD_PERM(4) + waiting_cargo_1, 4),
   STORE_PERM( LOAD_PERM(5) + waiting_cargo_2, 5),
   STORE_PERM( LOAD_PERM(6) + waiting_cargo_3, 6),

   1
   ]) {
 textile_millsimple_produce;
}
# 273 "sprites/nml/industries/textile_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_production_level.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Checks for transported and received cargo the last month and increases the 'closure counter'
 * if nothing was transported or received. Otherwise it resets the closure_counter.
 *
 * switch name:  THIS_ID(check_production_level)
 */

switch(FEAT_INDUSTRIES, SELF, textile_millincrease_closure_counter, STORE_PERM((1 + LOAD_PERM(15)), 15)) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, textile_millreset_closure_counter, [STORE_PERM(0, 15), 1]) {
 return 0;
}
switch(FEAT_INDUSTRIES, SELF, textile_millcheck_production_level, [
   STORE_PERM(0, 7),
   STORE_PERM(0, 8),
   STORE_PERM(0, 9),
   transported_last_month_1 > 0 ||
   transported_last_month_2 > 0 ||
   (current_date - LOAD_PERM(10)) < 30 ||
   (current_date - LOAD_PERM(11)) < 30 ||
   (current_date - LOAD_PERM(12)) < 30
   ]
  ) {
 0: textile_millincrease_closure_counter;
 textile_millreset_closure_counter;
}
# 274 "sprites/nml/industries/textile_mill.pnml" 2
# 1 "sprites/nml/industries/../templates/check_secondary_closure.pnml" 1
/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The closure behaviour of secondary industries can be controlled by a NewGRF parameter
 *
 * used permanent storage: var_closure_counter (15)
 */

/* 50 : 50 chance that we actually close down (extra_callback_info2 contains random bits) */
switch(FEAT_INDUSTRIES, SELF, textile_millclose_random, (extra_callback_info2 & 32)) {
 0: return CB_RESULT_IND_PROD_CLOSE;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}

/* Check whether sufficient time expired to close it */
switch(FEAT_INDUSTRIES, SELF, textile_millhad_produced_check, LOAD_PERM(15)) {
 0..60: return CB_RESULT_IND_PROD_NO_CHANGE; // 60 month we accept receiving or delivering nothing
 textile_millclose_random;
}

/* Check whether we may close industries at all */
switch(FEAT_INDUSTRIES, SELF, textile_millcheck_closure, allow_close_secondary) {
 1..255: textile_millhad_produced_check;
 return CB_RESULT_IND_PROD_NO_CHANGE;
}
# 275 "sprites/nml/industries/textile_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/extra_text_secondary.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This template prints extra texts in the industry view
 *
 * The displayed text differs whether debugging is enabled or not
 *
 * Required defines in the industry's pnml file:
 *
 * THIS_STR_EXTRA_TEXT         normal extra text without debugging
 * THIS_STR_DEBUG_TEXT         debugging string
 */
# 27 "sprites/nml/industries/../templates/extra_text_secondary.pnml"
/* First fill the stack for the string parameters before actually
 * returning the string
 */
switch (FEAT_INDUSTRIES, SELF, textile_millextra_text_debug, [
   STORE_TEMP(produced_this_month_1,256),
   STORE_TEMP(produced_this_month_2,257),
   STORE_TEMP(current_date - max( max(LOAD_PERM(10), LOAD_PERM(11)), LOAD_PERM(12)), 258)
   ]) {
 return string(STR_EXTRA_TEXT_DEBUG_SECONDARY);
}
switch (FEAT_INDUSTRIES, SELF, textile_millextra_text, [



   show_debug_texts
   ]) {
 1: textile_millextra_text_debug;
 return string(STR_EXTRA_TEXTILE_MILL);
}
# 277 "sprites/nml/industries/textile_mill.pnml" 2

# 1 "sprites/nml/industries/../templates/check_availability.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Template which checks availability of an industry for building
 * - Allow in THIS_MIN_YEAR ... THIS_MAX_YEAR
 * - Always allow in SE
 * - Never allow when NewGRF parameter forbids building
 * - Always allow otherwise
 *
 * Optionally an industry may define in its pnml file
 * THIS_MIN_YEAR      first availability year
 * THIS_MAX_YEAR      last availability year
 */
# 29 "sprites/nml/industries/../templates/check_availability.pnml"
/* Check for restriction via parameter */
switch(FEAT_INDUSTRIES, SELF, textile_millcheck_availability_param, restrict_open_during_gameplay) {
 1..255: return CB_RESULT_IND_NO_CONSTRUCTION; // disallow when restrictions in place
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY; // we may build
}

/* Allow always in the scenario editor */
switch (FEAT_INDUSTRIES, SELF, textile_millavailable_game_mode, game_mode == GAMEMODE_GAME) {
 1: textile_millcheck_availability_param;
 return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

/* Allow only within the availability years */
switch (FEAT_INDUSTRIES, SELF, textile_millcheck_availability, current_date) {
 date(0,1,1) .. date(5000000,12,31): textile_millavailable_game_mode;
 return CB_RESULT_IND_NO_CONSTRUCTION;
}
# 279 "sprites/nml/industries/textile_mill.pnml" 2

item(FEAT_INDUSTRIES, textile_mill, 0x2A) {
 property {
  substitute: 0;
  layouts: [
    tilelayout_textile_mill_1,
    tilelayout_textile_mill_2,
    tilelayout_textile_mill_3,
    tilelayout_textile_mill_4,
    tilelayout_textile_mill_5,
    tilelayout_textile_mill_6
   ];
  life_type: IND_LIFE_TYPE_PROCESSING;
  closure_msg: TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
  prod_increase_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
  prod_decrease_msg: TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
  new_ind_msg: TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
  name: string(STR_IND_TEXTILE_MILL);
  nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_IND_TEXTILE_MILL));
  prod_cargo_types: [GOOD];
  accept_cargo_types: [MNSP, WOOL, FICR];
  prod_multiplier: [0, 0];
  input_multiplier_1: [0, 0];
  input_multiplier_2: [0, 0];
  input_multiplier_3: [0, 0];
  min_cargo_distr: 5;
  conflicting_ind_types: [];
  prob_random: 8;
  prob_in_game: 7;
  prospect_chance: 0.75;
  fund_cost_multiplier: 120;
  map_colour: 37;
  remove_cost_multiplier: 0;
  spec_flags: 0;
 }
 graphics {
  produce_cargo_arrival: textile_millproduce;
  construction_probability:textile_millcheck_availability;
  monthly_prod_change: textile_millcheck_production_level;
  random_prod_change: textile_millcheck_closure;
  extra_text_industry: textile_millextra_text;
  extra_text_fund: return string(STR_FUND_AVAILABLE_FROM, string(STR_FUND_AVAILABLE_FROM_DATE_TEXTILE_MILL));
  colour: textile_millcolour;
 }
}

# 1 "sprites/nml/industries/../templates/undefs.pnml" 1
/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

// for each industry


// from secondary production template
# 23 "sprites/nml/industries/../templates/undefs.pnml"
/* from extra text template for secondary industries */




/* from extra text template for primary industries */

/* from extra text template for blackhole industries */


/* from availability check */
# 325 "sprites/nml/industries/textile_mill.pnml" 2
# 88 "<stdin>" 2
